/**
 * 
 */
package com.iris.sdmx.exceltohtml.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.exception.ApplicationException;
import com.iris.model.ReturnTemplate;
import com.iris.model.RoleType;
import com.iris.model.UserMaster;
import com.iris.sdmx.exceltohtml.bean.PreviewPublishBean;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnPreviewBean;
import com.iris.sdmx.exceltohtml.service.SdmxReturnPreviewService;
import com.iris.sdmx.exceltohtml.validator.SdmxRetrunPreviewValidator;
import com.iris.sdmx.util.SDMXConstants;
import com.iris.service.GenericService;
import com.iris.service.impl.ReturnTemplateService;
import com.iris.util.ResourceUtil;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;

/**
 * @author apagaria
 *
 */
@RestController
@RequestMapping("/service/sdmx/returnPreview")
public class SdmxReturnPreviewController {

	private static final Logger LOGGER = LogManager.getLogger(SdmxReturnPreviewController.class);

	@Autowired
	private SdmxReturnPreviewService sdmxReturnPreviewService;

	@Autowired
	private SdmxRetrunPreviewValidator sdmxRetrunPreviewValidator;

	@Autowired
	private ReturnTemplateService returnTemplateService;
	
	@Autowired
	private GenericService<UserMaster, Long> userMasterService;

	/**
	 * @param jobProcessId
	 * @param userId
	 * @return
	 */
	@GetMapping("/user/{userId}/returns")
	public ServiceResponse fetchElementList(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validateFetchAllRecord(userId, jobProcessId);
			List<SdmxReturnPreviewBean> sdmxReturnPreviewBeanList = sdmxReturnPreviewService.fetchAllRecord();
			serviceResponseBuilder.setResponse(sdmxReturnPreviewBeanList);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	private String getFileHtmlString(String outPutFilePath) throws IOException {
		StringBuilder contentBuilder = new StringBuilder();
		BufferedReader in = null;
		try {
			in = new BufferedReader(new FileReader(outPutFilePath));
			String str;
			while ((str = in.readLine()) != null) {
				contentBuilder.append(str);
			}

		} catch (IOException e) {
		} finally {
			if (in != null) {
				in.close();
			}
		}
		return contentBuilder.toString();
	}

	/**
	 * @param jobProcessId
	 * @param userId
	 * @param returnTemplateId
	 * @return
	 */
	@GetMapping("/user/{userId}/returnPreview/{returnTemplateIdFk}/checkStatusForUpload")
	public ServiceResponse fetchStatus(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("returnTemplateIdFk") Long returnTemplateIdFk) {
		LOGGER.info("START - Fetch Status By Id request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validateFetchHtmlById(userId, jobProcessId, returnTemplateIdFk);
			Boolean isReturnUploadable = sdmxReturnPreviewService
					.isReturnUploadable(new ReturnTemplate(returnTemplateIdFk));
			if (isReturnUploadable) {
				serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
				serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
			} else {
				serviceResponseBuilder.setStatus(false);
				serviceResponseBuilder.setStatusCode(SDMXConstants.FAILURE_CODE);
				serviceResponseBuilder.setStatusMessage(SDMXConstants.FAILURE_MESSAGE);
			}
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Status By Id request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	@GetMapping("/user/{userId}/returnPreview/{returnTemplateId}/{returnPreviewId}")
	public ServiceResponse fetchHtmlById(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("returnTemplateId") Long returnTemplateId,
			@PathVariable("returnPreviewId") Long returnPreviewId) {
		LOGGER.info("START - Fetch Html By Id request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validateFetchHtmlById(userId, jobProcessId, returnTemplateId);
			SdmxReturnPreviewBean sdmxReturnPreviewBean = sdmxReturnPreviewService
					.fetchHtmlByReturnTemplateId(returnTemplateId,returnPreviewId);
			ReturnTemplate returnTemplate = returnTemplateService.fetchEntityByReturnTemplateId(returnTemplateId);
			String htmlFilePath = ResourceUtil.getKeyValue("filepath.root") + File.separator
					+ ResourceUtil.getKeyValue("excel.to.html.base.path") + File.separator
					+ returnTemplate.getReturnObj().getReturnCode() + File.separator
					+ sdmxReturnPreviewBean.getHtmlFilePath();
			LOGGER.debug("Fetch Html By Id request received with Job Processing ID : " + jobProcessId
					+ "HTML File Path - " + htmlFilePath);
			String htmlStringContent = null;
			LOGGER.debug("Fetch Html By Id request received with Job Processing ID : " + jobProcessId
					+ "HTML File Path - " + htmlFilePath);
			if (!StringUtils.isBlank(htmlFilePath)) {
				htmlStringContent = getFileHtmlString(htmlFilePath);
			} else {
				throw new ApplicationException(ErrorCode.E0973.toString(),
						ObjectCache.getErrorCodeKey(ErrorCode.E0973.toString()));
			}
			if (!StringUtils.isBlank(htmlStringContent)) {
				serviceResponseBuilder.setResponse(Base64.encodeBase64String(htmlStringContent.getBytes("utf-8")));
			} else {
				throw new ApplicationException(ErrorCode.E0277.toString(),
						ObjectCache.getErrorCodeKey(ErrorCode.E0277.toString()));
			}
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Html By Id request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
	
	
	/**
	 * @param jobProcessId
	 * @param userId
	 * @return
	 */
	@PutMapping("/user/{userId}/role/{roleId}/lang/{langCode}/returnsPreviewList")
	public ServiceResponse fetchReturnPreviewList(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("roleId") String roleId,
			@PathVariable("langCode") String langCode, @RequestBody List<Long> returnIdList) {
		LOGGER.info("START - Fetch Return Preview List request received with Job Processing ID : " + jobProcessId +"and return id list size" + returnIdList.size());
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			
			UserMaster userMaster = userMasterService.getDataById(userId);
			if(userMaster == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0638.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0638.toString())).build();
			} else if(userMaster.getRoleType() == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0481.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0481.toString())).build();
			}
			
			RoleType roleType = userMaster.getRoleType();
			
			sdmxRetrunPreviewValidator.validateFetchAllRecord(userId, jobProcessId);
			List<SdmxReturnPreviewBean> sdmxReturnPreviewBeanList = sdmxReturnPreviewService.fetchRecordByReturnId(returnIdList,jobProcessId,roleType.getRoleTypeId());
			serviceResponseBuilder.setResponse(sdmxReturnPreviewBeanList);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview List request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
	
	/**
	 * @param jobProcessId
	 * @param userId
	 * @return
	 */
	@PutMapping("/user/{userId}/role/{roleId}/lang/{langCode}/publishReturnTemplate")
	public ServiceResponse publishReturnTemplate(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("roleId") Long roleId,
			@PathVariable("langCode") String langCode, @RequestBody SdmxReturnPreviewBean sdmxReturnPreviewBean) {
		LOGGER.info("START - Publish return template request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validatePublishReturnTemplate(userId, jobProcessId, sdmxReturnPreviewBean);
			Boolean isPublished = sdmxReturnPreviewService.publishReturnTemplate(sdmxReturnPreviewBean,jobProcessId,userId,roleId,langCode);
			serviceResponseBuilder.setResponse(isPublished);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Publish return template request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
	
	/**
	 * @param jobProcessId
	 * @param userId
	 * @return
	 */
	@PutMapping("/user/{userId}/role/{roleId}/lang/{langCode}/activateDeactivateTemplate")
	public ServiceResponse activateDeactivateTemplate(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("roleId") String roleId,
			@PathVariable("langCode") String langCode, @RequestBody SdmxReturnPreviewBean sdmxReturnPreviewBean) {
		LOGGER.info("START - Activate/Deactivate template request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validateActivateDeactivateTemplate(userId, jobProcessId, sdmxReturnPreviewBean);
			 sdmxReturnPreviewService.activateDeactivateTemplate(sdmxReturnPreviewBean,jobProcessId);
			serviceResponseBuilder.setResponse(true);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Activate/Deactivate template request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
	
	/**
	 * @param jobProcessId
	 * @param userId
	 * @return
	 */
	@PutMapping("/user/{userId}/role/{roleId}/lang/{langCode}/cellCalculation")
	public ServiceResponse totalMappedCellCalculation(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("roleId") String roleId,
			@PathVariable("langCode") String langCode, @RequestBody PreviewPublishBean previewPublishBean) {
		LOGGER.info("START - Cell calculation request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validateCellCalculation(userId, jobProcessId, previewPublishBean);
			PreviewPublishBean previewPublishOutputBean = new PreviewPublishBean();
			previewPublishOutputBean = sdmxReturnPreviewService.totalMappedCellCalculation(previewPublishBean,jobProcessId);
			serviceResponseBuilder.setResponse(previewPublishOutputBean);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Cell calculation request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
	
	@GetMapping("/user/{userId}/role/{roleId}/lang/{langCode}/getTemplateFileBasePath")
	public ServiceResponse getTemplateFileBasePath(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId,@PathVariable("roleId") String roleId,
			@PathVariable("langCode") String langCode) {
		LOGGER.info("START - Get template file base path request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validateGetTemplateFileBasePath(userId, jobProcessId);
			
			String xlsFilePath = ResourceUtil.getKeyValue("filepath.root") + File.separator
					+ ResourceUtil.getKeyValue("excel.to.html.xls.base.path") + File.separator;
			
			serviceResponseBuilder.setResponse(xlsFilePath);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Get template file base path request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
}
