/**
 * 
 */
package com.iris.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.iris.caching.ObjectCache;
import com.iris.dto.Option;
import com.iris.dto.Options;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.model.BranchMasterDomestic;
import com.iris.repository.BranchMasterDomesticRepo;
import com.iris.service.impl.BranchMasterDomesticService;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.MethodConstants;

/**
 * @author Siddique H Khan
 *
 */

@RestController
@RequestMapping("/service/branchMaster")
public class BranchMasterDomesticController {

	static final Logger logger = LogManager.getLogger(BranchMasterDomesticController.class);

	@Autowired
	BranchMasterDomesticService branchMasterDomesticService;

	@Autowired
	private BranchMasterDomesticRepo branchMasterDomesticRepo;

	@GetMapping(value = "/fetchDomesticBranchData/{branchWorkingCode}")
	public ServiceResponse fetchDomesticBranchData(@PathVariable String branchWorkingCode) {

		logger.info("fetch fetchBranchMasterDomestictData method started " + branchWorkingCode);

		ServiceResponse serviceResponse = null;

		if (StringUtils.isBlank(branchWorkingCode)) {

			return serviceResponse;
		}

		List<BranchMasterDomestic> listOfActiveBranchMasterDomestic = null;

		Map<String, Object> columnValueMap = new HashMap<>();
		columnValueMap.put(ColumnConstants.BRANCH_WORKING_CODE.getConstantVal(), branchWorkingCode);

		listOfActiveBranchMasterDomestic = branchMasterDomesticService.getDataByObject(columnValueMap, MethodConstants.GET_DATA_BY_BRANCH_WORKING_CODE.getConstantVal());

		List<String> branchCodeList = listOfActiveBranchMasterDomestic.stream().map(BranchMasterDomestic::getBranchCode).collect(Collectors.toList());
		logger.info("fetch fetchBranchMasterDomestictData list size" + branchCodeList.size());
		serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
		serviceResponse.setResponse(branchCodeList);
		return serviceResponse;

	}

	@GetMapping(value = "/checkActiveBranchCode")
	public ServiceResponse checkActiveBranchCode() {
		logger.info("check checkActiveBranchCode method started");
		Option option = null;
		Options options = new Options();
		List<Option> optionList = new ArrayList<>();
		List<BranchMasterDomestic> listOfBranchMasterDomestic = null;
		listOfBranchMasterDomestic = branchMasterDomesticRepo.getBranchMasterList();
		if (CollectionUtils.isEmpty(listOfBranchMasterDomestic)) {
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
		}
		for (BranchMasterDomestic branchMasterDomestic : listOfBranchMasterDomestic) {
			option = new Option();
			option.setKey(branchMasterDomestic.getBranchCode());
			option.setValue(branchMasterDomestic.getBranch());
			optionList.add(option);
		}
		Collections.sort(optionList, new Comparator<Option>() {
			@Override
			public int compare(Option o1, Option o2) {
				return o1.getValue().compareTo(o2.getValue());
			}
		});
		options.setOptionList(optionList);
		return new ServiceResponseBuilder().setStatus(true).setResponse(new Gson().toJson(options)).build();
	}
}
