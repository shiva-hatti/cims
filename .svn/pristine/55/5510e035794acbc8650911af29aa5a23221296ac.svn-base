package com.iris.service;

import java.io.Serializable;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.hibernate.service.spi.ServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

//import com.iris.bean.EntityBean;
//import com.iris.bean.FilingCalendar;
//import com.iris.bean.FillingEndDatesBean;
//import com.iris.bean.FinYearFreqDates;
//import com.iris.bean.FinYearFreqDesc;
//import com.iris.bean.Holiday;
//import com.iris.bean.Return;
//import com.iris.constants.RevisionRequestConstants;
//import com.iris.constants.ServiceConstants;
import com.iris.controller.DateValidationsController;
import com.iris.dateutility.enums.DateConstants;
import com.iris.dateutility.util.DateManip;
import com.iris.dto.FillingEndDatesBean;
import com.iris.model.EntityBean;
import com.iris.model.FilingCalendar;
import com.iris.model.FinYearFreqDates;
import com.iris.model.FinYearFreqDesc;
import com.iris.model.Holiday;
import com.iris.model.Return;
//import com.iris.repository.FilingCalendarRepository;
//import com.iris.repository.FinYearFreqDatesRepository;
//import com.iris.repository.HolidayRepository;
import com.iris.repository.FilingCalendarRepository;
import com.iris.repository.FinYearFreqDatesRepository;
import com.iris.repository.HolidayRepository;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.RevisionRequestConstants;

/**
 * This file handles the filling calendar Database Operations for modified table
 * of filling calendar .
 * 
 * @author	Amruta Kadam
 * @since	24-05-2018
 * @version	1.0
 */
@Service
public class FilingCalendarModifiedService {


	@Autowired
	private FilingCalendarRepository filingCalendarRepository;
	
	@Autowired
	private FinYearFreqDatesRepository finYearFreqDatesRepository;
	
	@Autowired
	private HolidayRepository holidayRepository;
	
	@Autowired
	private DateValidationsController dateValidationsControlObj;
	
	public Map<Long, Map<Long, FillingEndDatesBean>> fetchFormFillingEndDatesDates(Return returnObj, EntityBean entityObj, String financialYear,
			String financialMonth, String reportingDate, Integer returnPropertyValId) throws ServiceException, ParseException {
		
		// Set weekend List
		List<Integer> weekenedList = Arrays.asList(DateConstants.SATURDAY.getDateConstantInt(),DateConstants.SUNDAY.getDateConstantInt());
		DateManip.setWEEKEND_LIST(weekenedList);
					
		Map<Long, Map<Long, FillingEndDatesBean>> formFillingWindowMap = null;
		Long formFreqId = returnObj.getFrequency().getFrequencyId();
		Long formId = returnObj.getReturnId();
		Long finYearId = entityObj.getFinYrFormat().getFinYrFormatId();

		FilingCalendar fillingCalendar = new FilingCalendar();
		fillingCalendar.setReturnFrequencyId(formFreqId);
		fillingCalendar.setReturnId(formId);
		fillingCalendar.setFinYearId(finYearId);
		if (formFreqId == 9) {
			fillingCalendar.setCalDate(DateManip.convertStringToDate(reportingDate, DateConstants.DD_MM_YYYY.getDateConstants()));
		}
		
		FilingCalendar fillingCalendarObj = null;
		if(StringUtils.isEmpty(returnPropertyValId)) {
			fillingCalendarObj = filingCalendarRepository.findFilingCalendarByReturnIdAndFinYearId(fillingCalendar.getReturnId(), fillingCalendar.getFinYearId());
		}else {
			fillingCalendarObj = filingCalendarRepository.findFilingCalendarByReturnIdAndFinYearIdAndRetProValId(fillingCalendar.getReturnId(), fillingCalendar.getFinYearId(), returnPropertyValId);
		}
		if (fillingCalendarObj != null) {

			String startDate = null;
			String endDate = null;

			formFillingWindowMap = new HashMap<>();

			Set<FinYearFreqDesc> finYearFreqDesc = null;

			finYearFreqDesc = returnObj.getFrequency().getFinYearFreqDesc();
			
			List<FinYearFreqDates> finYrFreqDatesList = finYearFreqDatesRepository.findAll();
			Map<String, FillingEndDatesBean> fillingFreqFinFormatDatesMap = dateValidationsControlObj.fetchFreqFinFormatDatesFromDb(finYrFreqDatesList);

			// -- ITERATING THE OBJECTS FOR FETCHING THE MAP OF FILLING WINDOW
			// EXTENSION
			List<Integer> fillingWindowExtensionList = new ArrayList<>();
			List<Integer> fillingWindowEndExtensionList = new ArrayList<>();

			if (!fillingWindowExtensionList.contains(fillingCalendarObj.getFilingWindowExtensionStart())) {
				fillingWindowExtensionList.add(fillingCalendarObj.getFilingWindowExtensionStart());
				fillingWindowEndExtensionList.add(fillingCalendarObj.getFilingWindowExtensionEnd());
			}
			// -- FETCHING THE FILING WINDOW MAP
			Map<String, Map<Integer, String>> fillingWindowFinalMap = null;

			FinYearFreqDesc finYearFreqDescObj;
			Iterator<FinYearFreqDesc> itr = finYearFreqDesc.iterator();
			List<Long> finYrFreqIdList = new ArrayList<>();
			while (itr.hasNext()) {
				finYearFreqDescObj = itr.next();
				finYrFreqIdList.add(finYearFreqDescObj.getFinYrFreqDescId());
			}

			List<Holiday> holidayList = holidayRepository.findActiveHoliday();
			String currentDate = null;
			boolean isIncludeHoliday = fillingCalendarObj.getIncludeHoliday();
			boolean isIncludeWeekend = fillingCalendarObj.getIncludeWeekend();
			
			if (formFreqId.equals(RevisionRequestConstants.FREQ_ID_ANNUALLY.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_HALF_YEARLY.getConstantLongVal()) 
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_QUARTERLY.getConstantLongVal()) 
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_ANNUAL_QUATER.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_CUSTOMIZED_ANNUALLY.getConstantLongVal())) {
				// -- Processing for Annual Frequency -- Processing for Half
				// Yearly Frequency -- Processing for Quarterly Frequency
				fillingWindowFinalMap = dateValidationsControlObj.getFillingWindowForYearly(fillingFreqFinFormatDatesMap, fillingWindowExtensionList, financialYear, finYearId, finYrFreqIdList, holidayList, formFreqId, isIncludeHoliday, isIncludeWeekend);
			} else if (formFreqId.equals(RevisionRequestConstants.FREQ_ID_MONTHLY.getConstantLongVal())) {
				// -- Processing for Monthly
				List<String> fillingStartEndDatesMonthly = dateValidationsControlObj.fetchStartEndDatesMonthly(financialMonth, financialYear);
				fillingWindowFinalMap = dateValidationsControlObj.getFillingWindowMonthly(fillingWindowExtensionList, fillingStartEndDatesMonthly, formFreqId, holidayList, isIncludeHoliday, isIncludeWeekend);
			}else if (formFreqId.equals(RevisionRequestConstants.FREQ_ID_FIRST_HALF_MONTHLY_EXCLUDE_HOLIDAY.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_FORTNIGHTLY.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_WEEKLY.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_DAILY.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_FORTNIGHTLY_15_DAYS.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_QUARTERLY_WITH_LAST_FORTNIGHT_OF_QUARTER.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_MONTHLY_WITH_LAST_FORTNIGHT_OF_QUARTER.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_CUSTOMIZED_MONTHLY_WITH_LAST_FORTNIGHT_OF_QUARTER.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_CUSTOMIZED_QUARTERLY_WITH_LAST_FORTNIGHT_OF_QUARTER.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_CUSTOMIZED_MONTHLY_WITH_LAST_FRIDAY_OF_QUARTER.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_HALF_MONTHLY.getConstantLongVal())) {
				return dateValidationsControlObj.getFillingWindow(formFreqId,fillingCalendarObj.getFilingWindowExtensionStart(),reportingDate, holidayList, isIncludeHoliday, isIncludeWeekend);
			}
			
			FillingEndDatesBean fillingEndDatesBeanObj = null;
			Map<Long, FillingEndDatesBean> fillingWindowEndDatesMap = new HashMap<>();
			// -- SUBMITTING THE DATA IN THE GRID
			if (formFreqId.equals(RevisionRequestConstants.FREQ_ID_ANNUALLY.getConstantLongVal()) 
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_HALF_YEARLY.getConstantLongVal()) 
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_QUARTERLY.getConstantLongVal()) 
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_ANNUAL_QUATER.getConstantLongVal())
					|| formFreqId.equals(RevisionRequestConstants.FREQ_ID_CUSTOMIZED_ANNUALLY.getConstantLongVal())) {
				// -- Processing for Annual Frequency -- Processing for Half
				// Yearly Frequency -- Processing for Quarterly Frequency
				for (Long finYrFreqId : finYrFreqIdList) {
					if(!Objects.isNull(fillingWindowFinalMap)) {
						currentDate = fillingWindowFinalMap.get(finYearId + GeneralConstants.FILLING_DATES_MAP_SEPARATOR.getConstantVal() + finYrFreqId).get(fillingCalendarObj.getFilingWindowExtensionStart());
						startDate = currentDate.split(GeneralConstants.FILLING_WINDOW_DATE_SEPARATOR_FOR_VIEW.getConstantVal())[0];
						endDate = currentDate.split(GeneralConstants.FILLING_WINDOW_DATE_SEPARATOR_FOR_VIEW.getConstantVal())[1];
						fillingEndDatesBeanObj = new FillingEndDatesBean();
						fillingEndDatesBeanObj.setStartDate(startDate);
						fillingEndDatesBeanObj.setEndDate(endDate);
						fillingWindowEndDatesMap.put(finYrFreqId, fillingEndDatesBeanObj);
					}
				}
			} else if (formFreqId.equals(RevisionRequestConstants.FREQ_ID_MONTHLY.getConstantLongVal()) && !Objects.isNull(fillingWindowFinalMap)) {
					// -- Processing for Monthly
					currentDate = fillingWindowFinalMap.get(formFreqId.toString()).get(fillingCalendarObj.getFilingWindowExtensionStart());
					startDate = currentDate.split(GeneralConstants.FILLING_WINDOW_DATE_SEPARATOR_FOR_VIEW.getConstantVal())[0];
					endDate = currentDate.split(GeneralConstants.FILLING_WINDOW_DATE_SEPARATOR_FOR_VIEW.getConstantVal())[1];
					fillingEndDatesBeanObj = new FillingEndDatesBean();
					fillingEndDatesBeanObj.setStartDate(startDate);
					fillingEndDatesBeanObj.setEndDate(endDate);
					fillingWindowEndDatesMap.put(Long.parseLong(financialMonth), fillingEndDatesBeanObj);
			}
			formFillingWindowMap.put(formFreqId, fillingWindowEndDatesMap);
		}
		return formFillingWindowMap;
	}


}