package com.iris.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.iris.caching.ObjectCache;
import com.iris.dto.Option;
import com.iris.dto.OptionBean;
import com.iris.dto.Options;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.model.CountryBranchMaster;
import com.iris.model.CountryMaster;
import com.iris.model.DynamicDropDownBean;
import com.iris.model.ReturnCountryMapping;
import com.iris.repository.ReturnCountryMappingRepo;
import com.iris.service.impl.CountryMasterService;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.GeneralConstants;

/**
 * @author Siddique H Khan
 */
@RestController
@RequestMapping("/service/countryData")
public class CountryMasterController {
	static final Logger logger = LogManager.getLogger(CountryMasterController.class);

	@Autowired
	CountryMasterService countryMasterService;

	@Autowired
	private ReturnCountryMappingRepo returnCountryMappingRepo;

	@GetMapping(value = "/fetchActiveCountryData/{languageCode}")
	public ServiceResponse fetchActiveCountryList(@PathVariable String languageCode) {
		logger.info("fetch country data controller started " + languageCode);
		ServiceResponse serviceResponse = null;
		Option option = null;
		Options options = null;
		List<Option> optionList = null;
		List<CountryMaster> listOfActiveCountryData = null;
		if (languageCode != null) {

			listOfActiveCountryData = new ArrayList<>();
			optionList = new ArrayList<>();
			options = new Options();
			listOfActiveCountryData = countryMasterService.getActiveDataFor(CountryMaster.class, null);

			for (CountryMaster countryMaster : listOfActiveCountryData) {
				option = new Option();
				if (languageCode.equals(GeneralConstants.ENG_LANG.getConstantVal())) {
					option.setKey(countryMaster.getCountryCode());
					option.setValue(countryMaster.getCountryName().toUpperCase());
				} else if (languageCode.equals(GeneralConstants.HIN_LANG.getConstantVal())) {
					option.setKey(countryMaster.getCountryCode());
					option.setValue(countryMaster.getCountryNameBil().toUpperCase());
				}
				optionList.add(option);
			}
			Collections.sort(optionList, new Comparator<Option>() {
				@Override
				public int compare(Option o1, Option o2) {
					return o1.getValue().compareTo(o2.getValue());
				}
			});

			options.setOptionList(optionList);
			return new ServiceResponseBuilder().setStatus(true).setResponse(new Gson().toJson(options)).build();
		}
		return serviceResponse;
	}

	@GetMapping(value = "/fetchActiveCountryDropdownList/{languageCode}")
	public ServiceResponse fetchActiveCountryDropdownList(@PathVariable String languageCode) {

		ServiceResponse serviceResponse = null;
		DynamicDropDownBean option = null;

		List<DynamicDropDownBean> optionList = null;
		List<CountryMaster> listOfActiveCountryData = null;
		if (languageCode != null) {

			listOfActiveCountryData = new ArrayList<>();
			optionList = new ArrayList<>();

			listOfActiveCountryData = countryMasterService.getActiveDataFor(CountryMaster.class, null);

			for (CountryMaster countryMaster : listOfActiveCountryData) {
				option = new DynamicDropDownBean();
				if (languageCode.equals(GeneralConstants.ENG_LANG.getConstantVal())) {
					option.setKey(countryMaster.getId());
					option.setValue(countryMaster.getCountryName());
				} else if (languageCode.equals(GeneralConstants.HIN_LANG.getConstantVal())) {
					option.setKey(countryMaster.getId());
					option.setValue(countryMaster.getCountryNameBil());
				}
				optionList.add(option);
			}

			String jsonResult = new Gson().toJson(optionList);
			serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			serviceResponse.setResponse(jsonResult);

		}
		return serviceResponse;
	}

	@GetMapping(value = { "/fetchActiveCountryCodeList/{returnCode}", "/fetchActiveCountryCodeList" })
	public ServiceResponse fetchActiveCountryCodeData(@PathVariable(name = "returnCode", required = false) String returnCode) {
		ServiceResponse serviceResponse = null;
		List<CountryMaster> listOfActiveCountryData = null;

		if (returnCode == null) {
			listOfActiveCountryData = countryMasterService.getActiveDataFor(CountryMaster.class, null);
		} else {
			List<ReturnCountryMapping> ReturnCountryMappingList = returnCountryMappingRepo.getCountryCodeByReturnCode(returnCode);
			listOfActiveCountryData = ReturnCountryMappingList.stream().map(ReturnCountryMapping::getCountryIdFk).collect(Collectors.toList());
		}

		List<String> countryCodeList = listOfActiveCountryData.stream().map(CountryMaster::getCountryCode).collect(Collectors.toList());

		serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
		serviceResponse.setResponse(countryCodeList);
		return serviceResponse;
	}

	@GetMapping(value = "/fetchActiveCountryBranchList")
	public ServiceResponse fetchActiveCountryBranchList() {
		logger.info("Fetch Active Country Branch List data controller started ");
		ServiceResponse serviceResponse = null;
		Option option = null;
		Options options = null;
		OptionBean optionBean = null;
		List<Option> optionList = null;
		List<CountryMaster> listOfActiveCountryBranchMasterData = null;
		List<OptionBean> detailsList = null;
		try {
			listOfActiveCountryBranchMasterData = new ArrayList<>();
			optionList = new ArrayList<>();
			options = new Options();
			listOfActiveCountryBranchMasterData = countryMasterService.getActiveDataFor(CountryMaster.class, null);
			if (CollectionUtils.isEmpty(listOfActiveCountryBranchMasterData)) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			if (!CollectionUtils.isEmpty(listOfActiveCountryBranchMasterData)) {
				for (CountryMaster countryMaster : listOfActiveCountryBranchMasterData) {
					detailsList = new ArrayList<>();
					option = new Option();
					option.setKey(countryMaster.getCountryCode());
					option.setValue(countryMaster.getCountryName().toUpperCase());
					List<CountryBranchMaster> countryBranchMasterList = countryMaster.getBranchIdFk().stream().collect(Collectors.toList());
					if (!CollectionUtils.isEmpty(countryBranchMasterList)) {
						for (CountryBranchMaster countryBranchMaster : countryBranchMasterList) {
							optionBean = new OptionBean();
							optionBean.setKey(countryBranchMaster.getBranchCode());
							optionBean.setValue(countryBranchMaster.getBranchName());
							detailsList.add(optionBean);
						}
					}
					option.setDetailsList(detailsList);
					optionList.add(option);
				}
			}
			options.setOptionList(optionList);
			serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			serviceResponse.setResponse(options);
			return serviceResponse;
		} catch (Exception e) {
			logger.info("fetchActiveCountryBranchList ", e);
			return new ServiceResponseBuilder().setStatus(false).setResponse(null).build();
		}
	}

}