package com.iris.formula.gen.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.iris.formula.gen.AutoCalVesrion;
import com.iris.formula.gen.AutoCalVesrionRepo;
import com.iris.formula.gen.FormulaBean;
import com.iris.formula.gen.FormulaGen;
import com.iris.formula.gen.FormulaGenRepo;
import com.iris.formula.gen.controller.AutoCalFormulaParts;
import com.iris.formula.gen.controller.CrossFormulaParts;
import com.iris.formula.gen.controller.FormulaConverter;
import com.iris.model.AutoCalculationFormula;
import com.iris.model.ErrorCodeDetail;
import com.iris.model.ErrorCodeLabelMapping;
import com.iris.model.FormulaCategoryType;
import com.iris.model.LanguageMaster;
import com.iris.model.Return;
import com.iris.model.ReturnSectionVersionMap;
import com.iris.model.ReturnTemplate;
import com.iris.model.UserMaster;
import com.iris.repository.AutoCalculationFormulaRepo;
import com.iris.repository.ErrorCodeDetailRepo;
import com.iris.repository.ErrorCodeLabelMappingRepository;
import com.iris.repository.ErrorVersionChannelMappingRepository;
import com.iris.repository.ReturnRepo;
import com.iris.repository.ReturnSectionVersionMapRepo;
import com.iris.repository.ReturnTemplateRepository;
import com.iris.repository.UserMasterRepo;



@Service
public class FormulaGeneratorService {

	@Autowired
	private FormulaGenRepo repo;

	@Autowired
	private ReturnRepo returnRepo;

	@Autowired
	private AutoCalculationFormulaRepo autoCalculationFormulaRepo;

	@Autowired
	private ReturnTemplateRepository returnTemplateRepository;

	@Autowired
	private FormulaConverter formulaConverter;

	@Autowired
	private ErrorCodeDetailRepo errorCodeDetailRepo;

	@Autowired
	private ErrorCodeLabelMappingRepository errorCodeLabelMappingRepository;

	@Autowired
	private ErrorVersionChannelMappingRepository errorVersionChannelMappingRepository;

	@Autowired
	private AutoCalVesrionRepo autoCalVesrionRepo;

	@Autowired
	private ReturnSectionVersionMapRepo returnSectionVersionMapRepo;

	@Autowired
	private UserMasterRepo UserMasterRepo;


	@Transactional(rollbackFor = Exception.class)
	public Boolean saveFormula(FormulaBean formula) throws JsonProcessingException {
		// prepare errorcodes based on list of new formula's added
		//save ErrorCodeDetail, errorCodeLabelMappingRepository, errorVersionChannelMappingRepository
		// convert all formula's into formulaBean
		
		Set<Long> tableIds = null;
		if(StringUtils.equals(formula.getIncludePreviousFormula(),"Y")) {
			tableIds = getSelectedTableIds(formula.getReturnTemplateId());
		}
		Map<String, FormulaBean> formulaBeanMap = formula.getFormulaBeanMap();
		Map<String, ErrorCodeDetail> errorCodeDetailMap = new HashMap<>();
		List<ErrorCodeDetail> errorDetailList = null;
		FormulaGen entity = new FormulaGen();
		List<FormulaBean> formulaBeanList = new ArrayList<>(formula.getFormulaBeanMap().values());
		if(formula.getFormulaId()!=null) {
			entity.setFormulaId(Long.valueOf(formula.getFormulaId()));
		}
		ObjectMapper objectMapper = new ObjectMapper();
		entity.setFormulaJson(objectMapper.writeValueAsString(formula));
		Return returnEn = returnRepo.findByReturnCode(formula.getReturnCode());
		entity.setIsActive(true);
		entity.setReturnIdFk(returnEn);
		if(!StringUtils.equals(formula.getIncludePreviousFormula(),"Y")) {
			entity = repo.save(entity);
			for(String  errorCodeStr : formulaBeanMap.keySet()) {
				prepareErrorDetailObject(formulaBeanMap, errorCodeDetailMap, errorCodeStr);
			}
			errorDetailList = errorCodeDetailRepo.saveAll(new ArrayList<>(errorCodeDetailMap.values()));
			//Save Label Table
			errorDetailList.sort((o1, o2) -> o1.getErrorCodeDetailId().compareTo(o2.getErrorCodeDetailId()));
			for(ErrorCodeDetail errorCodeDetail : errorDetailList) {
				saveErrorCodeDetailObject(formula, errorCodeDetail, 15L);
				saveErrorCodeDetailObject(formula, errorCodeDetail, 26L);
			}
//			formula.setTechnicalErrorCode(errorDetail.getTechnicalErrorCode());
			errorVersionChannelMappingRepository.insertErrorChannnelVesrion(errorDetailList.get(0).getErrorCodeDetailId().intValue(), errorDetailList.get(errorDetailList.size()-1).getErrorCodeDetailId().intValue(), formula.getReturnTemplateId().intValue());
		}
		
		List<FormulaBean> convetedFormulaList = new ArrayList<>();
		for(FormulaBean formulaBean : formulaBeanList) {
			FormulaBean convetedFormula = formulaConverter.convert(formulaBean);
			convetedFormulaList.add(convetedFormula);
		}

		AutoCalculationFormula autoCal = null;
		autoCal = autoCalculationFormulaRepo.findByAutoCalVesrionReturnTemplateFkReturnTemplateId(formula.getReturnTemplateId());
		if(autoCal==null && StringUtils.equals(formula.getIncludePreviousFormula(),"Y")) {
			List<AutoCalculationFormula> autoCalList = autoCalculationFormulaRepo.findByReturnIdFkReturnIdAndIsActiveTrueAndOrderByautoCalFormulaId(returnEn.getReturnId());
			if(autoCalList!=null) {
				autoCal = autoCalList.get(0);
				AutoCalculationFormula formulaBean = new AutoCalculationFormula();
				formulaBean.setCrossElrJson(autoCal.getCrossElrJson());
				formulaBean.setFormulaJson(autoCal.getFormulaJson());
				formulaBean.setIsActive(true);
				formulaBean.setReturnIdFk(autoCal.getReturnIdFk());
				autoCal = formulaBean;
			}
		}
		
		for(FormulaBean convetedFormula : convetedFormulaList) {
			//AutoCAl present case
			ObjectMapper mapper = new ObjectMapper();
			mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
			if(autoCal!=null) {
				TypeReference<Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>>> autoFormulaType = new TypeReference<Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>>>() {
				};
				TypeReference<Map<String,List<CrossFormulaParts>>> crossFormulaType = new TypeReference<Map<String,List<CrossFormulaParts>>>() {
				};
				String eventType = getEventType(formula);
				//if no Normal Json present
				if(StringUtils.isBlank(autoCal.getFormulaJson()) || StringUtils.isEmpty(autoCal.getFormulaJson())) {
					Map<String,Map<String,List<AutoCalFormulaParts>>> onBlurEvnt = new HashMap<>();
					Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>> customCal = new HashMap<>();
					onBlurEvnt.put(eventType, convetedFormula.getNormalFormula());
					customCal.put("customeCalculation", onBlurEvnt);
					autoCal.setFormulaJson(mapper.writeValueAsString(customCal));
				} else {
					Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>> retMap = mapper.readValue(autoCal.getFormulaJson(), autoFormulaType);
					Map<String,Map<String,List<AutoCalFormulaParts>>> onBlurMap = retMap.get("customeCalculation");
					Map<String,List<AutoCalFormulaParts>> innerd = onBlurMap.get(eventType);
					for (Entry<String, List<AutoCalFormulaParts>> item : innerd.entrySet()) {
						ListIterator<AutoCalFormulaParts> list = item.getValue().listIterator();
						while (list.hasNext()) {
							AutoCalFormulaParts autoCalItem = list.next();
							if(tableIds!=null && Boolean.FALSE.equals(validElrFormula(autoCalItem, tableIds))) {
								list.remove();
								continue;
							}
							if ((autoCalItem.getFormulaId() != null && formula.getFormulaId() != null
									&& autoCalItem.getFormulaId().compareTo(formula.getFormulaId()) == 0)
									|| StringUtils.equals(formula.getTechnicalErrorCode(), autoCalItem.getErrorCode())) {
								list.remove();
							}
						}
					}

					convetedFormula.getNormalFormula().entrySet().forEach(item->{
						Map<String,List<AutoCalFormulaParts>> inner = innerd;
						if(inner==null) {
							inner = new HashMap<>();
						}
						//check for the key
						List<AutoCalFormulaParts> existingObject = inner.get(item.getKey());
						// if Present get the list and add the item
						if(existingObject==null) {
							inner.put(item.getKey(), item.getValue());
						}else {
							existingObject.addAll(item.getValue());
						}
					});
					autoCal.setFormulaJson(mapper.writeValueAsString(retMap));
				}
				//if no Cross Json present
				if(StringUtils.isBlank(autoCal.getCrossElrJson()) || StringUtils.isEmpty(autoCal.getFormulaJson())) {
					Map<String,List<CrossFormulaParts>> crossRetMap = new HashMap<>();
					crossRetMap.put("crossELRCalculation", convetedFormula.getCrossElrFormula());
					autoCal.setCrossElrJson(mapper.writeValueAsString(crossRetMap));
				} else {
					Map<String,List<CrossFormulaParts>> crossRetMap = mapper.readValue(autoCal.getCrossElrJson(), crossFormulaType);
					for(Entry<String, List<CrossFormulaParts>> crossItem : crossRetMap.entrySet()) {
						ListIterator<CrossFormulaParts> listItereator = crossItem.getValue().listIterator();
						while(listItereator.hasNext()) {
							CrossFormulaParts formulaCross = listItereator.next();
							if(tableIds!=null && Boolean.FALSE.equals(validElrFormula(formulaCross, tableIds))) {
								listItereator.remove();
								continue;
							}
							if((formulaCross.getFormulaId()!=null && formula.getFormulaId()!=null &&formulaCross.getFormulaId().compareTo(formula.getFormulaId())==0)||StringUtils.equals(formulaCross.getErrorCode(),formula.getTechnicalErrorCode()))
							{
								listItereator.remove();
							}
						}
					}

					List<CrossFormulaParts> crossitems = crossRetMap.get("crossELRCalculation");
					crossitems.addAll(convetedFormula.getCrossElrFormula());
					autoCal.setCrossElrJson(mapper.writeValueAsString(crossRetMap));
				}
			} else {
				//Add new entry in auto cal
				autoCal = new AutoCalculationFormula();
				autoCal.setReturnIdFk(returnEn);
				autoCal.setIsActive(true);
				Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>> retMap = new HashMap<>();
				Map<String,Map<String,List<AutoCalFormulaParts>>> onBlurEvnt = new HashMap<>();
				onBlurEvnt.put("onblurEvent", convetedFormula.getNormalFormula());
				retMap.put("customeCalculation", onBlurEvnt);
				Map<String,List<CrossFormulaParts>> crossRetMap = new HashMap<>();
				crossRetMap.put("crossELRCalculation", convetedFormula.getCrossElrFormula());
				autoCal.setFormulaJson(mapper.writeValueAsString(retMap));
				autoCal.setCrossElrJson(mapper.writeValueAsString(crossRetMap));
			}
		}
		//todo return template Id should be dynamic
		autoCalculationFormulaRepo.save(autoCal);
		saveAutoCalVesrion(autoCal,formula);
		return true;

	}

	/**
	 * @param formula
	 * @param errorCodeDetail
	 * @return
	 */
	private void saveErrorCodeDetailObject(FormulaBean formula, ErrorCodeDetail errorCodeDetail, Long langId) {
		LanguageMaster lang = new LanguageMaster();
		lang.setLanguageId(langId);
		ErrorCodeLabelMapping enEntity = new ErrorCodeLabelMapping();
		enEntity.setErrorCodeDetailIdFk(errorCodeDetail);
		enEntity.setErrorKeyLabelForFileBased(errorCodeDetail.getErrorDescription());
		enEntity.setErrorKeyLabelForWebBased(errorCodeDetail.getErrorDescription());
		UserMaster master = new UserMaster();
		master.setUserId(formula.getUserId().longValue());
		enEntity.setCreatedBy(master);
		enEntity.setModifiedBy(master);
		enEntity.setModifiedOn(new Date());
		enEntity.setCreatedOn(new Date());
		enEntity.setLanguageIdFk(lang);
		enEntity.setLastUpdatedOn(new Date());
		ErrorCodeLabelMapping ex = errorCodeLabelMappingRepository.findByErrorCodeDetailIdFkErrorCodeDetailIdAndLanguageIdFkLanguageId(errorCodeDetail.getErrorCodeDetailId(),Long.valueOf("15"));
		if(ex!=null) {
			enEntity.setErrorCodeLabelMappingId(ex.getErrorCodeLabelMappingId());
		}
		errorCodeLabelMappingRepository.save(enEntity);
//		return master;
	}

	/**
	 * @param formulaBeanMap
	 * @param errorCodeDetailMap
	 * @param errorCodeStr
	 */
	private void prepareErrorDetailObject(Map<String, FormulaBean> formulaBeanMap,
			Map<String, ErrorCodeDetail> errorCodeDetailMap, String errorCodeStr) {
		FormulaBean formulaBeanObj = formulaBeanMap.get(errorCodeStr);
		String errorInitials = "E"+formulaBeanObj.getReturnCode();
		ErrorCodeDetail errorDetail = new ErrorCodeDetail();
		if(!StringUtils.isBlank(formulaBeanObj.getTechnicalErrorCode())) {
			errorInitials = formulaBeanObj.getTechnicalErrorCode();
			ErrorCodeDetail detail = errorCodeDetailRepo.findMaxErrorCodeDetail(errorInitials);
			if(detail==null) {
				errorDetail.setTechnicalErrorCode(getReturnErrorcode(formulaBeanObj.getReturnCode()));
			} else {
				errorDetail.setErrorCodeDetailId(detail.getErrorCodeDetailId());
				errorDetail.setTechnicalErrorCode(formulaBeanObj.getTechnicalErrorCode());
			}
		} else {
			errorDetail.setTechnicalErrorCode(getReturnErrorcode(formulaBeanObj.getReturnCode()));
		}
		errorDetail.setBusinessErrorCode(formulaBeanObj.getErrorCode());
		errorDetail.setErrorDescription(formulaBeanObj.getErrorMessage());
		errorDetail.setRoundOff(2);
		FormulaCategoryType formulaCategoryType = new FormulaCategoryType();
		formulaCategoryType.setFormulaCategoryTypeId(Long.valueOf(1));
		errorDetail.setFormulaCategoryTypeIdFk(formulaCategoryType);
		errorDetail.setNumericFormula("1");
		formulaBeanObj.setErrorCodeDetail(errorDetail);
		errorCodeDetailMap.put(errorCodeStr, errorDetail);
	}

	private void saveAutoCalVesrion(AutoCalculationFormula autoCal, FormulaBean formula) {
		AutoCalVesrion autoCalVersion = new AutoCalVesrion();
		List<AutoCalVesrion> existing =  autoCalVesrionRepo.findByReturnTemplateFkReturnTemplateId(formula.getReturnTemplateId());
		if(existing!=null && !existing.isEmpty()) {
			autoCalVersion = existing.get(0);
		}
		Optional<UserMaster> user = UserMasterRepo.findById(formula.getUserId().longValue());
		autoCalVersion.setAutoFormula(autoCal);
		Optional<ReturnTemplate> template = returnTemplateRepository.findById(formula.getReturnTemplateId());
		if(template.isPresent()) {
			autoCalVersion.setReturnTemplateFk(template.get());
		}
		if(user.isPresent()) {
			autoCalVersion.setCreatedByFk(user.get());
			autoCalVersion.setModifiedByFk(user.get());
		}
		autoCalVersion.setIsActive(true);
		Date date = new Date();
		autoCalVersion.setUpdatedOn(date);
		autoCalVersion.setCreatedOn(date);
		autoCalVesrionRepo.save(autoCalVersion);
		autoCal.setAutoCalVesrion(autoCalVersion);
	}

	public FormulaBean prepareEditFormula(FormulaBean formula) throws JsonProcessingException {
		if(StringUtils.equals(formula.getIncludePreviousFormula(),"Y")) {
//			saveFormula(formula);
		}
		FormulaGen entity = new FormulaGen();
		StringBuilder table = new StringBuilder();
		Map<String,Object> formulaJsonMap = new HashMap<>();
		table.append("<div id=\"errorTable\"><table class=\"table\" id=\"erroTableId\">").append("<thead><th>Error Code</th>").append("<th>Edit</th>").append("<th>Delete</th></thead>");
		Set<String> errorCode = new HashSet<>();
		if(formula.getFormulaId()!=null) {
			entity.setFormulaId(Long.valueOf(formula.getFormulaId()));
		}
		ObjectMapper objectMapper = new ObjectMapper();
		entity.setFormulaJson(objectMapper.writeValueAsString(formula));
		Return returnEn = returnRepo.findByReturnCode(formula.getReturnCode());
		formula.setReturnId(String.valueOf(returnEn.getReturnId()));
		List<AutoCalculationFormula> autoCalList = autoCalculationFormulaRepo.findByReturnIdFkReturnIdAndIsActiveTrueAndOrderByautoCalFormulaId(returnEn.getReturnId());
		AutoCalculationFormula autoCal = autoCalList.get(0);
		Map<String,ErrorCodeDetail> errorCodeMap =  getErrorcodeMap(returnEn.getReturnCode());
		//AutoCAl present case
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
		if(autoCal!=null) {
			TypeReference<Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>>> autoFormulaType = new TypeReference<Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>>>() {
			};
			TypeReference<Map<String,List<CrossFormulaParts>>> crossFormulaType = new TypeReference<Map<String,List<CrossFormulaParts>>>() {
			};
			//if no Normal Json present
			if(!StringUtils.isBlank(autoCal.getFormulaJson()) && !StringUtils.isEmpty(autoCal.getFormulaJson())) {
				Map<String, Map<String, Map<String, List<AutoCalFormulaParts>>>> retMap = mapper.readValue(autoCal.getFormulaJson(), autoFormulaType);
				Map<String, Map<String, List<AutoCalFormulaParts>>> inner = retMap.get("customeCalculation");
				if(!CollectionUtils.isEmpty(inner)) {
					Map<String, List<AutoCalFormulaParts>> innerd = inner.get("onblurEvent");
					if(!CollectionUtils.isEmpty(innerd) || innerd!=null) {
						Set<Entry<String, List<AutoCalFormulaParts>>> entry = innerd.entrySet();
						Iterator<Entry<String, List<AutoCalFormulaParts>>> entryIterator = entry.iterator();
						while(entryIterator.hasNext()) {
							Entry<String, List<AutoCalFormulaParts>> llt = entryIterator.next();
							List<AutoCalFormulaParts> list = llt.getValue();
							for(AutoCalFormulaParts pparts: list) {
								if(!StringUtils.isBlank(pparts.getErrorCode())&&errorCode.add(pparts.getErrorCode())) {
									String error = errorCodeMap.get(pparts.getErrorCode())==null?pparts.getErrorCode():errorCodeMap.get(pparts.getErrorCode()).getBusinessErrorCode();
									formulaJsonMap.put(pparts.getErrorCode(), pparts);
									table.append("<tr>").append("<td>")
									.append(error).append("</td>").append("<td>").append("<a onClick=\"editFormula('"+pparts.getErrorCode()+"')\"><i class=\"fa fa-pencil-square\"></i></a>").append("</td>")
									.append("<td>").append("<a onClick=\"deleteFormula('"+pparts.getErrorCode()+"')\"><i class=\"fa fa-trash-o\"></i></a>").append("</td>")
									.append("</tr>");
		
								}
							}
						}
					}
					Map<String, List<AutoCalFormulaParts>> innerdd = inner.get("onchangeEvent");
					if(!CollectionUtils.isEmpty(innerdd) || innerdd!=null) {
						Set<Entry<String, List<AutoCalFormulaParts>>> entryy =innerdd.entrySet();
						Iterator<Entry<String, List<AutoCalFormulaParts>>> entryIteratorr = entryy.iterator();
						while(entryIteratorr.hasNext()) {
							Entry<String, List<AutoCalFormulaParts>> llt = entryIteratorr.next();
							List<AutoCalFormulaParts> list = llt.getValue();
							for(AutoCalFormulaParts pparts: list) {
								if(!StringUtils.isBlank(pparts.getErrorCode())&&errorCode.add(pparts.getErrorCode())) {
									String error = errorCodeMap.get(pparts.getErrorCode())==null?pparts.getErrorCode():errorCodeMap.get(pparts.getErrorCode()).getBusinessErrorCode();
									formulaJsonMap.put(pparts.getErrorCode(), pparts);
									table.append("<tr>").append("<td>")
									.append(error).append("</td>").append("<td>").append("<a onClick=\"editFormula('"+pparts.getErrorCode()+"')\"><i class=\"fa fa-pencil-square\"></i></a>").append("</td>")
									.append("<td>").append("<a onClick=\"deleteFormula('"+pparts.getErrorCode()+"')\"><i class=\"fa fa-trash-o\"></i></a>").append("</td>")
									.append("</tr>");
	
								}
							}
	
						}
	
					}
				}
			}
			//if no Cross Json present
			if(!StringUtils.isBlank(autoCal.getCrossElrJson())) {
				Map<String,List<CrossFormulaParts>> crossRetMap = mapper.readValue(autoCal.getCrossElrJson(), crossFormulaType);
				List<CrossFormulaParts> crossitems = crossRetMap.get("crossELRCalculation");

				for(CrossFormulaParts pparts: crossitems) {
					if(errorCode.add(pparts.getErrorCode())) {
						formulaJsonMap.put(pparts.getErrorCode(), pparts);
						table.append("<tr>").append("<td>")
						.append(errorCodeMap.get(pparts.getErrorCode()).getBusinessErrorCode()).append("</td>").append("<td>").append("<a onClick=\"editFormula('"+pparts.getErrorCode()+"')\"><i class=\"fa fa-pencil-square\"></i></a>").append("</td>")
						.append("<td>").append("<a onClick=\"deleteFormula('"+pparts.getErrorCode()+"')\"><i class=\"fa fa-trash-o\"></i></a>").append("</td>")
						.append("</tr>");

					}
				}
			}

		}
		table.append("</table></div>");	
		formula.setTable(table.toString());
		formula.setFormulaJsonMap(formulaJsonMap);
		return formula;

	}

	private String getReturnErrorcode(String returnCode) {
		String errorInitials = "E"+returnCode;
		ErrorCodeDetail detail = errorCodeDetailRepo.findMaxErrorCodeDetail(errorInitials);

		if(detail==null) {
			return errorInitials+"00001";
		}else {
			String numberPart = detail.getTechnicalErrorCode().substring(errorInitials.length()+1, detail.getTechnicalErrorCode().length());
			Integer numberValue = Integer.valueOf(numberPart);
			numberValue++;
			return errorInitials+"T"+numberValue;
		}

	}

	private Map<String,ErrorCodeDetail> getErrorcodeMap(String returnCode) {
		String errorInitials = "E"+returnCode;
		List<ErrorCodeDetail> detail = errorCodeDetailRepo.findErrorCodeDetail(errorInitials);
		Map<String,ErrorCodeDetail>  result = new HashMap<>();
		for(ErrorCodeDetail item : detail ) {
			result.put(item.getTechnicalErrorCode(), item);
		}

		return result;

	}

	private String getEventType(FormulaBean formulaBean) {
		String eventType = "onblurEvent";
		if(StringUtils.isBlank(formulaBean.getEventType())) {
			return eventType;
		}

		switch(formulaBean.getEventType()) {
		case "1":
			eventType = "onblurEvent";
			break;

		case "2":
			eventType = "onchangeEvent";
			break;

		default:
			eventType = "onblurEvent";
		}
		return eventType;

	}


	@Transactional(rollbackFor = Exception.class)
	public Boolean deleteFormula(FormulaBean formula) throws JsonProcessingException {

		FormulaGen entity = new FormulaGen();
		if(formula.getFormulaId()!=null) {
			entity.setFormulaId(Long.valueOf(formula.getFormulaId()));
		}
		ObjectMapper objectMapper = new ObjectMapper();
		entity.setFormulaJson(objectMapper.writeValueAsString(formula));
		Return returnEn = returnRepo.findByReturnCode(formula.getReturnCode());
		entity.setIsActive(false);
		entity.setReturnIdFk(returnEn);
		entity = repo.save(entity);
		formula.setFormulaId(entity.getFormulaId().intValue());
		AutoCalculationFormula autoCal = null;
		autoCal = autoCalculationFormulaRepo.findByAutoCalVesrionReturnTemplateFkReturnTemplateId(formula.getReturnTemplateId());
		if(autoCal==null) {
			List<AutoCalculationFormula> autoCalList = autoCalculationFormulaRepo.findByReturnIdFkReturnIdAndIsActiveTrueAndOrderByautoCalFormulaId(returnEn.getReturnId());
			if(autoCalList!=null) {
				autoCal = autoCalList.get(0);
			}
		}
		//AutoCAl present case
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
		if(autoCal!=null) {
			TypeReference<Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>>> autoFormulaType = new TypeReference<Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>>>() {
			};
			TypeReference<Map<String,List<CrossFormulaParts>>> crossFormulaType = new TypeReference<Map<String,List<CrossFormulaParts>>>() {
			};
			//if no Normal Json present
			if(!StringUtils.isBlank(autoCal.getFormulaJson())) {
				Map<String,Map<String,Map<String,List<AutoCalFormulaParts>>>> retMap = mapper.readValue(autoCal.getFormulaJson(), autoFormulaType);
				Map<String,Map<String,List<AutoCalFormulaParts>>> onBlurMap = retMap.get("customeCalculation");
				Map<String,List<AutoCalFormulaParts>> innerd = onBlurMap.get("onblurEvent");
				if(innerd!=null) {
					for (Entry<String, List<AutoCalFormulaParts>> item : innerd.entrySet()) {
						ListIterator<AutoCalFormulaParts> list = item.getValue().listIterator();
						while (list.hasNext()) {
							AutoCalFormulaParts autoCalItem = list.next();
							if ((autoCalItem.getFormulaId() != null && formula.getFormulaId() != null
									&& autoCalItem.getFormulaId().compareTo(formula.getFormulaId()) == 0)
									|| StringUtils.equals(formula.getTechnicalErrorCode(), autoCalItem.getErrorCode())) {
								list.remove();
							}
						}

					}
				}
				Map<String,List<AutoCalFormulaParts>> innerdd = onBlurMap.get("onchangeEvent");
				if(innerdd!=null) {
					for (Entry<String, List<AutoCalFormulaParts>> item : innerdd.entrySet()) {
						ListIterator<AutoCalFormulaParts> list = item.getValue().listIterator();
						while (list.hasNext()) {
							AutoCalFormulaParts autoCalItem = list.next();
							if ((autoCalItem.getFormulaId() != null && formula.getFormulaId() != null
									&& autoCalItem.getFormulaId().compareTo(formula.getFormulaId()) == 0)
									|| StringUtils.equals(formula.getTechnicalErrorCode(), autoCalItem.getErrorCode())) {
								list.remove();
							}
						}

					}
				}


				autoCal.setFormulaJson(mapper.writeValueAsString(retMap));
			}
			//if no Cross Json present
			if(!StringUtils.isBlank(autoCal.getCrossElrJson())) {

				Map<String,List<CrossFormulaParts>> crossRetMap = mapper.readValue(autoCal.getCrossElrJson(), crossFormulaType);
				for(Entry<String, List<CrossFormulaParts>> crossItem : crossRetMap.entrySet()) {
					ListIterator<CrossFormulaParts> listItereator = crossItem.getValue().listIterator();
					while(listItereator.hasNext()) {
						CrossFormulaParts formulaCross = listItereator.next();
						if((formulaCross.getFormulaId()!=null && formula.getFormulaId()!=null &&formulaCross.getFormulaId().compareTo(formula.getFormulaId())==0)||StringUtils.equals(formulaCross.getErrorCode(),formula.getTechnicalErrorCode()))
						{
							listItereator.remove();
						}
					}
				}

				autoCal.setCrossElrJson(mapper.writeValueAsString(crossRetMap));
			}

		}

		autoCalculationFormulaRepo.save(autoCal);
		return true;

	}

	private Set<Long> getSelectedTableIds(Long templateId){
		Set<Long> unique = new HashSet<>();
		List<ReturnSectionVersionMap> autoCalList = returnSectionVersionMapRepo.findByReturnTemplate(templateId);
		for(ReturnSectionVersionMap item: autoCalList) {
			unique.add(item.getReturnSecIdFk().getReturnSectionMapId());
		}
		return unique;

	}


	private Boolean validElrFormula(CrossFormulaParts formula,Set<Long> hearset) {
		Boolean result = true;
		if(StringUtils.equals(formula.getFormulaCell(),"NA")) {
			String[] lhs = formula.getLhs().split(" ");
			for(String lhsItem : lhs) {
				String[] lshFraction = lhsItem.split("-");
				if(lshFraction.length>1 && !hearset.contains(Long.valueOf(lshFraction[1]))) {
					result = false;
					break;
				}
			}
			if(Boolean.TRUE.equals(result)) {

				String[] rhs = formula.getRhs().split(" ");
				for(String rhsItem : rhs) {
					String[] rshFraction = rhsItem.split("-");
					if(rshFraction.length>1 && !hearset.contains(Long.valueOf(rshFraction[1]))) {
						result = false;
						break;
					}
				}
			}
		}else {
			String[] lhs = formula.getFormulaCell().split(" ");
			for(String lhsItem : lhs) {
				String[] lshFraction = lhsItem.split("-");
				if(lshFraction.length>1 && !hearset.contains(Long.valueOf(lshFraction[1]))) {
					result = false;
					break;
				}
			}
			if(Boolean.TRUE.equals(result)) {

				String[] rhs = formula.getFormula().split(" ");
				for(String rhsItem : rhs) {
					String[] rshFraction = rhsItem.split("-");
					if(rshFraction.length>1 && !hearset.contains(Long.valueOf(rshFraction[1]))) {
						result = false;
						break;
					}
				}
			}
		}
		return result;

	}

	private Boolean validElrFormula(AutoCalFormulaParts formula,Set<Long> hearset) {
		Boolean result = true;
		if(StringUtils.equals(formula.getFormulaCell(),"NA")) {
			String[] lhs = formula.getLhs().split(" ");
			for(String lhsItem : lhs) {
				String[] lshFraction = lhsItem.split("-");
				if(lshFraction.length>1 && !hearset.contains(Long.valueOf(lshFraction[1]))) {
					result = false;
					break;
				}
			}
			if(Boolean.TRUE.equals(result)) {

				String[] rhs = formula.getRhs().split(" ");
				for(String rhsItem : rhs) {
					String[] rshFraction = rhsItem.split("-");
					if(rshFraction.length>1 && !hearset.contains(Long.valueOf(rshFraction[1]))) {
						result = false;
						break;
					}
				}
			}
		}else {
			String[] lhs = formula.getFormulaCell().split(" ");
			for(String lhsItem : lhs) {
				String[] lshFraction = lhsItem.split("-");
				if(lshFraction.length>1 && !hearset.contains(Long.valueOf(lshFraction[1]))) {
					result = false;
					break;
				}
			}
			if(Boolean.TRUE.equals(result)) {

				String[] rhs = formula.getFormula().split(" ");
				for(String rhsItem : rhs) {
					String[] rshFraction = rhsItem.split("-");
					if(rshFraction.length>1 && !hearset.contains(Long.valueOf(rshFraction[1]))) {
						result = false;
						break;
					}
				}
			}
		}
		return result;
	}

	public FormulaBean prepareFormulaTableRow(FormulaBean formula) throws JsonProcessingException {
//		formula.getErrorMessage();
//		FormulaGen entity = new FormulaGen();
		StringBuilder table = new StringBuilder();
//		Map<String,Object> formulaJsonMap = new HashMap<>();
//		Set<String> errorCode = new HashSet<>();
//		if(formula.getFormulaId()!=null) {
//			entity.setFormulaId(Long.valueOf(formula.getFormulaId()));
//		}
		
		if(!StringUtils.isBlank(formula.getFormula())) {
//			String[] formulaArray = formula.getFormula().split(",");
			String error = formula.getErrorCode();
			table.append("<tr>").append("<td>")
			.append(error).append("</td>").append("<td>").append("<a onClick=\"editNewFormula('"+formula.getFormula()+"','"+formula.getErrorCode()+"','"+formula.getErrorMessage()+"','"+formula.getErrorType()+"','"+formula.getEventType()+"')\"><i class=\"fa fa-pencil-square\"></i></a>").append("</td>")
			.append("<td>").append("<a onClick=\"deleteFormula('"+formula.getFormula()+"','"+formula.getErrorCode()+"','"+formula.getErrorMessage()+"','"+formula.getErrorType()+"','"+formula.getEventType()+"')\"><i class=\"fa fa-trash-o\"></i></a>").append("</td>")
			.append("</tr>");
		}
		
		
//		if(!CollectionUtils.isEmpty(formula.getNormalFormula())) {
//			Map<String, List<AutoCalFormulaParts>> innerd = formula.getNormalFormula();
//			Set<Entry<String, List<AutoCalFormulaParts>>> entry =innerd.entrySet();
//			Iterator<Entry<String, List<AutoCalFormulaParts>>> entryIterator = entry.iterator();
//			while(entryIterator.hasNext()) {
//				Entry<String, List<AutoCalFormulaParts>> llt = entryIterator.next();
//				List<AutoCalFormulaParts> list = llt.getValue();
//				for(AutoCalFormulaParts pparts: list) {
//					if(!StringUtils.isBlank(pparts.getErrorCode())&&errorCode.add(pparts.getErrorCode())) {
//						String error = formula.getErrorCodeDetail()==null?pparts.getErrorCode():formula.getErrorCodeDetail().getBusinessErrorCode();
//						formulaJsonMap.put(pparts.getErrorCode(), pparts);
//						table.append("<tr>").append("<td>")
//						.append(error).append("</td>").append("<td>").append("<a onClick=\"editNewFormula('"+formula.getTechnicalErrorCode()+"')\"><i class=\"fa fa-pencil-square\"></i></a>").append("</td>")
//						.append("<td>").append("<a onClick=\"deleteFormula('"+formula.getTechnicalErrorCode()+"')\"><i class=\"fa fa-trash-o\"></i></a>").append("</td>")
//						.append("</tr>");
//					}
//				}
//			}
//		}
//		//if no Cross Json present
//		if(!CollectionUtils.isEmpty(formula.getCrossElrFormula())) {
//			List<CrossFormulaParts> crossitems = formula.getCrossElrFormula();
//			for(CrossFormulaParts pparts: crossitems) {
//				if(errorCode.add(pparts.getErrorCode())) {
//					formulaJsonMap.put(pparts.getErrorCode(), pparts);
//					table.append("<tr>").append("<td>")
//					.append(formula.getErrorCodeDetail().getBusinessErrorCode()).append("</td>").append("<td>").append("<a onClick=\"editNewFormula('"+formula.getTechnicalErrorCode()+"')\"><i class=\"fa fa-pencil-square\"></i></a>").append("</td>")
//					.append("<td>").append("<a onClick=\"deleteFormula('"+formula.getTechnicalErrorCode()+"')\"><i class=\"fa fa-trash-o\"></i></a>").append("</td>")
//					.append("</tr>");
//				}
//			}
//		}
		formula.setTable(table.toString());
//		formula.setFormulaJsonMap(formulaJsonMap);
//		System.out.println(mapper.writeValueAsString(formulaJsonMap));
		return formula;

	}
	
	
	public List<AutoCalculationFormula> getAutoCalculationFormulaList(Long returnId) {
		// TODO Auto-generated method stub
		return autoCalculationFormulaRepo.findByReturnIdFkReturnIdAndIsActiveTrue(returnId);
	}

}
