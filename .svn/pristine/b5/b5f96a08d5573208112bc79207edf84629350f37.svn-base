/**
 * 
 */
package com.iris.sdmx.exceltohtml.controller;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.iris.caching.ObjectCache;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.exception.ApplicationException;
import com.iris.sdmx.exceltohtml.bean.DimensionCodeListValueBean;
import com.iris.sdmx.exceltohtml.bean.DimensionDetailCategories;
import com.iris.sdmx.exceltohtml.bean.ModelCodeInputBean;
import com.iris.sdmx.exceltohtml.bean.SdmxDimensionDetail;
import com.iris.sdmx.exceltohtml.bean.SdmxModelCodesBean;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnModelInfoBean;
import com.iris.sdmx.exceltohtml.helper.SdmxModelCodesHelper;
import com.iris.sdmx.exceltohtml.service.SdmxModelCodesService;
import com.iris.sdmx.exceltohtml.service.SdmxReturnModelInfoService;
import com.iris.sdmx.exceltohtml.service.SdmxReturnSheetInfoService;
import com.iris.sdmx.exceltohtml.validator.SdmxModelCodeValidator;
import com.iris.sdmx.util.SDMXConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;

/**
 * @author apagaria
 *
 */
@RestController
@RequestMapping("/service/sdmx/modelCode")
public class SdmxModelCodesController {

	private static final Logger LOGGER = LogManager.getLogger(SdmxModelCodesController.class);

	@Autowired
	private SdmxModelCodeValidator sdmxModelCodeValidator;

	@Autowired
	private SdmxModelCodesService sdmxModelCodesService;

	@Autowired
	private SdmxModelCodesHelper sdmxModelCodesHelper;

	@Autowired
	private SdmxReturnSheetInfoService sdmxReturnSheetInfoService;

	@Autowired
	private SdmxReturnModelInfoService sdmxReturnModelInfoService;

	/**
	 * @param jobProcessId
	 * @param userId
	 * @param returnCellRef
	 * @param returnTemplateId
	 * @return
	 */
	@GetMapping("/user/{userId}/returnCell/{returnCellRef}/returnTemplate/{returnTemplateId}")
	public ServiceResponse fetchEntityByReturnCellNReturnTemplate(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("returnCellRef") Integer returnCellRef,
			@PathVariable("returnTemplateId") Long returnTemplateId) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxModelCodeValidator.validatefetchEntityByReturnCellNReturnTemplate(userId, jobProcessId, returnCellRef,
					returnTemplateId);
			SdmxModelCodesBean sdmxModelCodesBean = sdmxModelCodesService
					.findByReturnCellReffNReturnTemplate(returnCellRef, returnTemplateId);
			if (sdmxModelCodesBean != null) {
				DimensionDetailCategories dimensionDetailCategories = new Gson()
						.fromJson(sdmxModelCodesBean.getModelDim(), DimensionDetailCategories.class);
				List<SdmxDimensionDetail> sdmxDimensionDetailList = new ArrayList<>();
				// Close Dimension
				if (!CollectionUtils.isEmpty(dimensionDetailCategories.getClosedDim())) {
					List<DimensionCodeListValueBean> closedDim = dimensionDetailCategories.getClosedDim();
					for (DimensionCodeListValueBean dimensionCodeListValueBean : closedDim) {
						SdmxDimensionDetail sdmxDimensionDetail = new SdmxDimensionDetail();
						sdmxDimensionDetail.setDimensionCode(dimensionCodeListValueBean.getDimConceptId());
						sdmxDimensionDetail.setSelectedCodeListValue(dimensionCodeListValueBean.getClValueCode());
						sdmxDimensionDetailList.add(sdmxDimensionDetail);
					}
				}
				// Open Dimension
				if (!CollectionUtils.isEmpty(dimensionDetailCategories.getOpenDimension())) {
					List<DimensionCodeListValueBean> openDim = dimensionDetailCategories.getOpenDimension();
					for (DimensionCodeListValueBean dimensionCodeListValueBean : openDim) {
						SdmxDimensionDetail sdmxDimensionDetail = new SdmxDimensionDetail();
						sdmxDimensionDetail.setDimensionCode(dimensionCodeListValueBean.getDimConceptId());
						sdmxDimensionDetail.setSelectedCodeListValue(dimensionCodeListValueBean.getClValueCode());
						sdmxDimensionDetailList.add(sdmxDimensionDetail);
					}
				}

				// Common Dimension
				if (!CollectionUtils.isEmpty(dimensionDetailCategories.getCommonDimension())) {
					List<DimensionCodeListValueBean> commonDim = dimensionDetailCategories.getCommonDimension();
					for (DimensionCodeListValueBean dimensionCodeListValueBean : commonDim) {
						SdmxDimensionDetail sdmxDimensionDetail = new SdmxDimensionDetail();
						sdmxDimensionDetail.setDimensionCode(dimensionCodeListValueBean.getDimConceptId());
						sdmxDimensionDetail.setSelectedCodeListValue(dimensionCodeListValueBean.getClValueCode());
						sdmxDimensionDetailList.add(sdmxDimensionDetail);
					}
				}
				sdmxModelCodesBean.setModelDim(new Gson().toJson(sdmxDimensionDetailList));
				serviceResponseBuilder.setResponse(new Gson().toJson(sdmxModelCodesBean));
				serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
				serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
			} else {
				serviceResponseBuilder.setStatus(false);
				serviceResponseBuilder.setStatusCode(ErrorCode.EC0013.toString());
				serviceResponseBuilder.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
			}
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	@GetMapping("/user/{userId}/dmModelCode/{dmModelCode}")
	public ServiceResponse fetchEntityByDmCode(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("dmModelCode") String dmModelCode) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxModelCodeValidator.validatefetchEntityByDmModelCode(userId, jobProcessId, dmModelCode);
			SdmxModelCodesBean sdmxModelCodesBean = sdmxModelCodesService.findEntityByDmModelCodes(dmModelCode);
			if (sdmxModelCodesBean != null) {
				DimensionDetailCategories dimensionDetailCategories = new Gson()
						.fromJson(sdmxModelCodesBean.getModelDim(), DimensionDetailCategories.class);
				List<SdmxDimensionDetail> sdmxDimensionDetailList = new ArrayList<>();
				// Close Dimension
				if (!CollectionUtils.isEmpty(dimensionDetailCategories.getClosedDim())) {
					List<DimensionCodeListValueBean> closedDim = dimensionDetailCategories.getClosedDim();
					for (DimensionCodeListValueBean dimensionCodeListValueBean : closedDim) {
						SdmxDimensionDetail sdmxDimensionDetail = new SdmxDimensionDetail();
						sdmxDimensionDetail.setDimensionCode(dimensionCodeListValueBean.getDimConceptId());
						sdmxDimensionDetail.setSelectedCodeListValue(dimensionCodeListValueBean.getClValueCode());
						sdmxDimensionDetailList.add(sdmxDimensionDetail);
					}
				}
				// Open Dimension
				if (!CollectionUtils.isEmpty(dimensionDetailCategories.getOpenDimension())) {
					List<DimensionCodeListValueBean> openDim = dimensionDetailCategories.getOpenDimension();
					for (DimensionCodeListValueBean dimensionCodeListValueBean : openDim) {
						SdmxDimensionDetail sdmxDimensionDetail = new SdmxDimensionDetail();
						sdmxDimensionDetail.setDimensionCode(dimensionCodeListValueBean.getDimConceptId());
						sdmxDimensionDetail.setSelectedCodeListValue(dimensionCodeListValueBean.getClValueCode());
						sdmxDimensionDetailList.add(sdmxDimensionDetail);
					}
				}

				// Common Dimension
				if (!CollectionUtils.isEmpty(dimensionDetailCategories.getCommonDimension())) {
					List<DimensionCodeListValueBean> commonDim = dimensionDetailCategories.getCommonDimension();
					for (DimensionCodeListValueBean dimensionCodeListValueBean : commonDim) {
						SdmxDimensionDetail sdmxDimensionDetail = new SdmxDimensionDetail();
						sdmxDimensionDetail.setDimensionCode(dimensionCodeListValueBean.getDimConceptId());
						sdmxDimensionDetail.setSelectedCodeListValue(dimensionCodeListValueBean.getClValueCode());
						sdmxDimensionDetailList.add(sdmxDimensionDetail);
					}
				}
				sdmxModelCodesBean.setModelDim(new Gson().toJson(sdmxDimensionDetailList));
				serviceResponseBuilder.setResponse(new Gson().toJson(sdmxModelCodesBean));
				serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
				serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
			} else {
				serviceResponseBuilder.setStatus(false);
				serviceResponseBuilder.setStatusCode(ErrorCode.EC0013.toString());
				serviceResponseBuilder.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
			}
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	/**
	 * @param jobProcessId
	 * @param userId
	 * @param dmModelCode
	 * @return
	 */
	@GetMapping("/user/{userId}/fetchdmcodes/{dmCode}")
	public ServiceResponse fetchEntityByReturnCellNReturnTemplate(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("dmCode") String dmModelCode) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxModelCodeValidator.validateFetchDmCodeRequest(userId, jobProcessId, dmModelCode);
			List<String> dmCodeList = sdmxModelCodesService.findDmModelCodes(dmModelCode);
			serviceResponseBuilder.setResponse(dmCodeList);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	@GetMapping("/user/{userId}/modelCode/{modelCode}")
	public ServiceResponse fetchEntityByModelCode(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("modelCode") String modelCode) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxModelCodeValidator.validatefetchEntityByModelCode(userId, jobProcessId, modelCode);
			SdmxModelCodesBean sdmxModelCodesBean = sdmxModelCodesService.getBeanByModelCode(modelCode);
			serviceResponseBuilder.setResponse(sdmxModelCodesBean);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	@DeleteMapping("/user/{userId}/returnCell/{returnCellRef}/returnTemplate/{returnTemplateId}")
	public ServiceResponse deleteEntityByModelCode(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("returnCellRef") Integer returnCellRef,
			@PathVariable("returnTemplateId") Long returnTemplateId) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxModelCodeValidator.validatefetchEntityByReturnCellRef(userId, jobProcessId, returnCellRef);
			SdmxModelCodesBean sdmxModelCodesBean2 = null;
			if (returnCellRef != null) {
				sdmxModelCodesBean2 = sdmxModelCodesService.findByReturnCellReffNReturnTemplate(returnCellRef,
						returnTemplateId);
				sdmxModelCodesService.deleteDataByBean(sdmxModelCodesBean2, userId);
				SdmxReturnModelInfoBean sdmxReturnModelInfoBean2 = sdmxReturnModelInfoService
						.getBeanByModelCode(sdmxModelCodesBean2.getModelCodesId());
				sdmxReturnModelInfoService.deleteEntityByBean(sdmxReturnModelInfoBean2.getReturnSheetInfoId());
			}
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	@PostMapping("/user/{userId}/modelCode")
	public ServiceResponse saveEntity(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @RequestBody ModelCodeInputBean modelCodeInputBean) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxModelCodeValidator.validateSaveEntityRequest(userId, jobProcessId, modelCodeInputBean);
			SdmxModelCodesBean sdmxModelCodesBean = new SdmxModelCodesBean();
			sdmxModelCodesHelper.fetchBeanFromRequest(modelCodeInputBean, userId, sdmxModelCodesBean);
			SdmxModelCodesBean sdmxModelCodesBean2 = null;
			Boolean isModelCodeExist = false;
			if (!StringUtils.isEmpty(modelCodeInputBean.getModelCode())) {
				sdmxModelCodesBean2 = sdmxModelCodesService.findEntityByDmModelCodes(modelCodeInputBean.getModelCode());
				if (sdmxModelCodesBean2 != null) {
					sdmxModelCodesService.deleteDataByBean(sdmxModelCodesBean2, userId);
					isModelCodeExist = true;
				}
			}
			Long modelId = sdmxModelCodesService.saveEntityByBean(sdmxModelCodesBean, userId);
			if (isModelCodeExist) {
				SdmxReturnModelInfoBean sdmxReturnModelInfoBean2 = sdmxReturnModelInfoService
						.getBeanByModelCode(sdmxModelCodesBean2.getModelCodesId());
				if (sdmxReturnModelInfoBean2 != null) {
					sdmxReturnModelInfoService.deleteEntityByBean(sdmxReturnModelInfoBean2.getReturnSheetInfoId());
				}
			}
			Long returnSheetInfoId = sdmxReturnSheetInfoService.findIdByOtherDetail(
					new String(Base64.decodeBase64(modelCodeInputBean.getSheetCode())),
					new String(Base64.decodeBase64(modelCodeInputBean.getSheetName())),
					new String(Base64.decodeBase64(modelCodeInputBean.getSectionCode())),
					new String(Base64.decodeBase64(modelCodeInputBean.getSectionName())));
			SdmxReturnModelInfoBean sdmxReturnModelInfoBean = new SdmxReturnModelInfoBean();
			sdmxReturnModelInfoBean.setReturnSheetIdFk(returnSheetInfoId);
			sdmxReturnModelInfoBean.setModelCodesIdFk(modelId);
			sdmxReturnModelInfoBean.setReturnCellRef(modelCodeInputBean.getReturnCellRef());
			sdmxReturnModelInfoService.saveEntityByBean(sdmxReturnModelInfoBean, userId);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
			serviceResponseBuilder.setResponse(sdmxModelCodesBean.getModelCode());
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

}
