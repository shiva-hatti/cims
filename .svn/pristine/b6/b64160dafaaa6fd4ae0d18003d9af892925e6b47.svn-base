package com.iris.repository;

import java.util.Date;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.iris.model.RevisionRequest;

public interface RevisionRequestRepository extends JpaRepository<RevisionRequest, Long> {

	@Query("from RevisionRequest revisionRequest where revisionRequest.returns.returnId =:returnId and revisionRequest.entity.entityId =:entityId and "
			+ " revisionRequest.endDate =:endDate and "
			+ "revisionRequest.returnPropertyVal.returnProprtyValId =:returnPropValIds and "
			+ "revisionRequest.adminStatusIdFk != 3 ORDER BY revisionRequest.revisionRequestId DESC")
	List<RevisionRequest> getNonRejectedRevisionRequest(@Param("returnId") Long returnId, @Param("entityId") Long entityId,  
			@Param("endDate") Date endDate, @Param("returnPropValIds") Integer returnPropValIds);

	@Query("from RevisionRequest revisionRequest where revisionRequest.returns.returnId =:returnId and revisionRequest.entity.entityId =:entityId and "
			+ " revisionRequest.endDate =:endDate and  revisionRequest.adminStatusIdFk != 3 ORDER BY "
			+ "revisionRequest.revisionRequestId DESC")
	List<RevisionRequest> getNonRejectedRevisionRequest(@Param("returnId") Long returnId, @Param("entityId") Long entityId,  @Param("endDate") Date endDate);

	@Query("From RevisionRequest revisionRequest, ReturnRegulatorMapping retRegMap, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
			+ "EntityLabelBean entityLabelBean, LanguageMaster langMaster where retRegMap.returnIdFk.returnId = returns.returnId and "
			+ "revisionRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
			+ "returns.returnId = returnLabel.returnIdFk.returnId and revisionRequest.entity.entityId = entityBean.entityId and "
			+ "entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId"
			+ " and revisionRequest.returns.returnId = retRegMap.returnIdFk.returnId and retRegMap.returnIdFk.isActive = 1 and "
			+ "retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageId =:langId and revisionRequest.adminStatusIdFk = 1 and "
			+ "returns.isActive = 1 and entityBean.isActive = 1 and retRegMap.isActive = 1 and revisionRequest.createdBy.userId != :userId order by revisionRequest.revisionRequestId asc")
	List<RevisionRequest> getDataByLangIdAndRegId(@Param("langId") Long langId, @Param("regulatorId") Long regulatorId, @Param("userId") Long userId);
	
	@Query("SELECT count (revisionRequest.revisionRequestId) From RevisionRequest revisionRequest, ReturnRegulatorMapping retRegMap, Return returns, "
			+ "ReturnLabel returnLabel, EntityBean entityBean, EntityLabelBean entityLabelBean, LanguageMaster langMaster where "
			+ "retRegMap.returnIdFk.returnId = returns.returnId and revisionRequest.returns.returnId = returns.returnId and "
			+ "returnLabel.langIdFk.languageId = langMaster.languageId and returns.returnId = returnLabel.returnIdFk.returnId and "
			+ "revisionRequest.entity.entityId = entityBean.entityId and entityBean.entityId = entityLabelBean.entityBean.entityId and "
			+ "entityLabelBean.languageMaster.languageId = langMaster.languageId and revisionRequest.returns.returnId = retRegMap.returnIdFk.returnId and "
			+ "retRegMap.returnIdFk.isActive = 1 and retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageId =:langId and "
			+ "revisionRequest.adminStatusIdFk = 1 and returns.isActive = 1 and entityBean.isActive = 1 and retRegMap.isActive = 1 and revisionRequest.createdBy.userId != :userId order by revisionRequest.revisionRequestId asc")
	Long getDataByLangIdAndRegIdCount(@Param("langId") Long langId, @Param("regulatorId") Long regulatorId, @Param("userId") Long userId);

	
	@Query(" From RevisionRequest revisionRequest, EntityBean entityBean, EntityLabelBean entityLabelBean, Return returns, ReturnLabel returnLabel, LanguageMaster languageMaster where "
			+ " revisionRequest.returns.returnId = returns.returnId and revisionRequest.entity.entityId = entityBean.entityId and entityBean.entityId = entityLabelBean.entityBean.entityId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and returnLabel.langIdFk.languageId = languageMaster.languageId and entityLabelBean.languageMaster.languageId = languageMaster.languageId "
			+ " and entityBean.isActive = 1 and returns.isActive = 1 and languageMaster.isActive = 1 and returns.returnId in :returnList and entityBean.entityId =:entityId and languageMaster.languageCode =:langCode"
			+ " order by revisionRequest.createdOn desc ")
	List<RevisionRequest> getUnlockRequestDataByLangCodeAndEntityId(@Param("returnList") List<Long> returnList, @Param("entityId") Long entityId, @Param("langCode") String langCode);

	@Query(" From RevisionRequest revisionRequest, EntityBean entityBean, EntityLabelBean entityLabelBean, Return returns, ReturnLabel returnLabel, LanguageMaster languageMaster where "
			+ " revisionRequest.returns.returnId = returns.returnId and revisionRequest.entity.entityId = entityBean.entityId and entityBean.entityId = entityLabelBean.entityBean.entityId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and returnLabel.langIdFk.languageId = languageMaster.languageId and entityLabelBean.languageMaster.languageId = languageMaster.languageId "
			+ " and entityBean.isActive = 1 and returns.isActive = 1 and languageMaster.isActive = 1 and returns.returnId in :returnList and languageMaster.languageCode =:langCode"
			+ " order by revisionRequest.createdOn desc ")
	List<RevisionRequest> getUnlockRequestDataByLangCodeAndReturnIdList(@Param("returnList") List<Long> returnList, @Param("langCode") String langCode);
	
	RevisionRequest findByRevisionRequestId(Long revisionRequestId);
	
	@Query(" From RevisionRequest revisionRequest, EntityBean entityBean, EntityLabelBean entityLabelBean, Return returns, ReturnLabel returnLabel, LanguageMaster languageMaster, AdminStatus adminStatus where "
			+ " revisionRequest.returns.returnId = returns.returnId and revisionRequest.entity.entityId = entityBean.entityId and entityBean.entityId = entityLabelBean.entityBean.entityId and revisionRequest.adminStatusIdFk = adminStatus.adminStatusId and"
			+ " returns.returnId = returnLabel.returnIdFk.returnId and returnLabel.langIdFk.languageId = languageMaster.languageId and entityLabelBean.languageMaster.languageId = languageMaster.languageId "
			+ " and entityBean.isActive = 1 and returns.isActive = 1 and languageMaster.isActive = 1 and returns.returnId in :returnList and entityBean.entityId =:entityId and languageMaster.languageCode =:langCode"
			+ " and revisionRequest.endDate between date(:startDate) and date(:endDate) and adminStatus.adminStatusId in (:revisionIdList)"
			+ " order by revisionRequest.createdOn desc ")
	List<RevisionRequest> getUnlockRequestDataByLangCodeAndEntityIdAndStartDateAndEndDate(@Param("returnList") List<Long> returnList, @Param("entityId") Long entityId, @Param("langCode") String langCode, @Param("startDate") Date startDate, @Param("endDate") Date endDate, @Param("revisionIdList") List<Integer> revisionIdList);

	@Query(" From RevisionRequest revisionRequest, EntityBean entityBean, EntityLabelBean entityLabelBean, Return returns, ReturnLabel returnLabel, LanguageMaster languageMaster, AdminStatus adminStatus where "
			+ " revisionRequest.returns.returnId = returns.returnId and revisionRequest.entity.entityId = entityBean.entityId and entityBean.entityId = entityLabelBean.entityBean.entityId and revisionRequest.adminStatusIdFk = adminStatus.adminStatusId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and returnLabel.langIdFk.languageId = languageMaster.languageId and entityLabelBean.languageMaster.languageId = languageMaster.languageId "
			+ " and entityBean.isActive = 1 and returns.isActive = 1 and languageMaster.isActive = 1 and returns.returnId in :returnList and languageMaster.languageCode =:langCode"
			+ " and revisionRequest.endDate between date(:startDate) and date(:endDate) and adminStatus.adminStatusId in (:revisionIdList)"
			+ " order by revisionRequest.createdOn desc ")
	List<RevisionRequest> getUnlockRequestDataByLangCodeAndReturnIdListAndStartDateAndEndDate(@Param("returnList") List<Long> returnList, @Param("langCode") String langCode, @Param("startDate") Date startDate, @Param("endDate") Date endDate, @Param("revisionIdList") List<Integer> revisionIdList);
	
}