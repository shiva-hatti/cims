/**
 * 
 */
package com.iris.sdmx.element.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.iris.exception.ServiceException;
import com.iris.sdmx.element.bean.SdmxElementBean;
import com.iris.sdmx.element.entity.SdmxElementEntity;
import com.iris.sdmx.element.helper.SdmxElementHelper;
import com.iris.sdmx.element.repo.SdmxElementRepo;
import com.iris.service.GenericService;

/**
 * @author apagaria
 *
 */
@Service
@Transactional(readOnly = true)
public class SdmxElementService implements GenericService<SdmxElementEntity, Long> {

	@Autowired
	private SdmxElementRepo sdmxElementRepo;

	@Override
	public SdmxElementEntity add(SdmxElementEntity entity) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean update(SdmxElementEntity entity) throws ServiceException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<SdmxElementEntity> getDataByIds(Long[] ids) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SdmxElementEntity getDataById(Long id) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SdmxElementEntity> getDataByColumnValue(Map<String, List<String>> columnValueMap, String methodName)
			throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SdmxElementEntity> getDataByColumnLongValue(Map<String, List<Long>> columnValueMap, String methodName)
			throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SdmxElementEntity> getDataByObject(Map<String, Object> columnValueMap, String methodName)
			throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public List<SdmxElementEntity> getActiveDataFor(Class bean, Long id) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public List<SdmxElementEntity> getAllDataFor(Class bean, Long id) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteData(SdmxElementEntity bean) throws ServiceException {
		// TODO Auto-generated method stub

	}

	/**
	 * @param sdmxElementBean
	 */
	@Transactional(readOnly = false)
	public void addEntityByBean(SdmxElementBean sdmxElementBean) {
		SdmxElementEntity sdmxElementEntity = new SdmxElementEntity();
		SdmxElementHelper.convertBeanToEntity(sdmxElementBean, sdmxElementEntity, false);
		sdmxElementRepo.save(sdmxElementEntity);
	}

	/**
	 * @param sdmxElementBean
	 */
	@Transactional(readOnly = false)
	public void editEntityByBean(SdmxElementBean sdmxElementBean, Long elementId) {
		SdmxElementEntity sdmxElementEntity = sdmxElementRepo.findEntityByActiveStatus(elementId, Boolean.TRUE);
		SdmxElementHelper.convertBeanToEntity(sdmxElementBean, sdmxElementEntity, true);
		sdmxElementRepo.save(sdmxElementEntity);
	}

	public void deleteEntityById(Long elementId) {
		SdmxElementEntity sdmxElementEntity = sdmxElementRepo.findEntityByActiveStatus(elementId, Boolean.TRUE);
		sdmxElementEntity.setIsActive(Boolean.FALSE);
		sdmxElementRepo.save(sdmxElementEntity);
	}

	/**
	 * @param elementId
	 * @param isActive
	 * @return
	 */
	public Boolean findByElementIdAndActiveStatus(Long elementId, Boolean isActive) {
		Boolean isElementExist = false;
		if (sdmxElementRepo.findByElementIdAndActiveStatus(elementId, isActive) > 0) {
			isElementExist = true;
		}
		return isElementExist;
	}

	/**
	 * @param dsdCode
	 * @param elementVer
	 * @param isActive
	 * @return
	 */
	public Long findByDsdCodeAndVerAndIsActive(String dsdCode, String elementVer, Boolean isActive) {

		return sdmxElementRepo.findByDsdCodeAndVerAndIsActive(dsdCode, elementVer, isActive);

	}

	/**
	 * @param dsdCode
	 * @param isActive
	 * @return
	 */
	public List<String> findVersionByDsdCode(String dsdCode, Boolean isActive) {
		List<String> elementVer = null;
		elementVer = sdmxElementRepo.findVersionsByDsdCode(dsdCode, isActive);
		return elementVer;
	}

	/**
	 * @param isActive
	 * @return
	 */
	public List<SdmxElementBean> findEntitiesByActiveStatus(Boolean isActive) {
		List<SdmxElementBean> sdmxElementBeans = null;
		List<SdmxElementEntity> sdmxElementEntities = sdmxElementRepo.findEntitiesByActiveStatus(isActive);
		if (!CollectionUtils.isEmpty(sdmxElementEntities)) {
			sdmxElementBeans = new ArrayList<>();
			SdmxElementHelper.convertEntityListToBeanList(sdmxElementEntities, sdmxElementBeans);
		}
		return sdmxElementBeans;
	}

	/**
	 * @param isActive
	 * @return
	 */
	public SdmxElementBean findEntityByActiveStatus(Long elementId, Boolean isActive) {
		SdmxElementBean sdmxElementBean = null;
		SdmxElementEntity sdmxElementEntity = sdmxElementRepo.findEntityByActiveStatus(elementId, isActive);
		if (sdmxElementEntity != null) {
			sdmxElementBean = new SdmxElementBean();
			SdmxElementHelper.convertEntityToBean(sdmxElementEntity, sdmxElementBean);
		}
		return sdmxElementBean;
	}
}
