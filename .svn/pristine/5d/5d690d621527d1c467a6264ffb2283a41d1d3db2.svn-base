package com.iris.dynamicDropDown.controller;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.NullArgumentException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.controller.AxisMemberBean;
import com.iris.dto.Option;
import com.iris.dto.Options;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.dynamicDropDown.model.DropDownValues;
import com.iris.dynamicDropDown.repo.AxisManagerRepo;
import com.iris.dynamicDropDown.repo.DynamicDropDownRepo;
import com.iris.model.Return;
import com.iris.repository.ReturnRepo;
import com.iris.util.Validations;
import com.iris.util.constant.ErrorCode;


/**
 * @author BHAVANA
 *
 */
@RestController
@RequestMapping("/service")
public class DynaDropDownController {
	private static final Logger Logger = LogManager.getLogger(DynaDropDownController.class);
	@Autowired
	private DynamicDropDownRepo dynamicDropDownRepo;
	@Autowired
	private AxisManagerRepo axisManagerRepo;
	
	@Autowired
	private ReturnRepo returnRepo;
	
	@SuppressWarnings("null")
	@PostMapping("/getDynamicDropDownValue/{dropDownType}/{returnCode}")
	public ServiceResponse getDynamicDropDownValue(@PathVariable("dropDownType") String dropDownType, @PathVariable("returnCode") String returnCode) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(dropDownType)) {
				Logger.error("Exception while fetching Dynamic drop down, if lang code or dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			List<DropDownValues> dropDownValuesList = null;
			Options options = new Options();
			if (Validations.isEmpty(returnCode) || returnCode.equalsIgnoreCase("null")) {
				dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownType(dropDownType);
				options.setReturnCode(null);
			} else {
				dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownTypeAndReturnCode(dropDownType, returnCode.toUpperCase());
				options.setReturnCode(returnCode);
			}
			if (CollectionUtils.isEmpty(dropDownValuesList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			Option option;
			List<Option> listOfOption = new ArrayList<>();
			for (DropDownValues dropDownValues : dropDownValuesList) {
				option = new Option();
				option.setKey(dropDownValues.getDropDownValueCode());
				option.setValue(dropDownValues.getDropDownValueEn());
				
				listOfOption.add(option);
			}

		
			options.setDropDownTypeCode(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeCode());
			options.setDropDownTypeName(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeName());
			
			options.setOptionList(listOfOption);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}

	@SuppressWarnings("null")
	@PostMapping("/geSubDropDownOption/{dropDownType}/{dropDownTypeValueCode}/{returnCode}")
	public ServiceResponse geSubDropDownOption(@PathVariable("dropDownType") String dropDownType,@PathVariable("dropDownTypeValueCode") String dropDownTypeValueCode, @PathVariable("returnCode") String returnCode) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(dropDownType)) {
				Logger.error("Exception while fetching Dynamic drop down, dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			if (Validations.isEmpty(dropDownTypeValueCode)) {
				Logger.error("Exception while fetching Dynamic drop down, if lang code or dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			DropDownValues dropDownValues = dynamicDropDownRepo.findByActiveUponDropDownValueCode(dropDownTypeValueCode);
			if(dropDownValues == null) {
				Logger.error("Exception while fetching Dynamic drop down, if dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			List<DropDownValues> dropDownValuesList = null;
			Options options = new Options();
			if (Validations.isEmpty(returnCode) || returnCode.equalsIgnoreCase("null")) {
				dropDownValuesList = dynamicDropDownRepo.findByActiveUponDropDownTypeValue(dropDownType, dropDownValues.getDropDownValueId());
				options.setReturnCode(null);
			} else {
				dropDownValuesList = dynamicDropDownRepo.findByActiveUponDropDownTypeValueAndReturnCode(dropDownType, returnCode.toUpperCase(), dropDownValues.getDropDownValueId());
				options.setReturnCode(returnCode);
			}
			if (CollectionUtils.isEmpty(dropDownValuesList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			Option option;
			List<Option> listOfOption = new ArrayList<>();
			for (DropDownValues dropDownOptions : dropDownValuesList) {
				option = new Option();
				option.setKey(dropDownOptions.getDropDownValueCode());
				option.setValue(dropDownOptions.getDropDownValueEn());
				
				listOfOption.add(option);
			}

		
			options.setDropDownTypeCode(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeCode());
			options.setDropDownTypeName(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeName());
			
			options.setOptionList(listOfOption);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}

	
	@SuppressWarnings("null")
	@PostMapping("/getDropDownValueUponeReturnCode/{returnCode}")
	public ServiceResponse getDropDownValueUponeReturnCode(@PathVariable("returnCode") String returnCode) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(returnCode)) {
				Logger.error("Exception while fetching Dynamic drop down, if returnCode is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			List<DropDownValues> dropDownValuesList = null;
			
			dropDownValuesList = dynamicDropDownRepo.findDropDownOptionReturnCode(returnCode.toUpperCase());
			
			if (CollectionUtils.isEmpty(dropDownValuesList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0134.toString())).build();
			}
			Return returnObj = returnRepo.findByReturnCode(returnCode);
			if(returnObj == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0134.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0134.toString())).build();
			}
			
			List<Long> dropdownTypeIdList = new ArrayList<>();
			for (DropDownValues dropDownValues : dropDownValuesList) {
				if(!dropdownTypeIdList.contains(dropDownValues.getDropDownTypeIdFk().getDropdownTypeId())) {
					dropdownTypeIdList.add(dropDownValues.getDropDownTypeIdFk().getDropdownTypeId());
				} 
			}
		
			
			List<AxisMemberBean> axisManagerList =  axisManagerRepo.findByActiveWithDropDownTypeId(dropdownTypeIdList, returnObj.getReturnId());
			Option option;
			
			Options options = null;
			List<Option> optionList = null;
			List<Options> dropDownOptionBeanList = new ArrayList<>();
						
			for(Long dropDownTypeId : dropdownTypeIdList) {
				options = new Options();
				optionList = new ArrayList<>();
				for(DropDownValues dropDownValues : dropDownValuesList) {
					if(dropDownTypeId.equals(dropDownValues.getDropDownTypeIdFk().getDropdownTypeId())) {
						option = new Option();
						option.setKey(dropDownValues.getDropDownValueCode());
						option.setValue(dropDownValues.getDropDownValueEn());
						optionList.add(option);
						options.setDropDownTypeCode(dropDownValues.getDropDownTypeIdFk().getDropdownTypeCode());
						options.setDropDownTypeName(dropDownValues.getDropDownTypeIdFk().getDropdownTypeName());
						options.setReturnCode(returnCode);
					}
				}
			
				if (!CollectionUtils.isEmpty(axisManagerList)) {
					for(AxisMemberBean axisMngt : axisManagerList) {
						if(axisMngt.getDropDownTypeIdFk().getDropdownTypeId().equals(dropDownTypeId)) {
							options.setConcept(axisMngt.getConcept());
							options.setTypeDomain(axisMngt.getTypedDomain());
						}
					}	
				}
				options.setOptionList(optionList);
				dropDownOptionBeanList.add(options);
			}
			
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(dropDownOptionBeanList);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}
}
