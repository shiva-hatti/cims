package com.iris.service.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import com.iris.exception.ServiceException;
import com.iris.model.Category;
import com.iris.model.EntityAuditorMapInfo;
import com.iris.model.EntityBean;
import com.iris.model.Return;
import com.iris.model.ReturnEntityMappingNew;
import com.iris.model.SubCategory;
import com.iris.model.UserRegulator;
import com.iris.repository.EntityAuditorMappingRepo;
import com.iris.repository.ReturnRepo;
import com.iris.repository.UserRegulatorRepo;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorConstants;

/**
 * @author psheke
 * @date 05/01/2020
 */
@Service
public class EntityAuditorMappingService {
	@Autowired
	private EntityAuditorMappingRepo entityAuditorMapRepo;
	@Autowired
	private UserRegulatorRepo userRegulatorRepo;
	@Autowired
	public ReturnRepo returnRepo;
	private static final Logger LOGGER = LogManager.getLogger(EntityAuditorMappingService.class);

	public List<EntityAuditorMapInfo> fetchEntityAuditorMapData()  {
		List<EntityAuditorMapInfo> entityAuditorMapList = null;
	
		try {
		
			 entityAuditorMapList = entityAuditorMapRepo.getEntityAuditorMapData(true);
			

		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return entityAuditorMapList;

	}

	
	public boolean updateActiveStatusForPassedEndDate(List<EntityAuditorMapInfo> entityAuditorMapList) {
		boolean flag = false;
		try {
			flag = !CollectionUtils.isEmpty(entityAuditorMapRepo.saveAll(entityAuditorMapList));
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);

		}
		return flag;
	}
	
	  public Integer getUserRegulator() { 
		  List<UserRegulator> userRegulator=null;
	  Integer audEntMapExpDays = null;
	  try {
	  userRegulator=userRegulatorRepo.getUserRegulator();
		if(userRegulator!=null) {
			audEntMapExpDays=userRegulator.get(0).getAudEntMapExpDays();
			}
	  } catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return audEntMapExpDays;
		}
	 
	  public List<EntityBean> getEntityListForAuditorUser (Map<String, Object> columnValueMap)throws ServiceException {
		  LOGGER.info("Fetching Entity List: EntityAuditorMapProcessor.getEntityListForAuditorUser");
			Boolean isActive = false;
			String langCode = null;
			String categoryCode = null;
			Long userId = null;
			String likeString = null;
			List<String> subCateCodeList = null;
		
			try {

			for (String columnName : columnValueMap.keySet()) {
				 if (columnName.equalsIgnoreCase(ColumnConstants.IS_ACTIVE.getConstantVal())) {
					isActive = (Boolean) columnValueMap.get(columnName);
				} else if (columnName.equalsIgnoreCase(ColumnConstants.LANG_CODE.getConstantVal())) {
					langCode = (String) columnValueMap.get(columnName);
				} else if (columnName.equalsIgnoreCase(ColumnConstants.CAT_CODE.getConstantVal())) {
					categoryCode = (String) columnValueMap.get(columnName);
				} else if (columnName.equalsIgnoreCase(ColumnConstants.USER_ID.getConstantVal())) {
					userId = (Long) columnValueMap.get(columnName);
				} else if (columnName.equalsIgnoreCase(ColumnConstants.LIKE_STRING.getConstantVal())) {
					likeString = (String) columnValueMap.get(columnName);
				} else if(columnName.equalsIgnoreCase(ColumnConstants.SUB_CAT_CODE_LIST.getConstantVal())) {
					subCateCodeList = (List<String>) columnValueMap.get(columnName);
				}
			}
			
			if (StringUtils.isBlank(categoryCode) && CollectionUtils.isEmpty(subCateCodeList)) {
				  return entityAuditorMapRepo.getEntityListByLangCodeAndIsActive(userId,langCode,isActive,likeString);
			}

			else if (CollectionUtils.isEmpty(subCateCodeList) && !StringUtils.isBlank(categoryCode)) {
				return entityAuditorMapRepo.getEntityListByLangCodeAndIsActiveAndCategoryCode(userId,langCode, isActive, categoryCode, likeString);
			} else if (!CollectionUtils.isEmpty(subCateCodeList) && StringUtils.isBlank(categoryCode)) {

				return entityAuditorMapRepo.getEntityListByLangCodeAndIsActiveAndSubCateCode(userId,langCode, isActive, subCateCodeList, likeString);
			} else if (!CollectionUtils.isEmpty(subCateCodeList) && !StringUtils.isBlank(categoryCode)) {
				return entityAuditorMapRepo.getEntityListByLangCodeAndIsActiveAndSubCateCodeAndCateCode(userId,langCode, isActive,
						categoryCode, subCateCodeList, likeString);
			}
			} catch (Exception e) {
				LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);

			}
			return null;
		  
	  
	  }
	  public List<Category> getCategoryForAuditorUser(Map<String, Object> columnValueMap) throws ServiceException {
	  try {
			boolean isActive = false;
			String langCode = null;
			Long userId = null;
			if(columnValueMap!= null) {
				for (String columnName : columnValueMap.keySet()) {
					if(columnValueMap.get(columnName)!= null) {
						if(columnName.equalsIgnoreCase(ColumnConstants.IS_ACTIVE.getConstantVal())) {
							isActive = (boolean) columnValueMap.get(columnName);
						} else if(columnName.equalsIgnoreCase(ColumnConstants.LANG_CODE.getConstantVal())) {
							langCode = (String) columnValueMap.get(columnName);
						} else if(columnName.equalsIgnoreCase(ColumnConstants.USER_ID.getConstantVal())) {
							userId = (Long) columnValueMap.get(columnName);
						}
					}
				}
			}
			return entityAuditorMapRepo.loadCategoryForAuditorUser(userId, langCode ,isActive);
	  }catch(Exception e) {
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
	  }
	  
	  public List<SubCategory> getSubCategoryForAuditorUser(Map<String, Object> columnValueMap) throws ServiceException {
		  try {
				boolean isActive = false;
				String langCode = null;
				Long userId = null;
				if(columnValueMap!= null) {
					for (String columnName : columnValueMap.keySet()) {
						if(columnValueMap.get(columnName)!= null) {
							if(columnName.equalsIgnoreCase(ColumnConstants.IS_ACTIVE.getConstantVal())) {
								isActive = (boolean) columnValueMap.get(columnName);
							} else if(columnName.equalsIgnoreCase(ColumnConstants.LANG_CODE.getConstantVal())) {
								langCode = (String) columnValueMap.get(columnName);
							}else if(columnName.equalsIgnoreCase(ColumnConstants.USER_ID.getConstantVal())) {
								userId = (Long) columnValueMap.get(columnName);
							}
						}
					}
				}
				
				return entityAuditorMapRepo.loadSubCategoryForAuditorUser(userId, langCode ,isActive);
		  }catch(Exception e) {
				throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
			}
	  }
	  
	 public List<ReturnEntityMappingNew> getEntityReturnChannelMappingForAuditor(Map<String, Object> columnValueMap)throws ServiceException {
		 try {
				Long userId = null;
				Boolean isActive = false;
				String langCode = null;
				List<String> entCodeList = null;
				Boolean isChanelToConsider = (Boolean) columnValueMap.get(ColumnConstants.IS_CHANNEL_TO_CONSIDER.getConstantVal());
				Boolean uploadChannel = false;
				Boolean webChannel = false;
				Boolean emailChannel = false;
				Boolean apiChannel = false;
				Boolean stsChannel = false;

				for (String columnName : columnValueMap.keySet()) {
					if (columnName.equalsIgnoreCase(ColumnConstants.USER_ID.getConstantVal())) {
						userId = (Long) columnValueMap.get(columnName);
					} else if (columnName.equalsIgnoreCase(ColumnConstants.IS_ACTIVE.getConstantVal())) {
						isActive = (Boolean) columnValueMap.get(columnName);
					} else if (columnName.equalsIgnoreCase(ColumnConstants.LANG_CODE.getConstantVal())) {
						langCode = (String) columnValueMap.get(columnName);
					} else if (columnName.equalsIgnoreCase(ColumnConstants.ENT_CODE_LIST.getConstantVal())) {
						entCodeList = (List<String>) columnValueMap.get(columnName);
					}else if (columnName.equalsIgnoreCase(ColumnConstants.UPLOAD_CHANNEL.getConstantVal())) {
						uploadChannel = (Boolean) columnValueMap.get(columnName);
					}else if (columnName.equalsIgnoreCase(ColumnConstants.API_CHANNEL.getConstantVal())) {
						apiChannel = (Boolean) columnValueMap.get(columnName);
					}else if (columnName.equalsIgnoreCase(ColumnConstants.WEB_CHANNEL.getConstantVal())) {
						webChannel = (Boolean) columnValueMap.get(columnName);
					}else if (columnName.equalsIgnoreCase(ColumnConstants.STS_CAHNNEL.getConstantVal())) {
						stsChannel = (Boolean) columnValueMap.get(columnName);
					}else if (columnName.equalsIgnoreCase(ColumnConstants.EMAIL_CHANNEL.getConstantVal())) {
						emailChannel = (Boolean) columnValueMap.get(columnName);
					} 
				}
				
				if(isChanelToConsider!=null && isChanelToConsider) {
					return entityAuditorMapRepo.getReturnListByUserIdEntCodeAndChannel(userId, entCodeList, isActive, langCode, uploadChannel, webChannel, emailChannel, apiChannel, stsChannel);

				}
				else {
					return entityAuditorMapRepo.getReturnListByUserIdEntCode(userId, entCodeList, isActive, langCode);
	
				}
			
	 } catch (Exception e) {
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
	  }
	 public List<EntityBean> getMappedEntityListForAuditorUser(Map<String, Object> columnValueMap)throws ServiceException {
		 boolean isActive = false;
			String langCode = null;
			Long userId = null;
			if(columnValueMap!= null) {
				for (String columnName : columnValueMap.keySet()) {
					if(columnValueMap.get(columnName)!= null) {
						if(columnName.equalsIgnoreCase(ColumnConstants.IS_ACTIVE.getConstantVal())) {
							isActive = (boolean) columnValueMap.get(columnName);
						} else if(columnName.equalsIgnoreCase(ColumnConstants.LANG_CODE.getConstantVal())) {
							langCode = (String) columnValueMap.get(columnName);
						} else if(columnName.equalsIgnoreCase(ColumnConstants.USER_ID.getConstantVal())) {
							userId = (Long) columnValueMap.get(columnName);
						}
					}
				}
			}
			return entityAuditorMapRepo.getMappedEntityListForAuditorUser(userId,langCode,isActive);
	 }
	 
	 public List<Return> getReturnMappingForAuditor(Map<String, Object> columnValueMap) throws ServiceException {
		 Long userId = null;
			Boolean isActive = false;
			Long langId = null;
			List<Return> returnList =null;
			List <Long> returnIdList =null;
		 for (String columnName : columnValueMap.keySet()) {
				if (columnName.equalsIgnoreCase(ColumnConstants.USER_ID.getConstantVal())) {
					userId = (Long) columnValueMap.get(columnName);
				} else if (columnName.equalsIgnoreCase(ColumnConstants.IS_ACTIVE.getConstantVal())) {
					isActive = (Boolean) columnValueMap.get(columnName);
				} else if (columnName.equalsIgnoreCase(ColumnConstants.LANG_ID.getConstantVal())) {
					langId = (Long) columnValueMap.get(columnName);
				}
				}

		 returnIdList = entityAuditorMapRepo.getMappedReturnIdListForAuditor(userId, isActive);
		 returnList= returnRepo.getReturnById(returnIdList);
		 
		return returnList; 
	 }
	
}
