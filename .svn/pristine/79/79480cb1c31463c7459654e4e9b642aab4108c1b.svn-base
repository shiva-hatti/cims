/**
 * 
 */
package com.iris.sdmx.fusion.service;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.sql.DataSource;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.iris.caching.ObjectCache;
import com.iris.dto.SdmxWebserviceUrlDto;
import com.iris.model.UserMaster;
import com.iris.sdmx.codelist.bean.CodeListMasterBean;
import com.iris.sdmx.codelist.bean.CodeListValuesBean;
import com.iris.sdmx.fusion.bean.CodeListFusion;
import com.iris.sdmx.fusion.bean.CodeListFusionWrapper;
import com.iris.sdmx.fusion.bean.ConceptSchemeWrapper;
import com.iris.sdmx.fusion.bean.DataStructureWrapper;
import com.iris.sdmx.fusion.bean.FusionDecription;
import com.iris.sdmx.fusion.bean.RegistryInterface;
import com.iris.sdmx.fusion.bean.error.Error;
import com.iris.sdmx.fusion.entity.FusionProperties;
import com.iris.sdmx.fusion.entity.SdmxFusionDsdDetailEntity;
import com.iris.sdmx.fusion.repo.FusionPropertiesRepo;
import com.iris.sdmx.fusion.util.FusionPropertiesConstant;
import com.iris.sdmx.util.SDMXWebServiceConstant;
import com.iris.util.JsonUtility;
import com.iris.util.ResourceUtil;
import com.iris.util.constant.GeneralConstants;
import com.iris.webservices.client.FusionRestWebserviceClient;

/**
 * @author sajadhav
 *
 */
@Service
public class FusionApiService {

	private static final Logger LOGGER = LogManager.getLogger(FusionApiService.class);
	
	
	@Autowired
	private FusionPropertiesRepo fusionPropertiesRepo;

	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private SdmxFusionDsdDetailService sdmxFusionDsdDetailService;

	
	private static final String ERROR_TAG = "mes:ErrorMessage";
	
	public boolean submitDataToFusion(Object object, Integer actionId, Long userId){
		if(ResourceUtil.getKeyValue("submitDataToFusion").equalsIgnoreCase(Boolean.TRUE.toString())) {
			if(object instanceof CodeListFusionWrapper) {
				CodeListFusionWrapper codeListFusionWrapper = (CodeListFusionWrapper) object;
				if(actionId.equals(GeneralConstants.ACTIONID_ADDITION.getConstantIntVal()) || actionId.equals(GeneralConstants.ACTIONID_EDITION.getConstantIntVal())) {
					return submitCodeListDataToFusion(codeListFusionWrapper, userId);
				}else {
					return deleteCodeListData(codeListFusionWrapper, userId);
				}
			}else if(object instanceof ConceptSchemeWrapper) {
				ConceptSchemeWrapper conceptSchemeWrapper = (ConceptSchemeWrapper) object;
				return submitDimensionDataToFusion(conceptSchemeWrapper, userId);
			}else if(object instanceof DataStructureWrapper) {
				DataStructureWrapper dataStructureWrapper = (DataStructureWrapper) object;
				if(actionId.equals(GeneralConstants.ACTIONID_ADDITION.getConstantIntVal()) || actionId.equals(GeneralConstants.ACTIONID_EDITION.getConstantIntVal())) {
					return submitElementDimensionDataToFusion(dataStructureWrapper, userId);
				}else {
					return deleteElementDimensionData(dataStructureWrapper, userId);
				}
			}
			return false;	
		}else {
			return true;
		}
	}


	public boolean submitCodeListData(CodeListMasterBean codeListMasterBean){
		List<FusionProperties> fusionProperties = fusionPropertiesRepo.findAll();
		if(!CollectionUtils.isEmpty(fusionProperties)) {
			CodeListFusionWrapper codeListFusionWrapper = createCodeListFusionJson(codeListMasterBean, fusionProperties.stream().collect(Collectors.toMap(FusionProperties::getKey, FusionProperties::getValue)));
			return submitDataToFusion(codeListFusionWrapper, GeneralConstants.ACTIONID_ADDITION.getConstantIntVal(), codeListMasterBean.getUserId());
		}
		
		return false;
	}
	
	public boolean generateDsdCallToFusion(){
		List<FusionProperties> fusionProperties = fusionPropertiesRepo.findAll();
		if(!CollectionUtils.isEmpty(fusionProperties)) {
			return submitGenerateDsdToFusion(3L);
		}
		
		return false;
	}
	
	private CodeListFusionWrapper createCodeListFusionJson(CodeListMasterBean codeListMasterBean, Map<String, String> fusionPropertiesMap) {

		CodeListFusionWrapper codeListWrapper = new CodeListFusionWrapper();
		
		CodeListFusion codeListFusion = new CodeListFusion();
		
		codeListFusion.setAgencyId(fusionPropertiesMap.get(FusionPropertiesConstant.AGENCY_ID.getConstant()));
		codeListFusion.setVersion(codeListMasterBean.getClVersion());
		codeListFusion.setFinal(Boolean.parseBoolean(fusionPropertiesMap.get(FusionPropertiesConstant.IS_FINAL.getConstant())));
		codeListFusion.setPartial(Boolean.parseBoolean(fusionPropertiesMap.get(FusionPropertiesConstant.IS_PARTIAL.getConstant())));
		codeListFusion.setValidityType(fusionPropertiesMap.get(FusionPropertiesConstant.VALIDITY_TYPE.getConstant()));
		codeListFusion.setId(codeListMasterBean.getClCode());
		codeListFusion.setUrn(fusionPropertiesMap.get(FusionPropertiesConstant.CODE_LIST_URN.getConstant()) + fusionPropertiesMap.get(FusionPropertiesConstant.AGENCY_ID.getConstant()) +":"+codeListMasterBean.getClCode()+"("+codeListMasterBean.getClVersion()+")");

		
		List<FusionDecription> names = new ArrayList<>();
		FusionDecription fusionName = new FusionDecription();
		fusionName.setLocale(fusionPropertiesMap.get(FusionPropertiesConstant.LOCALE.getConstant()));
		fusionName.setValue(codeListMasterBean.getClLable());
		names.add(fusionName);
		
		codeListFusion.setNames(names);
		
		List<FusionDecription> descriptions = new ArrayList<>();
		FusionDecription fusionDecription = new FusionDecription();
		fusionDecription.setLocale(fusionPropertiesMap.get(FusionPropertiesConstant.LOCALE.getConstant()));
		fusionDecription.setValue(codeListMasterBean.getClDesc());
		descriptions.add(fusionDecription);
		
		codeListFusion.setDescriptions(descriptions);
		
		List<CodeListFusion> items = new ArrayList<>();
		
		if(!CollectionUtils.isEmpty(codeListMasterBean.getCodeListValues())) {
			for (CodeListValuesBean codeListValuesBean : codeListMasterBean.getCodeListValues()) {
				
				if(codeListValuesBean.getIsActive().equals(Boolean.FALSE)) {
					continue;
				}
				
				CodeListFusion codeListFusionItem = new CodeListFusion();

				codeListFusionItem.setId(codeListValuesBean.getClValueCode());
				codeListFusionItem.setUrn(fusionPropertiesMap.get(FusionPropertiesConstant.CODE_LIST_VALUE_URN.getConstant()) + fusionPropertiesMap.get(FusionPropertiesConstant.AGENCY_ID.getConstant()) + ":"+ codeListMasterBean.getClCode() + "(" + codeListMasterBean.getClVersion() + ")."+codeListValuesBean.getClValueCode());
				
				names = new ArrayList<>();
				fusionName = new FusionDecription();
				fusionName.setLocale(fusionPropertiesMap.get(FusionPropertiesConstant.LOCALE.getConstant()));
				fusionName.setValue(codeListValuesBean.getClValueLable());
				names.add(fusionName);

				codeListFusionItem.setNames(names);
				
				descriptions = new ArrayList<>();
				fusionDecription = new FusionDecription();
				fusionDecription.setLocale(fusionPropertiesMap.get(FusionPropertiesConstant.LOCALE.getConstant()));
				fusionDecription.setValue(codeListValuesBean.getClValueDesc());
				descriptions.add(fusionDecription);
				
				codeListFusionItem.setDescriptions(descriptions);
				
				if(codeListValuesBean.getParentClValueCode()!= null) {
					codeListFusionItem.setParentCode(codeListValuesBean.getParentClValueCode());
				}
				
				items.add(codeListFusionItem);
			}			
		}

		codeListFusion.setItems(items);
		
		codeListWrapper.setCodelist(Arrays.asList(codeListFusion));
		return codeListWrapper;
	}
	private boolean submitDimensionDataToFusion(ConceptSchemeWrapper conceptSchemeWrapper, Long userId) {

		FusionRestWebserviceClient restServiceClient = new FusionRestWebserviceClient();

		Map<String, String> headerMap = new HashMap<>();
		headerMap.put(GeneralConstants.ACTION.getConstantVal(), GeneralConstants.REPLACE.getConstantVal());

		SdmxWebserviceUrlDto sdmxWeSerUrlDto = (SdmxWebserviceUrlDto) ObjectCache.getSdmxServiceMap().get(SDMXWebServiceConstant.SUBMIT_FUSION_DATA.getConstantVal() + "~" + FusionRestWebserviceClient.HTTP_METHOD_TYPE_POST);
		
		String responsestring;
		try {
			Date dateBeforeCalling = new Date();
			responsestring = restServiceClient.callRestWebService(sdmxWeSerUrlDto, conceptSchemeWrapper, headerMap,null);
			Date dateAfterCalling = new Date();
			insertDataIntoSDMXAPILogDetails(sdmxWeSerUrlDto,conceptSchemeWrapper, headerMap, null, dateBeforeCalling, dateAfterCalling, responsestring, null);

			if(responsestring!= null) {
				StringReader reader = new StringReader(responsestring);
				if(responsestring.contains(ERROR_TAG)){
					JAXBContext jaxbContext = JAXBContext.newInstance(Error.class);
					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
					Error unMarshError = (Error) jaxbUnMarshaller.unmarshal(reader);
					System.out.println(unMarshError);
					return false;
				}else {
					JAXBContext jaxbContext = JAXBContext.newInstance(RegistryInterface.class);
					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
		            RegistryInterface unMarshRegistryInterface = (RegistryInterface) jaxbUnMarshaller.unmarshal(reader);
		           
		            if(unMarshRegistryInterface.getSubmitStructureResponse()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage()!= null && 
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage().getStatus().equals("Success")) {
			            	return true;
			        }
				}
			}
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		
		return false;
	}
	
	private boolean submitElementDimensionDataToFusion(DataStructureWrapper dataStructureWrapper, Long userId) {

		FusionRestWebserviceClient restServiceClient = new FusionRestWebserviceClient();

		Map<String, String> headerMap = new HashMap<>();
		headerMap.put(GeneralConstants.ACTION.getConstantVal(), GeneralConstants.REPLACE.getConstantVal());

		SdmxWebserviceUrlDto sdmxWeSerUrlDto = (SdmxWebserviceUrlDto) ObjectCache.getSdmxServiceMap().get(SDMXWebServiceConstant.SUBMIT_FUSION_DATA.getConstantVal() + "~" + FusionRestWebserviceClient.HTTP_METHOD_TYPE_POST);
		
		String responsestring;
		try {
			Date dateBeforeCalling = new Date();
			responsestring = restServiceClient.callRestWebService(sdmxWeSerUrlDto, dataStructureWrapper, headerMap,null);
			Date dateAfterCalling = new Date();
			insertDataIntoSDMXAPILogDetails(sdmxWeSerUrlDto,dataStructureWrapper, headerMap, null, dateBeforeCalling, dateAfterCalling, responsestring, userId);

			if(responsestring!= null) {
				StringReader reader = new StringReader(responsestring);
				if(responsestring.contains(ERROR_TAG)){
					JAXBContext jaxbContext = JAXBContext.newInstance(Error.class);
					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
					Error unMarshError = (Error) jaxbUnMarshaller.unmarshal(reader);
					return false;
				}else {
					JAXBContext jaxbContext = JAXBContext.newInstance(RegistryInterface.class);
					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
		            RegistryInterface unMarshRegistryInterface = (RegistryInterface) jaxbUnMarshaller.unmarshal(reader);
		           
		            if(unMarshRegistryInterface.getSubmitStructureResponse()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage()!= null && 
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage().getStatus().equals("Success")) {
			            	return true;
			        }
				}
			}
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		
		return false;
	}

	private boolean deleteCodeListData(CodeListFusionWrapper codeListFusionWrapper, Long userId) {

		String clCode = null;
		String agencyId = null;
		String version = null;
		if(codeListFusionWrapper.getCodelist()!= null) {
			clCode= codeListFusionWrapper.getCodelist().get(0).getId();
			agencyId= codeListFusionWrapper.getCodelist().get(0).getAgencyId();
			version= codeListFusionWrapper.getCodelist().get(0).getVersion();
		}else {
			return false;
		}
		
		FusionRestWebserviceClient restServiceClient = new FusionRestWebserviceClient();

		Map<String, String> headerMap = new HashMap<>();
		headerMap.put(GeneralConstants.ACTION.getConstantVal(), GeneralConstants.REPLACE.getConstantVal());
		
		SdmxWebserviceUrlDto sdmxWeSerUrlDto = (SdmxWebserviceUrlDto) ObjectCache.getSdmxServiceMap().get(SDMXWebServiceConstant.DELETE_CODE_LIST_FUSION_DATA.getConstantVal() + "~" + restServiceClient.HTTP_METHOD_TYPE_DELETE);
		
		List<String> pathParamList = new ArrayList<>();
		pathParamList.add(agencyId);
		pathParamList.add(clCode);
		pathParamList.add(version);
		String responsestring;
		try {

			Date dateBeforeCalling = new Date();
			responsestring = restServiceClient.callRestWebService(sdmxWeSerUrlDto, null, headerMap,pathParamList);
			Date dateAfterCalling = new Date();
			insertDataIntoSDMXAPILogDetails(sdmxWeSerUrlDto,null, headerMap, pathParamList, dateBeforeCalling, dateAfterCalling, responsestring, null);

			if(responsestring!= null) {
				StringReader reader = new StringReader(responsestring);
				if(responsestring.contains(ERROR_TAG)){
					JAXBContext jaxbContext = JAXBContext.newInstance(Error.class);
					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
					Error unMarshError = (Error) jaxbUnMarshaller.unmarshal(reader);
					System.out.println(unMarshError);
					return false;
				}else {
					JAXBContext jaxbContext = JAXBContext.newInstance(RegistryInterface.class);
					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
		            RegistryInterface unMarshRegistryInterface = (RegistryInterface) jaxbUnMarshaller.unmarshal(reader);
		           
		            if(unMarshRegistryInterface.getSubmitStructureResponse()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage()!= null && 
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage().getStatus().equals("Success")) {
			            	return true;
			        }else {
			            	return false;
		            }
				}
			}
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		return false;
	}

	
	private boolean deleteElementDimensionData(DataStructureWrapper dataStructureWrapper, Long userId) {

		String dsdCode = null;
		String agencyId = null;
		String version = null;
		if(dataStructureWrapper.getDataStructure()!= null) {
			dsdCode= dataStructureWrapper.getDataStructure().get(0).getId();
			agencyId =  dataStructureWrapper.getDataStructure().get(0).getAgencyId();
			version =  dataStructureWrapper.getDataStructure().get(0).getVersion();
		}else {
			return false;
		}
		
		FusionRestWebserviceClient restServiceClient = new FusionRestWebserviceClient();

		Map<String, String> headerMap = new HashMap<>();
		headerMap.put(GeneralConstants.ACTION.getConstantVal(), GeneralConstants.REPLACE.getConstantVal());
		
		SdmxWebserviceUrlDto sdmxWeSerUrlDto = (SdmxWebserviceUrlDto) ObjectCache.getSdmxServiceMap().get(SDMXWebServiceConstant.DELETE_ELE_DIMN_FUSION_DATA.getConstantVal() + "~" + FusionRestWebserviceClient.HTTP_METHOD_TYPE_DELETE);
		
		List<String> pathParamList = new ArrayList<>();
		pathParamList.add(agencyId);
		pathParamList.add(dsdCode);
		pathParamList.add(version);
	
		String responsestring;
		try {
			Date dateBeforeCalling = new Date();
			responsestring = restServiceClient.callRestWebService(sdmxWeSerUrlDto, null, headerMap,pathParamList);
			Date dateAfterCalling = new Date();
			insertDataIntoSDMXAPILogDetails(sdmxWeSerUrlDto,null, headerMap, pathParamList, dateBeforeCalling, dateAfterCalling, responsestring, userId);
			if(responsestring!= null) {
				StringReader reader = new StringReader(responsestring);
				if(responsestring.contains(ERROR_TAG)){
//					JAXBContext jaxbContext = JAXBContext.newInstance(Error.class);
//					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
//					Error unMarshError = (Error) jaxbUnMarshaller.unmarshal(reader);
					return false;
				}else {
					JAXBContext jaxbContext = JAXBContext.newInstance(RegistryInterface.class);
					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
		            RegistryInterface unMarshRegistryInterface = (RegistryInterface) jaxbUnMarshaller.unmarshal(reader);
		           
		            if(unMarshRegistryInterface.getSubmitStructureResponse()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage()!= null && 
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage().getStatus().equals("Success")) {
			            	return true;
			        }else {
			            	return false;
		            }
				}
			}
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		return false;
	}
	
	private boolean submitCodeListDataToFusion(CodeListFusionWrapper codeListFusionWrapper, Long userId) {
		FusionRestWebserviceClient restServiceClient = new FusionRestWebserviceClient();

		Map<String, String> headerMap = new HashMap<>();
		headerMap.put(GeneralConstants.ACTION.getConstantVal(), GeneralConstants.REPLACE.getConstantVal());

		SdmxWebserviceUrlDto sdmxWeSerUrlDto = (SdmxWebserviceUrlDto) ObjectCache.getSdmxServiceMap().get(SDMXWebServiceConstant.SUBMIT_FUSION_DATA.getConstantVal() + "~" + FusionRestWebserviceClient.HTTP_METHOD_TYPE_POST);
		
		String responsestring;
		try {
			Date dateBeforeCalling = new Date();
			responsestring = restServiceClient.callRestWebService(sdmxWeSerUrlDto, codeListFusionWrapper, headerMap,null);
			Date dateAfterCalling = new Date();
			insertDataIntoSDMXAPILogDetails(sdmxWeSerUrlDto,codeListFusionWrapper, headerMap, null, dateBeforeCalling, dateAfterCalling, responsestring, userId);
			if(responsestring!= null) {
				StringReader reader = new StringReader(responsestring);
				if(responsestring.contains(ERROR_TAG)){
//					JAXBContext jaxbContext = JAXBContext.newInstance(Error.class);
//					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
//					Error unMarshError = (Error) jaxbUnMarshaller.unmarshal(reader);
//					System.out.println(unMarshError);
					return false;
				}else {
					JAXBContext jaxbContext = JAXBContext.newInstance(RegistryInterface.class);
					Unmarshaller jaxbUnMarshaller = jaxbContext.createUnmarshaller();
		            RegistryInterface unMarshRegistryInterface = (RegistryInterface) jaxbUnMarshaller.unmarshal(reader);
		           
		            if(unMarshRegistryInterface.getSubmitStructureResponse()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult()!= null &&
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage()!= null && 
		            		unMarshRegistryInterface.getSubmitStructureResponse().getSubmissionResult().getStatusMessage().getStatus().equals("Success")) {
			            	return true;
			        }else {
			            	return false;
		            }
				}
			}
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		
		return false;
	}
	
	private boolean submitGenerateDsdToFusion(Long userId) {
		FusionRestWebserviceClient restServiceClient = new FusionRestWebserviceClient();

		Map<String, String> headerMap = new HashMap<>();
		headerMap.put(GeneralConstants.ACTION.getConstantVal(), GeneralConstants.REPLACE.getConstantVal());

		SdmxWebserviceUrlDto sdmxWeSerUrlDto = (SdmxWebserviceUrlDto) ObjectCache.getSdmxServiceMap().get(SDMXWebServiceConstant.GENERATE_DSD_FUSION.getConstantVal()  + "~" + "GET");
		String responsestring;
		try {
			Date dateBeforeCalling = new Date();
			responsestring = restServiceClient.callRestWebService(sdmxWeSerUrlDto, null, headerMap,null);
			Date dateAfterCalling = new Date();
			insertDataIntoSDMXAPILogDetails(sdmxWeSerUrlDto,null, headerMap, null, dateBeforeCalling, dateAfterCalling, responsestring, userId);
			if(responsestring!= null) {
				String currentDateStr = new SimpleDateFormat("yyyyMMddHHmmsss").format(new Date());
				String dirPath = ResourceUtil.getKeyValue("filepath.root") + File.separator
						+ ResourceUtil.getKeyValue("fusion.base.path") + File.separator;
				String destinationXlsFilePath = dirPath
						+ "DSD_FILE_"+currentDateStr
						+ ".xml";
				File dir = new File(dirPath);
				if (!dir.exists()) {
					dir.mkdirs();
				}
				BufferedWriter writer = new BufferedWriter(new FileWriter(destinationXlsFilePath));
			    writer.write(responsestring);
			    writer.close();
			    SdmxFusionDsdDetailEntity sdmxFusionDsdDetailEntity = new SdmxFusionDsdDetailEntity();
			    sdmxFusionDsdDetailEntity.setIsActive(true);
			    sdmxFusionDsdDetailEntity.setDsdFileName("DSD_FILE_"+currentDateStr
						+ ".xml");
			    String maxVersion = sdmxFusionDsdDetailService.findMaxVersionActiveStatus(true);
			    if(!StringUtils.isBlank(maxVersion)) {
			    	Double doubleVersion = Double.parseDouble(maxVersion);
			    	doubleVersion++;
			    	sdmxFusionDsdDetailEntity.setDsdVer(doubleVersion.toString());		
			    } else {
			    	sdmxFusionDsdDetailEntity.setDsdVer("1.0");
			    }
			    UserMaster user = new UserMaster();
			    user.setUserId(3L);
			    sdmxFusionDsdDetailEntity.setCreatedBy(user);
			    sdmxFusionDsdDetailEntity.setCreatedOn(new Date());
			    sdmxFusionDsdDetailService.add(sdmxFusionDsdDetailEntity);
			    return true;
			}
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		
		return false;
	}


	private Boolean insertDataIntoSDMXAPILogDetails(SdmxWebserviceUrlDto sdmxWeSerUrlDto, Object object, 
			Map<String, String> headerMap, List<String> pathParameters,
			Date dateBeforeCalling, Date dateAfterCalling, String response, Long userId){
		
		try(Connection connection  = dataSource.getConnection();
				PreparedStatement pstmt = connection.prepareStatement("INSERT INTO TBL_SDMX_API_LOG_DETAILS"
						+ " (USER_ID_FK,COMPONENT_URL_ID_FK,REQUEST_JSON, PATH_VARIABLE, REQUEST_RECEIVED_TIME,"
						+ " RESPONSE_SENDING_TIME, HEADER, CREATED_TIME, RESPONSE_JSON) "
						+ " VALUES (?,?,?,?,?,?,?,?,?)")) {
			if(userId!= null) {
				pstmt.setLong(1, userId);
			}else {
				pstmt.setString(1, null);
			}
			pstmt.setLong(2, sdmxWeSerUrlDto.getSdmxWebserviceUrlID());
			if(object!= null) {
				pstmt.setString(3,JsonUtility.getGsonObject().toJson(object));
			}else {
				pstmt.setString(3,null);
			}
			
			if(pathParameters!= null) {
				pstmt.setString(4,JsonUtility.getGsonObject().toJson(pathParameters));
			}else {
				pstmt.setString(4,null);
			}
			
			pstmt.setDate(5, new java.sql.Date(dateBeforeCalling.getTime()));
			pstmt.setDate(6, new java.sql.Date(dateAfterCalling.getTime()));
			
			if(headerMap!= null) {
				pstmt.setString(7,JsonUtility.getGsonObject().toJson(headerMap));
			}else {
				pstmt.setString(7,null);
			}
			
			pstmt.setDate(8, new java.sql.Date(new Date().getTime()));
			
			pstmt.setString(9,response);

			pstmt.executeUpdate();
//			SDMXApiLog sdmxAPiLog = new SDMXApiLog();
//			sdmxAPiLog.setComponentUrlIdFk(sdmxWeSerUrlDto.getSdmxWebserviceUrlID());
//			if(headerMap!= null) {
//				sdmxAPiLog.setHeader(JsonUtility.getGsonObject().toJson(headerMap));
//			}
//			
//			if(pathParameters!= null) {
//				sdmxAPiLog.setPathVariable(JsonUtility.getGsonObject().toJson(pathParameters));
//			}
//			
//			sdmxAPiLog.setRequestReceivedTime(dateBeforeCalling);
//			sdmxAPiLog.setResponseSendingTime(dateAfterCalling);
//			
//			if(object!= null) {
//				sdmxAPiLog.setRequestJson(JsonUtility.getGsonObject().toJson(object));
//			}
//
//			sdmxAPiLog.setResponseJson(response);
//			sdmxAPiLog.setCreatedTime(new Date());
//			sdmxAPiLog.setUserIdFk(userId);
//
//			
//			sdmxApiLogRepo.save(sdmxAPiLog);
			return true;
		}catch(Exception e) {
			LOGGER.error("Exception : ", e);
			return false;
		}
	}
	
}
