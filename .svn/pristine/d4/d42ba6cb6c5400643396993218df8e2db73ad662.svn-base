package com.iris.repository;

import java.util.Date;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.iris.model.RevisionRequest;
import com.iris.model.UnlockingRequest;

public interface UnlockRequestRepository extends JpaRepository<UnlockingRequest, Long> {

	@Query("from UnlockingRequest unlockRequest where unlockRequest.returns.returnId =:returnId and unlockRequest.entity.entityId =:entityId and "
			+ " unlockRequest.endDate =:endDate and unlockRequest.returnPropertyVal.returnProprtyValId =:returnPropValIds "
			+ "and unlockRequest.adminStatusIdFk != 3 ORDER BY unlockRequest.unlockingReqId DESC")
	List<UnlockingRequest> getNonRejectedUnlockRequest(@Param("returnId") Long returnId, @Param("entityId") Long entityId,  @Param("endDate") Date endDate, @Param("returnPropValIds") Integer returnPropValIds);

	@Query("from UnlockingRequest unlockRequest where unlockRequest.returns.returnId =:returnId and unlockRequest.entity.entityId =:entityId and "
			+ " unlockRequest.endDate =:endDate and unlockRequest.adminStatusIdFk != 3 ORDER BY "
			+ "unlockRequest.unlockingReqId DESC")
	List<UnlockingRequest> getNonRejectedUnlockRequest(@Param("returnId") Long returnId,@Param("entityId") Long entityId,
			@Param("endDate") Date endDate);

	@Query("From UnlockingRequest unlockRequest, ReturnRegulatorMapping retRegMap, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
			+ "EntityLabelBean entityLabelBean, LanguageMaster langMaster where retRegMap.returnIdFk.returnId = returns.returnId and "
			+ "unlockRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
			+ "returns.returnId = returnLabel.returnIdFk.returnId and unlockRequest.entity.entityId = entityBean.entityId and "
			+ "entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId and "
			+ "unlockRequest.returns.returnId = retRegMap.returnIdFk.returnId and retRegMap.returnIdFk.isActive = 1 and "
			+ "retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageId =:langId and unlockRequest.adminStatusIdFk = 1 and returns.isActive = 1 "
			+ "and entityBean.isActive = 1 and retRegMap.isActive = 1 and unlockRequest.createdBy.userId != :userId  order by unlockRequest.unlockingReqId asc")
	List<UnlockingRequest> getDataByLangIdAndRegId(@Param("langId") Long langId, @Param("regulatorId") Long regulatorId, @Param("userId") Long userId);

	@Query("From UnlockingRequest unlockRequest, ReturnRegulatorMapping retRegMap, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
			+ " EntityLabelBean entityLabelBean, LanguageMaster langMaster where retRegMap.returnIdFk.returnId = returns.returnId and "
			+ " unlockRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and unlockRequest.entity.entityId = entityBean.entityId and "
			+ " entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId "
			+ " and unlockRequest.returns.returnId = retRegMap.returnIdFk.returnId and retRegMap.returnIdFk.isActive = 1 and "
			+ " retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageId =:langId and unlockRequest.adminStatusIdFk = 1 and "
			+ " unlockRequest.returns.returnId IN (:returnIds) and "
			+ " unlockRequest.entity.entityId in (:entityIdList) and "
			+ " unlockRequest.entity.subCategory.subCategoryId = :subCategoryId and "
			+ " unlockRequest.endDate between date(:startDate) and (:endDate) and "
			+ " returns.isActive = 1 and entityBean.isActive = 1 and retRegMap.isActive = 1 and unlockRequest.createdBy.userId != :userId order by unlockRequest.unlockingReqId asc")
	List<UnlockingRequest> getDataByLangIdAndRegIdEntitySubCatId(@Param("langId") Long langId, @Param("regulatorId") Long regulatorId,
			@Param("userId") Long userId,@Param("returnIds") List<Long> returnIds ,@Param("entityIdList") List<Long> entityIdList,
			@Param("startDate") Date startDate, 
			@Param("endDate") Date endDate, @Param("subCategoryId") Long subCategoryId);
	
	@Query("From UnlockingRequest unlockRequest, ReturnRegulatorMapping retRegMap, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
			+ " EntityLabelBean entityLabelBean, LanguageMaster langMaster where retRegMap.returnIdFk.returnId = returns.returnId and "
			+ " unlockRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and unlockRequest.entity.entityId = entityBean.entityId and "
			+ " entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId "
			+ " and unlockRequest.returns.returnId = retRegMap.returnIdFk.returnId and retRegMap.returnIdFk.isActive = 1 and "
			+ " retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageId =:langId and unlockRequest.adminStatusIdFk = 1 and "
			+ " unlockRequest.returns.returnId IN (:returnIds) and "
			+ " unlockRequest.entity.entityId in (:entityIdList) and "
			+ " unlockRequest.endDate between date(:startDate) and (:endDate) and "
			+ " returns.isActive = 1 and entityBean.isActive = 1 and retRegMap.isActive = 1 and unlockRequest.createdBy.userId != :userId order by unlockRequest.unlockingReqId asc")
	List<UnlockingRequest> getDataByLangIdAndRegIdEntity(@Param("langId") Long langId, @Param("regulatorId") Long regulatorId,
			@Param("userId") Long userId,@Param("returnIds") List<Long> returnIds ,@Param("entityIdList") List<Long> entityIdList,
			@Param("startDate") Date startDate, 
			@Param("endDate") Date endDate);	
	
//	@Query("SELECT count (unlockRequest.unlockingReqId) From UnlockingRequest unlockRequest, ReturnRegulatorMapping retRegMap, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
//			+ "EntityLabelBean entityLabelBean, LanguageMaster langMaster where retRegMap.returnIdFk.returnId = returns.returnId and "
//			+ "unlockRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
//			+ "returns.returnId = returnLabel.returnIdFk.returnId and unlockRequest.entity.entityId = entityBean.entityId and "
//			+ "entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId and "
//			+ "unlockRequest.returns.returnId = retRegMap.returnIdFk.returnId and retRegMap.returnIdFk.isActive = 1 and "
//			+ "retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageId =:langId and unlockRequest.adminStatusIdFk = 1 and returns.isActive = 1 "
//			+ "and entityBean.isActive = 1 and retRegMap.isActive = 1 and unlockRequest.createdBy.userId != :userId order by unlockRequest.unlockingReqId asc")
//	Long getDataByLangIdAndRegIdCount(@Param("langId") Long langId, @Param("regulatorId") Long regulatorId, @Param("userId") Long userId);

	@Query("SELECT count (unlockRequest.unlockingReqId) From UnlockingRequest unlockRequest, ReturnRegulatorMapping retRegMap, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
			+ "EntityLabelBean entityLabelBean, LanguageMaster langMaster where retRegMap.returnIdFk.returnId = returns.returnId and "
			+ "unlockRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
			+ "returns.returnId = returnLabel.returnIdFk.returnId and unlockRequest.entity.entityId = entityBean.entityId and "
			+ "entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId and "
			+ "unlockRequest.returns.returnId = retRegMap.returnIdFk.returnId and retRegMap.returnIdFk.isActive = 1 and "
			+ "retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageId =:langId and unlockRequest.adminStatusIdFk = 1 and "
			+ " unlockRequest.returns.returnId IN (:returnIds) and "
			+ " unlockRequest.entity.entityId in (:entityIdList) and "			
			+ " returns.isActive = 1 "
			+ " and entityBean.isActive = 1 and retRegMap.isActive = 1 and unlockRequest.createdBy.userId != :userId order by unlockRequest.unlockingReqId asc")
	Long getDataByLangIdAndRegIdCount(@Param("langId") Long langId, @Param("regulatorId") Long regulatorId, @Param("userId") Long userId ,@Param("returnIds") List<Long> returnIds ,@Param("entityIdList") List<Long> entityIdList);
	
	@Query("From UnlockingRequest unlockingRequest, UserRoleReturnMapping userRoleReturnMapping, Return return, ReturnLabel returnLabel, EntityBean entityBean, "
			+ " EntityLabelBean entityLabelBean, LanguageMaster langMaster, UserRole userRole where unlockingRequest.entity.entityId = entityBean.entityId and unlockingRequest.returns.returnId = return.returnId "
			+ " and userRoleReturnMapping.returnIdFk.returnId = return.returnId and userRoleReturnMapping.roleIdFk.userRoleId = userRole.userRoleId and unlockingRequest.returns.returnId = userRoleReturnMapping.returnIdFk.returnId "
			+ " and entityBean.entityId = entityLabelBean.entityBean.entityId and return.returnId = returnLabel.returnIdFk.returnId and entityLabelBean.languageMaster.languageId = langMaster.languageId and returnLabel.langIdFk.languageId = langMaster.languageId "
			+ " and userRoleReturnMapping.isActive = 1 and return.isActive = 1 and entityBean.isActive = 1 and langMaster.isActive = 1 and userRole.isActive = 1 and entityBean.entityCode =:entityCode and userRole.userRoleId =:roleId and langMaster.languageCode =:langCode "
			+ " order by unlockingRequest.unlockingReqId desc")
	List<UnlockingRequest> getDataByEntCodeAndLangCodeAndRoleId(@Param("entityCode") String entityCode, @Param("roleId") Long roleId, @Param("langCode") String langCode);

//	@Query(" From UnlockingRequest unlockingRequest, EntityBean entityBean, EntityLabelBean entityLabelBean, Return returns, ReturnLabel returnLabel, LanguageMaster languageMaster where "
//			+ " unlockingRequest.returns.returnId = returns.returnId and unlockingRequest.entity.entityId = entityBean.entityId and entityBean.entityId = entityLabelBean.entityBean.entityId and "
//			+ " returns.returnId = returnLabel.returnIdFk.returnId and returnLabel.langIdFk.languageId = languageMaster.languageId and entityLabelBean.languageMaster.languageId = languageMaster.languageId "
//			+ " and entityBean.isActive = 1 and returns.isActive = 1 and languageMaster.isActive = 1 and returns.returnId in :returnList and entityBean.entityId =:entityId and languageMaster.languageCode =:langCode"
//			+ " order by unlockingRequest.createdOn desc ")
//	List<UnlockingRequest> getUnlockRequestDataByLangCodeAndEntityId(@Param("returnList") List<Long> returnList, @Param("entityId") Long entityId, @Param("langCode") String langCode);

	@Query("From UnlockingRequest unlockRequest, ReturnRegulatorMapping retRegMap, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
			+ " EntityLabelBean entityLabelBean, LanguageMaster langMaster, AdminStatus adminStatus where retRegMap.returnIdFk.returnId = returns.returnId and "
			+ " unlockRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and unlockRequest.entity.entityId = entityBean.entityId  and unlockRequest.adminStatusIdFk = adminStatus.adminStatusId and  "
			+ " entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId "
			+ " and unlockRequest.returns.returnId = retRegMap.returnIdFk.returnId and retRegMap.returnIdFk.isActive = 1 and "
			+ " retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageCode =:langCode and "
			+ " unlockRequest.returns.returnId IN (:returnIds) and "
			+ " unlockRequest.entity.subCategory.subCategoryId = :subCategoryId and "
			+ " unlockRequest.entity.entityId in (:entityIdList) and "
			+ " adminStatus.adminStatusId in (:unlockStatusIdList) and"
			+ " unlockRequest.endDate between date(:startDate) and (:endDate) and "
			+ " returns.isActive = 1 and entityBean.isActive = 1 and retRegMap.isActive = 1 and unlockRequest.createdBy.userId != :userId order by unlockRequest.unlockingReqId asc")
	List<UnlockingRequest> getUnlockRequestDataByLangCodeAndEntityIdSubCatId(@Param("langCode") String langCode, @Param("regulatorId") Long regulatorId,
			@Param("userId") Long userId,@Param("returnIds") List<Long> returnIds ,@Param("entityIdList") List<Long> entityIdList,
			@Param("startDate") Date startDate, 
			@Param("endDate") Date endDate, @Param("subCategoryId") Long subCategoryId , @Param("unlockStatusIdList") List<Integer> unlockStatusIdList);
	
	@Query("From UnlockingRequest unlockRequest, ReturnRegulatorMapping retRegMap, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
			+ " EntityLabelBean entityLabelBean, LanguageMaster langMaster , AdminStatus adminStatus where retRegMap.returnIdFk.returnId = returns.returnId and "
			+ " unlockRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and unlockRequest.entity.entityId = entityBean.entityId and unlockRequest.adminStatusIdFk = adminStatus.adminStatusId and  "
			+ " entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId "
			+ " and unlockRequest.returns.returnId = retRegMap.returnIdFk.returnId and retRegMap.returnIdFk.isActive = 1 and "
			+ " retRegMap.regulatorIdFk.regulatorId =:regulatorId and langMaster.languageCode =:langCode and "
			+ " unlockRequest.returns.returnId IN (:returnIds) and "
			+ " unlockRequest.entity.entityId in (:entityIdList) and "
			+ " adminStatus.adminStatusId in (:unlockStatusIdList) and"
			+ " unlockRequest.endDate between date(:startDate) and (:endDate) and "
			+ " returns.isActive = 1 and entityBean.isActive = 1 and retRegMap.isActive = 1 and unlockRequest.createdBy.userId != :userId order by unlockRequest.unlockingReqId asc")
	List<UnlockingRequest> getUnlockRequestDataByLangCodeAndEntityId(@Param("langCode") String langCode, @Param("regulatorId") Long regulatorId,
			@Param("userId") Long userId,@Param("returnIds") List<Long> returnIds ,@Param("entityIdList") List<Long> entityIdList,
			@Param("startDate") Date startDate, 
			@Param("endDate") Date endDate , @Param("unlockStatusIdList") List<Integer> unlockStatusIdList);
	
	@Query("From UnlockingRequest unlockRequest, Return returns, ReturnLabel returnLabel, EntityBean entityBean, "
			+ " EntityLabelBean entityLabelBean, LanguageMaster langMaster where"
			+ " unlockRequest.returns.returnId = returns.returnId and returnLabel.langIdFk.languageId = langMaster.languageId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and unlockRequest.entity.entityId = entityBean.entityId and  "
			+ " entityBean.entityId = entityLabelBean.entityBean.entityId and entityLabelBean.languageMaster.languageId = langMaster.languageId "
			+ " and langMaster.languageCode =:langCode and "
			+ " unlockRequest.returns.returnId IN (:returnIds) and "
			+ " unlockRequest.entity.entityId in (:entityIdList) and "
			+ " unlockRequest.adminStatusIdFk =1 and"
			+ " returns.isActive = 1 and entityBean.isActive = 1 order by unlockRequest.unlockingReqId asc")
	List<UnlockingRequest> getUnlockRequestDataByLangCodeAndEntityId(@Param("langCode") String langCode,
			@Param("returnIds") List<Long> returnIds ,@Param("entityIdList") List<Long> entityIdList);
	
	
	@Query(" From UnlockingRequest unlockingRequest, EntityBean entityBean, EntityLabelBean entityLabelBean, Return returns, ReturnLabel returnLabel, LanguageMaster languageMaster where "
			+ " unlockingRequest.returns.returnId = returns.returnId and unlockingRequest.entity.entityId = entityBean.entityId and entityBean.entityId = entityLabelBean.entityBean.entityId and "
			+ " returns.returnId = returnLabel.returnIdFk.returnId and returnLabel.langIdFk.languageId = languageMaster.languageId and entityLabelBean.languageMaster.languageId = languageMaster.languageId "
			+ " and entityBean.isActive = 1 and returns.isActive = 1 and languageMaster.isActive = 1 and returns.returnId in :returnList and languageMaster.languageCode =:langCode"
			+ " order by unlockingRequest.createdOn desc ")
	List<UnlockingRequest> getUnlockRequestDataByLangCodeAndReturnIdList(@Param("returnList") List<Long> returnList,  @Param("langCode") String langCode);
	
	UnlockingRequest findByUnlockingReqId(Long unlockRequestId);
}