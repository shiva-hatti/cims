package com.iris.repository;

import java.util.Date;
import java.util.List;

import javax.persistence.LockModeType;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Lock;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.iris.model.FilingStatus;
import com.iris.model.ReturnsUploadDetails;

public interface ReturnUploadDetailsRepository extends JpaRepository<ReturnsUploadDetails, Long> {

	@Query("from ReturnsUploadDetails where returnObj.returnId =:returnId and entity.entityId =:entityId " + "and finYrFreqDesc.finYrFreqDescId =:finYrFrquencyDescId and startDate =:startDate and endDate =:endDate and filingStatus.filingStatusId in(1,5,10,9,11,22,27,16) ORDER BY UPLOADED_DATE DESC")
	List<ReturnsUploadDetails> getExistingUploadInfoByFileStatus(@Param("returnId") Long returnId, @Param("entityId") Long entityId, @Param("startDate") Date startDate, @Param("endDate") Date endDate, @Param("finYrFrquencyDescId") Long finYrFrquencyDescId);

	@Query("from ReturnsUploadDetails where returnObj.returnId =:returnId and entity.entityId =:entityId  and startDate =:startDate and endDate =:endDate ORDER BY UPLOADED_DATE DESC")
	List<ReturnsUploadDetails> getExistingUploadInfo(@Param("returnId") Long returnId, @Param("entityId") Long entityId, @Param("startDate") Date startDate, @Param("endDate") Date endDate);

	@Query("from ReturnsUploadDetails where fileDetailsBean.id =:filedetailsId ORDER BY UPLOADED_DATE DESC")
	List<ReturnsUploadDetails> getReturnUploadDetailsByFileDetailsId(@Param("filedetailsId") Long filedetailsId);

	@Query("from ReturnsUploadDetails where filingStatus.filingStatusId IN (:status) and upper(fileType) IN (:fileType) and returnObj.returnCode IN (:returnCodeList) ORDER BY uploadId asc")
	List<ReturnsUploadDetails> getReturnUploadDetailsRecordByStatus(@Param("status") List<Integer> statusIdList, @Param("fileType") List<String> fileTypeList, @Param("returnCodeList") List<String> returnCodeList, org.springframework.data.domain.Pageable pagebPageable);

	@Query("from ReturnsUploadDetails where filingStatus.filingStatusId IN (:status) and upper(fileType) IN (:fileType) ORDER BY uploadId asc")
	List<ReturnsUploadDetails> getReturnUploadDetailsRecordByStatus(@Param("status") List<Integer> statusIdList, @Param("fileType") List<String> fileTypeList, org.springframework.data.domain.Pageable pagebPageable);

	@Lock(LockModeType.PESSIMISTIC_WRITE)
	@Query("from ReturnsUploadDetails where filingStatus.filingStatusId IN(:status) and upper(fileType) IN (:fileType) and returnObj.returnCode IN (:returnCodeList) ORDER BY uploadId asc")
	List<ReturnsUploadDetails> getReturnUploadDetailsRecordByStatusForUpdate(@Param("status") List<Integer> statusIdList, @Param("fileType") List<String> fileTypeList, @Param("returnCodeList") List<String> returnCodeList, org.springframework.data.domain.Pageable pagebPageable);

	@Lock(LockModeType.PESSIMISTIC_WRITE)
	@Query("from ReturnsUploadDetails where filingStatus.filingStatusId IN(:status) and upper(fileType) IN (:fileType)  ORDER BY uploadId asc")
	List<ReturnsUploadDetails> getReturnUploadDetailsRecordByStatusForUpdate(@Param("status") List<Integer> statusIdList, @Param("fileType") List<String> fileTypeList, org.springframework.data.domain.Pageable pagebPageable);

	@Query("from ReturnsUploadDetails where uploadId =:uploadId and active ='1'")
	ReturnsUploadDetails getReturnUploadDetailsByUploadIdNActive(@Param("uploadId") Long uploadId);

	@Modifying
	@Query("update ReturnsUploadDetails det set det.filingStatus =:filingStatus, det.lastUpdatedOn =:date where uploadId IN (:uploadIds) ")
	int updateReturnUploadDetailsRecordStatus(@Param("uploadIds") long[] uploadIds, @Param("filingStatus") FilingStatus filingStatus, @Param("date") Date date);

	@Query("from ReturnsUploadDetails where uploadId IN (:uploadIdIn) and active ='1'")
	List<ReturnsUploadDetails> getReturnUploadDetailsByUploadIdInIsActiveTrue(@Param("uploadIdIn") Long[] uploadIdIn);

	@Query("from ReturnsUploadDetails where returnObj.returnId =:returnId and entity.entityId =:entityId  and startDate =:startDate and endDate =:endDate and filingStatus.filingStatusId NOT IN(:statusIds) ORDER BY UPLOADED_DATE DESC")
	List<ReturnsUploadDetails> getExistingUploadInfoWithNotInStatus(@Param("returnId") Long returnId, @Param("entityId") Long entityId, @Param("startDate") Date startDate, @Param("endDate") Date endDate, @Param("statusIds") List<Integer> statusIds);

	@Query("from ReturnsUploadDetails where returnObj.returnId =:returnId and entity.entityId =:entityId  and endDate =:endDate and filingStatus.filingStatusId NOT IN(:statusIds) ORDER BY UPLOADED_DATE DESC")
	List<ReturnsUploadDetails> getExistingUploadInfoData(@Param("returnId") Long returnId, @Param("entityId") Long entityId, @Param("endDate") Date endDate, @Param("statusIds") List<Integer> statusIds);

	@Query("from ReturnsUploadDetails where endDate =:endDate and returnObj.returnId =:returnId and returnPropertyValue.returnProprtyValId =:returnProprtyId and active ='1'")
	List<ReturnsUploadDetails> getReturnUploadDetailsByReturnId(@Param("endDate") Date endDate, @Param("returnId") Long returnId, @Param("returnProprtyId") Integer returnProprtyId);

	@Query("from ReturnsUploadDetails where endDate =:endDate and returnObj.returnId =:returnId and active ='1'")
	List<ReturnsUploadDetails> getReturnUploadDetailsByReturnIdWithoutProp(@Param("endDate") Date endDate, @Param("returnId") Long returnId);

	//Audited includes Null returnPropertyId
	@Query("from ReturnsUploadDetails RUD where RUD.entity.entityId IN (:entityIdList) and RUD.filingStatus.filingStatusId=8 " + " and (RUD.returnPropertyValue.returnProprtyValId IN(:conReturnPropertyIdList) OR RUD.returnPropertyValue.returnProprtyValId IS NULL) " + " and RUD.returnObj.returnId IN (:returnIdList) and RUD.entity.subCategory.subCategoryId IN (:subCategoryIdList) " + "  and RUD.entity.entityId IN (SELECT distinct(entity.entityId) FROM ReturnEntityMappingNew where returnObj.returnId IN (:returnIdList) " + "  and isActive = 1 and RUD.returnObj.returnId = returnObj.returnId and RUD.entity.entityId = entity.entityId) " + " and RUD.uploadId IN(Select max(uploadId) from ReturnsUploadDetails RUD2 where RUD2.returnObj.returnId IN (:returnIdList) and RUD2.entity.entityId IN (:entityIdList) " + " and RUD2.filingStatus.filingStatusId=8 and (RUD2.returnPropertyValue.returnProprtyValId IN(:conReturnPropertyIdList) OR RUD2.returnPropertyValue.returnProprtyValId IS NULL) " + " and date(RUD2.endDate) between date(:startDate) and date(:endDate) and RUD2.entity.subCategory.subCategoryId IN (:subCategoryIdList) " + "  and RUD2.entity.entityId IN (SELECT distinct(entity.entityId) FROM ReturnEntityMappingNew where returnObj.returnId IN (:returnIdList) " + "  and isActive = 1 and RUD2.returnObj.returnId = returnObj.returnId and RUD2.entity.entityId = entity.entityId) " + " group by RUD2.returnObj.returnId, RUD2.entity.entityId,RUD2.filingStatus.filingStatusId,RUD2.returnPropertyValue.returnProprtyValId,RUD2.endDate,RUD2.startDate,RUD2.entity.subCategory.subCategoryId) " + " and date(RUD.endDate) between date(:startDate) and date(:endDate) ORDER BY RUD.uploadedDate,RUD.frequency.frequencyId DESC")
	List<ReturnsUploadDetails> getSubmitedDataEntityWiseAudited(List<Long> returnIdList, @Param("entityIdList") List<Long> entityIdList, @Param("startDate") Date startDate, @Param("endDate") Date endDate, @Param("subCategoryIdList") List<Long> subCategoryIdList, @Param("conReturnPropertyIdList") List<Integer> conReturnPropertyIdList);

	//UnAudited does not include Null returnPropertyId
	@Query("from ReturnsUploadDetails RUD where RUD.entity.entityId IN (:entityIdList) and RUD.filingStatus.filingStatusId=8 " + " and (RUD.returnPropertyValue.returnProprtyValId IN(:conReturnPropertyIdList)) " + " and RUD.returnObj.returnId IN (:returnIdList) and RUD.entity.subCategory.subCategoryId IN (:subCategoryIdList) " + "  and RUD.entity.entityId IN (SELECT distinct(entity.entityId) FROM ReturnEntityMappingNew where returnObj.returnId IN (:returnIdList) " + "  and isActive = 1 and RUD.returnObj.returnId = returnObj.returnId and RUD.entity.entityId = entity.entityId) " + " and RUD.uploadId IN(Select max(uploadId) from ReturnsUploadDetails RUD2 where RUD2.returnObj.returnId IN (:returnIdList) and RUD2.entity.entityId IN (:entityIdList) " + " and RUD2.filingStatus.filingStatusId=8 and (RUD2.returnPropertyValue.returnProprtyValId IN(:conReturnPropertyIdList)) " + " and date(RUD2.endDate) between date(:startDate) and date(:endDate) and RUD2.entity.subCategory.subCategoryId IN (:subCategoryIdList) " + "  and RUD2.entity.entityId IN (SELECT distinct(entity.entityId) FROM ReturnEntityMappingNew where returnObj.returnId IN (:returnIdList) " + "  and isActive = 1 and RUD2.returnObj.returnId = returnObj.returnId and RUD2.entity.entityId = entity.entityId) " + " group by RUD2.returnObj.returnId, RUD2.entity.entityId,RUD2.filingStatus.filingStatusId,RUD2.returnPropertyValue.returnProprtyValId,RUD2.endDate,RUD2.startDate,RUD2.entity.subCategory.subCategoryId) " + " and date(RUD.endDate) between date(:startDate) and date(:endDate) ORDER BY RUD.uploadedDate,RUD.frequency.frequencyId DESC")
	List<ReturnsUploadDetails> getSubmitedDataEntityWiseUnAudited(List<Long> returnIdList, @Param("entityIdList") List<Long> entityIdList, @Param("startDate") Date startDate, @Param("endDate") Date endDate, @Param("subCategoryIdList") List<Long> subCategoryIdList, @Param("conReturnPropertyIdList") List<Integer> conReturnPropertyIdList);

	@Query("from ReturnsUploadDetails where entity.entityId IN (:entityIdList) and filingStatus.filingStatusId =8 and (returnPropertyValue.returnProprtyValId IN(1,4,2,3) OR returnPropertyValue.returnProprtyValId IS NULL) and returnObj.returnId IN (:returnIdList) " + "and frequency.frequencyId =:finYrFrquencyDescId "
	//+ "and uploadedDate IN(Select MAX(uploadedDate) from ReturnsUploadDetails where returnObj.returnId IN (:returnIdList) and entity.entityId =:entityId "
	//+ "and filingStatus.filingStatusId=8 and (returnPropertyValue.returnProprtyValId IN(1,4,2,3) OR returnPropertyValue.returnProprtyValId IS NULL) and frequency.frequencyId =:finYrFrquencyDescId and endDate IN (:endDateList) group by RETURN_ID_FK, ENTITY_ID_FK) "
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	+ "and date(endDate) IN (:endDateList) ORDER BY UPLOADED_DATE DESC")
	List<ReturnsUploadDetails> getSubmitedDataEntityWiseForPending(List<Long> returnIdList, @Param("entityIdList") List<Long> entityIdList, @Param("endDateList") List<Date> endDateList, @Param("finYrFrquencyDescId") Long finYrFrquencyDescId);

	//Audited includes Null returnPropertyId
	@Query("from ReturnsUploadDetails RUD where RUD.entity.entityId IN (:entityIdList) and RUD.filingStatus.filingStatusId=8 " + " and (RUD.returnPropertyValue.returnProprtyValId IN(:conReturnPropertyIdList) OR RUD.returnPropertyValue.returnProprtyValId IS NULL) " + " and RUD.returnObj.returnId IN (:returnIdList) " + "  and RUD.returnObj.returnId IN (SELECT distinct(returnObj.returnId) FROM ReturnEntityMappingNew where entity.entityId IN (:entityIdList) " + "  and isActive = 1 and RUD.returnObj.returnId = returnObj.returnId and RUD.entity.entityId = entity.entityId) " + " and RUD.uploadId IN(Select max(uploadId) from ReturnsUploadDetails RUD2 where RUD2.returnObj.returnId IN (:returnIdList) and RUD2.entity.entityId IN (:entityIdList) " + " and RUD2.filingStatus.filingStatusId=8 and (RUD2.returnPropertyValue.returnProprtyValId IN(:conReturnPropertyIdList) OR RUD2.returnPropertyValue.returnProprtyValId IS NULL) " + " and date(RUD2.endDate) between date(:startDate) and date(:endDate) " + "  and RUD2.returnObj.returnId IN (SELECT distinct(returnObj.returnId) FROM ReturnEntityMappingNew where entity.entityId IN (:entityIdList) " + "  and isActive = 1 and RUD2.returnObj.returnId = returnObj.returnId and RUD2.entity.entityId = entity.entityId) " + " group by RUD2.returnObj.returnId, RUD2.entity.entityId,RUD2.filingStatus.filingStatusId,RUD2.returnPropertyValue.returnProprtyValId,RUD2.endDate,RUD2.startDate) " + " and date(RUD.endDate) between date(:startDate) and date(:endDate) ORDER BY RUD.uploadedDate,RUD.frequency.frequencyId DESC")
	List<ReturnsUploadDetails> getSubmitedDataReturnWiseAudited(List<Long> returnIdList, @Param("entityIdList") List<Long> entityIdList, @Param("startDate") Date startDate, @Param("endDate") Date endDate, @Param("conReturnPropertyIdList") List<Integer> conReturnPropertyIdList);

	//Audited includes Null returnPropertyId
	@Query("from ReturnsUploadDetails RUD where RUD.entity.entityId IN (:entityIdList) and RUD.filingStatus.filingStatusId=8 " + " and RUD.returnPropertyValue.returnProprtyValId IN(:conReturnPropertyIdList) " + " and RUD.returnObj.returnId IN (:returnIdList) " + "  and RUD.returnObj.returnId IN (SELECT distinct(returnObj.returnId) FROM ReturnEntityMappingNew where entity.entityId IN (:entityIdList) " + "  and isActive = 1 and RUD.returnObj.returnId = returnObj.returnId and RUD.entity.entityId = entity.entityId) " + " and RUD.uploadId IN(Select max(uploadId) from ReturnsUploadDetails RUD2 where RUD2.returnObj.returnId IN (:returnIdList) and RUD2.entity.entityId IN (:entityIdList) " + " and RUD2.filingStatus.filingStatusId=8 and RUD2.returnPropertyValue.returnProprtyValId IN(:conReturnPropertyIdList) " + " and date(RUD2.endDate) between date(:startDate) and date(:endDate) " + "  and RUD2.returnObj.returnId IN (SELECT distinct(returnObj.returnId) FROM ReturnEntityMappingNew where entity.entityId IN (:entityIdList) " + "  and isActive = 1 and RUD2.returnObj.returnId = returnObj.returnId and RUD2.entity.entityId = entity.entityId) " + " group by RUD2.returnObj.returnId, RUD2.entity.entityId,RUD2.filingStatus.filingStatusId,RUD2.returnPropertyValue.returnProprtyValId,RUD2.endDate,RUD2.startDate) " + " and date(RUD.endDate) between date(:startDate) and date(:endDate) ORDER BY RUD.uploadedDate,RUD.frequency.frequencyId DESC")
	List<ReturnsUploadDetails> getSubmitedDataReturnWiseUnAudited(List<Long> returnIdList, @Param("entityIdList") List<Long> entityIdList, @Param("startDate") Date startDate, @Param("endDate") Date endDate, @Param("conReturnPropertyIdList") List<Integer> conReturnPropertyIdList);

	@Query("from ReturnsUploadDetails where entity.entityId IN (:entityIdList) and filingStatus.filingStatusId=8 and returnObj.returnId IN (:returnIdList) "
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	//+ "and  uploadedDate IN(Select MAX(uploadedDate) from ReturnsUploadDetails where returnObj.returnId IN (:returnIdList) and entity.entityId IN (:entityIdList) "
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	//+ "and filingStatus.filingStatusId=8 and (returnPropertyValue.returnProprtyValId IN(1,4,2,3) OR returnPropertyValue.returnProprtyValId IS NULL) and endDate IN (:endDateList) group by RETURN_ID_FK, ENTITY_ID_FK) "
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	+ "and date(endDate) IN (:endDateList)  ORDER BY UPLOADED_DATE DESC")
	List<ReturnsUploadDetails> getSubmitedDataReturnWiseForPending(@Param("entityIdList") List<Long> entityIdList, @Param("returnIdList") List<Long> returnIdList, @Param("endDateList") List<Date> endDateList);

	@Query(value = "from ReturnsUploadDetails uploadDtl, ETLAuditLog etlLog where ((uploadDtl.filingStatus.filingStatusId = 6 and etlLog.status= 5 ) or (uploadDtl.filingStatus.filingStatusId = 12 and etlLog.status= 5 ))" + " and uploadDtl.active = 1 and uploadDtl.uploadId = etlLog.returnUploadDetails.uploadId and etlLog.returnUploadDetails.uploadId not in " + " (select distinct(appDet.returnUploadDetails.uploadId) from ReturnApprovalDetail appDet)")
	List<ReturnsUploadDetails> getPendingWorkFlowRecordsAfterETLProcess();

	@Modifying
	@Query(value = "select rd.UPLOAD_ID from TBL_RETURNS_UPLOAD_DETAILS rd, TBL_ETL_AUDIT_LOG etl left join TBL_RETURN_APPROVAL_DTL det " + "on det.RETURN_UPLOAD_ID_FK = etl.UPLOAD_ID_FK where etl.UPLOAD_ID_FK = rd.UPLOAD_ID " + "and etl.STATUS in (2, 4) and rd.FILING_STATUS_ID_FK = 6 and det.RETURN_APPROVAL_ID_FK is null", nativeQuery = true)
	List<Long> getETLFailedRecord();

	@Modifying
	@Query(value = "UPDATE TBL_RETURNS_UPLOAD_DETAILS set FILING_STATUS_ID_FK = 12 where UPLOAD_ID in (:uploadIds)", nativeQuery = true)
	int updateFilingStatusOfETLFailedRecord(List<Long> uploadIds);

	@Query("FROM ReturnsUploadDetails where  returnObj.returnGroupMapIdFk.returnGroupMapId = :returnGroupMapId and endDate = :reportDate and returnPropertyValue.returnProprtyValId IN(:auditStatusList)")
	List<ReturnsUploadDetails> fetchReturnUploadDetails(@Param("returnGroupMapId") Long returnGroupMapId, @Param("reportDate") Date reportDate, @Param("auditStatusList") List<Integer> auditStatusList);

	@Query(value = "SELECT * FROM TBL_RETURNS_UPLOAD_DETAILS where RETURN_ID_FK=:returnId and ENTITY_ID_FK=:entityId and UPLOAD_ID " + "IN (select max(UPLOAD_ID_FK) from TBL_ETL_AUDIT_LOG where STATUS = 5 and UPLOAD_ID_FK IN (select UPLOAD_ID from TBL_RETURNS_UPLOAD_DETAILS " + "where RETURN_ID_FK=:returnId and ENTITY_ID_FK=:entityId and START_DATE=:startDate and END_DATE=:endDate))", nativeQuery = true)

	/*@Query(value = "SELECT * FROM TBL_RETURNS_UPLOAD_DETAILS where RETURN_ID_FK=:returnId and ENTITY_ID_FK=:entityId and UPLOADED_DATE " + 
	"IN (select max(UPLOADED_DATE) from TBL_RETURNS_UPLOAD_DETAILS where RETURN_ID_FK=:returnId and ENTITY_ID_FK=:entityId " + 
	"and START_DATE=:startDate and END_DATE=:endDate) order by UPLOADED_DATE desc", nativeQuery = true)*/
	List<ReturnsUploadDetails> getFilingReturnEntityWise(@Param("returnId") Long returnId, @Param("entityId") Long entityId, @Param("startDate") Date startDate, @Param("endDate") Date endDate);

	@Query(value = "SELECT UPLOAD_ID FROM TBL_RETURNS_UPLOAD_DETAILS where SDMX_EBR_RBR_PREP_ID_FK =:sdmxId order by UPLOAD_ID desc LIMIT 1", nativeQuery = true)
	Integer getUploadIdForSDMXId(Long sdmxId);

	@Query("from ReturnsUploadDetails where uploadId=:uploadId and entity.entityCode=:entityCode")
	ReturnsUploadDetails findByEntityCodeUploadId(@Param("uploadId") Long uploadId, @Param("entityCode") String entityCode);
}