package com.iris.dynamicDropDown.controller;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;

import org.apache.commons.lang.NullArgumentException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.iris.caching.ObjectCache;
import com.iris.controller.ConceptTypedDomain;
import com.iris.dateutility.util.DateManip;
import com.iris.dto.ApiDetails;
import com.iris.dto.Option;
import com.iris.dto.Options;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.dynamicDropDown.model.DropDownType;
import com.iris.dynamicDropDown.model.DropDownValues;
import com.iris.dynamicDropDown.repo.ConceptTypeDomainRepo;
import com.iris.dynamicDropDown.repo.DynamicDropDownRepo;
import com.iris.dynamicDropDown.repo.DynamicDropDownTypeRepo;
import com.iris.model.CountryMaster;
import com.iris.model.Currency;
import com.iris.model.CurrencyLabel;
import com.iris.model.EntityBean;
import com.iris.model.Return;
import com.iris.repository.EntityRepo;
import com.iris.repository.ReturnRepo;
import com.iris.service.impl.CountryMasterService;
import com.iris.service.impl.CurrencyMasterService;
import com.iris.util.UtilMaster;
import com.iris.util.Validations;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.GeneralConstants;


/**
 * @author BHAVANA
 *
 */
@RestController
@RequestMapping("/service")
public class DynaDropDownController {
	private static final Logger Logger = LogManager.getLogger(DynaDropDownController.class);
	@Autowired
	private DynamicDropDownRepo dynamicDropDownRepo;
	@Autowired
	private ConceptTypeDomainRepo axisManagerRepo;
	
	@Autowired
	private ReturnRepo returnRepo;
	@Autowired
	private EntityRepo entityRepo;
	@Autowired
	private CurrencyMasterService currencyMasterService;
	@Autowired
	private CountryMasterService countryMasterService;
	//@Autowired
	//private NbfcClassificationRepo nbfcClassificationRepo;
	@Autowired
	private DynamicDropDownTypeRepo dynamicDropDownTypeRepo;
	
	@SuppressWarnings("null")
	@PostMapping("/getDynamicDropDownValue/{dropDownType}/{returnCode}")
	public ServiceResponse getDynamicDropDownValue(@PathVariable("dropDownType") String dropDownType, @PathVariable("returnCode") String returnCode) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(dropDownType)) {
				Logger.error("Exception while fetching Dynamic drop down, if lang code or dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			List<DropDownValues> dropDownValuesList = null;
			Options options = new Options();
			if (Validations.isEmpty(returnCode) || returnCode.equalsIgnoreCase("null")) {
				dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownType(dropDownType);
				options.setReturnCode(null);
			} else {
				dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownTypeAndReturnCode(dropDownType, returnCode.toUpperCase());
				options.setReturnCode(returnCode);
			}
			if (CollectionUtils.isEmpty(dropDownValuesList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			Option option;
			List<Option> listOfOption = new ArrayList<>();
			for (DropDownValues dropDownValues : dropDownValuesList) {
				option = new Option();
				option.setKey(dropDownValues.getDropDownValueCode());
				option.setValue(dropDownValues.getDropDownValueEn());
				
				listOfOption.add(option);
			}

		
			options.setDropDownTypeCode(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeCode());
			options.setDropDownTypeName(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeName());
			
			options.setOptionList(listOfOption);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}
	
	@SuppressWarnings("null")
	@PostMapping("/getDynamicDropDownValue/{dropDownType}/{returnCode}/{detail}")
	public ServiceResponse getDynamicDropDownValueWithDetail(@PathVariable("dropDownType") String dropDownType, @PathVariable("returnCode") String returnCode, @PathVariable("detail") String detail) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(dropDownType) || Validations.isEmpty(detail)) {
				Logger.error("Exception while fetching Dynamic drop down, if lang code or dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			List<DropDownValues> dropDownValuesList = null;
			Options options = new Options();
			if (Validations.isEmpty(returnCode) || returnCode.equalsIgnoreCase("null")) {
				dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownType(dropDownType);
				options.setReturnCode(null);
			} else {
				dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownTypeAndReturnCodeAndDetails(dropDownType, returnCode.toUpperCase(), detail);
				options.setReturnCode(returnCode);
			}
			if (CollectionUtils.isEmpty(dropDownValuesList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			Option option;
			List<Option> listOfOption = new ArrayList<>();
			for (DropDownValues dropDownValues : dropDownValuesList) {
				option = new Option();
				option.setKey(dropDownValues.getDropDownValueCode());
				option.setValue(dropDownValues.getDropDownValueEn());
				
				listOfOption.add(option);
			}

		
			options.setDropDownTypeCode(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeCode());
			options.setDropDownTypeName(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeName());
			
			options.setOptionList(listOfOption);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}
	
	@PostMapping("/getDropDownUponEffectiveDate/{dropDownType}/{effectiveDate}")
	public ServiceResponse getDropDownUponEffectiveDate(@PathVariable("dropDownType") String dropDownType, @PathVariable("effectiveDate") String effectiveDate) throws ParseException {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(dropDownType)) {
				Logger.error("Exception while fetching Dynamic drop down, if lang code or dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			Options options = new Options();
			Date startDate = DateManip.convertStringToDate(effectiveDate, "ddMMyyyy");
			DropDownValues dropDownValues = dynamicDropDownRepo.findByDropDownTypeUponEffFromDate(dropDownType, startDate);
			if (dropDownValues == null) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			Option option;
			List<Option> listOfOption = new ArrayList<>();
			option = new Option();
			option.setKey(dropDownValues.getDropDownValueCode());
			option.setValue(dropDownValues.getDropDownValueEn());
			listOfOption.add(option);
			options.setDropDownTypeCode(dropDownValues.getDropDownTypeIdFk().getDropdownTypeCode());
			options.setDropDownTypeName(dropDownValues.getDropDownTypeIdFk().getDropdownTypeName());
			
			options.setOptionList(listOfOption);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}

	@SuppressWarnings("null")
	@PostMapping("/geSubDropDownOption/{dropDownType}/{dropDownTypeValueCode}/{returnCode}")
	public ServiceResponse geSubDropDownOption(@PathVariable("dropDownType") String dropDownType,@PathVariable("dropDownTypeValueCode") String dropDownTypeValueCode, @PathVariable("returnCode") String returnCode) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(dropDownType)) {
				Logger.error("Exception while fetching Dynamic drop down, dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			if (Validations.isEmpty(dropDownTypeValueCode)) {
				Logger.error("Exception while fetching Dynamic drop down, if lang code or dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			DropDownValues dropDownValues = dynamicDropDownRepo.findByActiveUponDropDownValueCode(dropDownTypeValueCode);
			if(dropDownValues == null) {
				Logger.error("Exception while fetching Dynamic drop down, if dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			List<DropDownValues> dropDownValuesList = null;
			Options options = new Options();
			if (Validations.isEmpty(returnCode) || returnCode.equalsIgnoreCase("null")) {
				dropDownValuesList = dynamicDropDownRepo.findByActiveUponDropDownTypeValue(dropDownType, dropDownValues.getDropDownValueId());
				options.setReturnCode(null);
			} else {
				dropDownValuesList = dynamicDropDownRepo.findByActiveUponDropDownTypeValueAndReturnCode(dropDownType, returnCode.toUpperCase(), dropDownValues.getDropDownValueId());
				options.setReturnCode(returnCode);
			}
			if (CollectionUtils.isEmpty(dropDownValuesList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			Option option;
			List<Option> listOfOption = new ArrayList<>();
			for (DropDownValues dropDownOptions : dropDownValuesList) {
				option = new Option();
				option.setKey(dropDownOptions.getDropDownValueCode());
				option.setValue(dropDownOptions.getDropDownValueEn());
				
				listOfOption.add(option);
			}

		
			options.setDropDownTypeCode(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeCode());
			options.setDropDownTypeName(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeName());
			
			options.setOptionList(listOfOption);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}

	
	@SuppressWarnings("null")
	@PostMapping("/getDropDownValueUponeReturnCode_OLD/{returnCode}")
	public ServiceResponse getDropDownValueUponeReturnCode_OLD(@PathVariable("returnCode") String returnCode) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(returnCode)) {
				Logger.error("Exception while fetching Dynamic drop down, if returnCode is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			List<DropDownValues> dropDownValuesList = null;
			
			dropDownValuesList = dynamicDropDownRepo.findDropDownOptionReturnCode(returnCode.toUpperCase());
			
			if (CollectionUtils.isEmpty(dropDownValuesList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0134.toString())).build();
			}
			Return returnObj = returnRepo.findByReturnCode(returnCode);
			if(returnObj == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0134.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0134.toString())).build();
			}
			
			List<Long> dropdownTypeIdList = new ArrayList<>();
			for (DropDownValues dropDownValues : dropDownValuesList) {
				if(!dropdownTypeIdList.contains(dropDownValues.getDropDownTypeIdFk().getDropdownTypeId())) {
					dropdownTypeIdList.add(dropDownValues.getDropDownTypeIdFk().getDropdownTypeId());
				} 
			}
		
			
			List<ConceptTypedDomain> axisManagerList =  axisManagerRepo.findByActiveWithDropDownTypeId(dropdownTypeIdList, returnObj.getReturnId());
			Option option;
			
			Options options = null;
			List<Option> optionList = null;
			List<Options> dropDownOptionBeanList = new ArrayList<>();
						
			for(Long dropDownTypeId : dropdownTypeIdList) {
				options = new Options();
				optionList = new ArrayList<>();
				for(DropDownValues dropDownValues : dropDownValuesList) {
					if(dropDownTypeId.equals(dropDownValues.getDropDownTypeIdFk().getDropdownTypeId())) {
						option = new Option();
						option.setKey(dropDownValues.getDropDownValueCode());
						option.setValue(dropDownValues.getDropDownValueEn());
						optionList.add(option);
						options.setDropDownTypeCode(dropDownValues.getDropDownTypeIdFk().getDropdownTypeCode());
						options.setDropDownTypeName(dropDownValues.getDropDownTypeIdFk().getDropdownTypeName());
						options.setReturnCode(returnCode);
					}
				}
			
				if (!CollectionUtils.isEmpty(axisManagerList)) {
					for(ConceptTypedDomain axisMngt : axisManagerList) {
						if(axisMngt.getDropDownTypeIdFk().getDropdownTypeId().equals(dropDownTypeId)) {
							options.setConcept(axisMngt.getConcept());
							options.setTypeDomain(axisMngt.getTypedDomain());
						}
					}	
				}
				options.setOptionList(optionList);
				dropDownOptionBeanList.add(options);
			}
			
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(dropDownOptionBeanList);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}
	
	
	@SuppressWarnings("null")
	@PostMapping("/getDropDownValueUponeReturnCode/{returnCode}")
	public ServiceResponse getDropDownValueUponeReturnCode(@PathVariable("returnCode") String returnCode) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(returnCode)) {
				Logger.error("Exception while fetching Dynamic drop down, if returnCode is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
			
			List<DropDownType> dropDownList = dynamicDropDownTypeRepo.findDropDownTypebyReturnCode(returnCode.toUpperCase());
			
			if (CollectionUtils.isEmpty(dropDownList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0134.toString())).build();
			}
			Return returnObj = returnRepo.findByReturnCode(returnCode);
			if(returnObj == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0134.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0134.toString())).build();
			}
			
			Option option;
			Gson gson = new Gson();
			Options options = null;
			List<Option> optionList = null;
			List<Options> dropDownOptionBeanList = new ArrayList<>();
			List<Long> dropdownTypeIdList = new ArrayList<>();
			List<ConceptTypedDomain> conceptDomainList = new ArrayList<>();
			for (DropDownType dropDownType : dropDownList) {
				options = new Options();
				optionList = new ArrayList<>();
				if(!dropDownType.isFormAPI()) {
					dropdownTypeIdList = new ArrayList<>();
					dropdownTypeIdList.add(dropDownType.getDropdownTypeId());
					
					List<DropDownValues>  dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownTypeAndReturnCode(dropDownType.getDropdownTypeCode(),returnCode.toUpperCase());
					
					conceptDomainList =  axisManagerRepo.findByActiveWithDropDownTypeId(dropdownTypeIdList, returnObj.getReturnId());
					for(DropDownValues dropDownValues : dropDownValuesList) {
						option = new Option();
						option.setKey(dropDownValues.getDropDownValueCode());
						option.setValue(dropDownValues.getDropDownValueEn());
						optionList.add(option);
						options.setDropDownTypeCode(dropDownValues.getDropDownTypeIdFk().getDropdownTypeCode());
						options.setDropDownTypeName(dropDownValues.getDropDownTypeIdFk().getDropdownTypeName());
						options.setReturnCode(returnCode);
					}
				
					if (!CollectionUtils.isEmpty(conceptDomainList)) {
						for(ConceptTypedDomain conMngt : conceptDomainList) {
							options.setConcept(conMngt.getConcept());
							options.setTypeDomain(conMngt.getTypedDomain());
							options.setExplicitMember(conMngt.getExplicitMember());
						}	
					}
					options.setOptionList(optionList);
					dropDownOptionBeanList.add(options);
				} else {
					dropdownTypeIdList = new ArrayList<>();
					options.setDropDownTypeCode(dropDownType.getDropdownTypeCode());
					options.setDropDownTypeName(dropDownType.getDropdownTypeName());
					options.setReturnCode(returnCode);
					dropdownTypeIdList.add(dropDownType.getDropdownTypeId());
					conceptDomainList =  axisManagerRepo.findByActiveWithDropDownTypeId(dropdownTypeIdList, returnObj.getReturnId());
					if (!CollectionUtils.isEmpty(conceptDomainList)) {
						for(ConceptTypedDomain conMngt : conceptDomainList) {
							if(!UtilMaster.isEmpty(conMngt.getConcept())) {
								options.setConcept(conMngt.getConcept());
							} else {
								options.setConcept(null);
							}
							if(!conMngt.getTypedDomain().isEmpty()) {
								options.setTypeDomain(conMngt.getTypedDomain());
							} else {
								options.setConcept(null);
							}
						
							if(!conMngt.getApiUrlDetails().isEmpty()) {
								ApiDetails apiDetails = new Gson().fromJson(conMngt.getApiUrlDetails(), ApiDetails.class);
								options.setApiDetails(apiDetails);
							} else {
								options.setConcept(null);
							}
						}	
					}
					options.setOptionList(null);
					dropDownOptionBeanList.add(options);
				}
				
			}
			
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(dropDownOptionBeanList);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}
	
	
	
	@PostMapping("/getAllActiveEntity")
	public ServiceResponse getAllActiveEntity() {
		ServiceResponse response = null;
		try {
			Options options = new Options();
			List<EntityBean> entityList = entityRepo.findAll(Sort.by(Sort.Direction.ASC, "entityName"));

			if (CollectionUtils.isEmpty(entityList)) {
				Logger.error("Exception while fetching Dynamic entityList drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			sortApprovalList(entityList);
			Option option;
			List<Option> listOfOption = new ArrayList<>();
			
			for (EntityBean entityBean : entityList) {
				option = new Option();
				option.setKey(entityBean.getEntityCode());
				option.setValue(entityBean.getEntityName());
				
				listOfOption.add(option);
			}
			
			options.setOptionList(listOfOption);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}
	
	private void sortApprovalList(List<EntityBean> appStatusList) {
		if (appStatusList != null) {
			Collections.sort(appStatusList, new Comparator<EntityBean>() {
				public int compare(EntityBean entList1, EntityBean entList2) {
					return entList1.getEntityName().compareTo(entList1.getEntityName());
				}
			});
		}
	}
	
	@SuppressWarnings("null")
	@PostMapping("/fetchCurrencyUponLangCode/{LANG_CODE}")
	public ServiceResponse fetchCurrencyUponLangCode(@PathVariable("LANG_CODE") String langCode) {
		Logger.info("fetch currency data for dropdown started");
		ServiceResponse response = null;
		try {
			Option option = null;
			Options options = null;
			List<Option> optionList = null;
			optionList = new ArrayList<>();
			List<Currency> listOfActiveCurrencyData = currencyMasterService.getActiveDataFor(Currency.class, null);
			options = new Options();
			if(CollectionUtils.isEmpty(listOfActiveCurrencyData)) {
				Logger.error("Exception while fetching Dynamic drop down, if Currency list not found");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			
					
			for (Currency currency : listOfActiveCurrencyData) {
				option = new Option();
				option.setKey(currency.getCurrencyISOCode());
				CurrencyLabel currencyLabel = currency.getCurrLblSet().stream().filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(langCode)).findAny().orElse(null);
				if(currencyLabel != null) {
					option.setValue(currencyLabel.getCurrencyLabel());
				} else {
					option.setValue(currency.getCurrencyName());
				}
				optionList.add(option);
			}
			if(!CollectionUtils.isEmpty(optionList)) {
				options.setOptionList(optionList);
			}
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down, if Currency list not found");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}
	@PostMapping(value = "/fetchActiveCountryData/{languageCode}")
	public ServiceResponse fetchActiveCountryData(@PathVariable String languageCode) {
		Logger.info("fetch country data controller started " + languageCode);
		ServiceResponse serviceResponse = null;
		Option option = null;
		Options options = null;
		List<Option> optionList = null;
		List<CountryMaster> listOfActiveCountryData = null;
		if (languageCode != null) {

			listOfActiveCountryData = new ArrayList<>();
			optionList = new ArrayList<>();
			options = new Options();
			listOfActiveCountryData = countryMasterService.getActiveDataFor(CountryMaster.class, null);

			for (CountryMaster countryMaster : listOfActiveCountryData) {
				option = new Option();
				if (languageCode.equals(GeneralConstants.ENG_LANG.getConstantVal())) {
					option.setKey(countryMaster.getCountryCode());
					option.setValue(countryMaster.getCountryName().toUpperCase());
				} else if (languageCode.equals(GeneralConstants.HIN_LANG.getConstantVal())) {
					option.setKey(countryMaster.getCountryCode());
					option.setValue(countryMaster.getCountryNameBil().toUpperCase());
				}
				optionList.add(option);
			}
			options.setOptionList(optionList);
			serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			serviceResponse.setResponse(options);
			
		}
		return serviceResponse;
	}
	
	@SuppressWarnings("null")
	@PostMapping("/geDropDownWithClassification/{dropDownType}/{returnCode}")
	public ServiceResponse geDropDownWithClassification(@PathVariable("dropDownType") String dropDownType, @PathVariable("returnCode") String returnCode) {
		ServiceResponse response = null;
		try {
			if (Validations.isEmpty(dropDownType)) {
				Logger.error("Exception while fetching Dynamic drop down, dropdowntype is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}
			List<DropDownValues> dropDownValuesList = null;
			Options options = new Options();
			if (Validations.isEmpty(returnCode) || returnCode.equalsIgnoreCase("null")) {
				dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownType(dropDownType);
				options.setReturnCode(null);
			} else {
				dropDownValuesList = dynamicDropDownRepo.findByActiveWithDropDownTypeAndReturnCode(dropDownType, returnCode.toUpperCase());
				options.setReturnCode(returnCode);
			}
			if (CollectionUtils.isEmpty(dropDownValuesList)) {
				Logger.error("Exception while fetching Dynamic drop down, if drop down type list is empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}
			Option option;
			List<Option> listOfOption = new ArrayList<>();
			for (DropDownValues dropDownValues : dropDownValuesList) {
				option = new Option();
				option.setKey(dropDownValues.getDropDownValueCode());
				option.setValue(dropDownValues.getDropDownValueEn().toUpperCase() +"~"+ dropDownValues.getDropDownTypeValueIdFk().getDropDownValueEn().toUpperCase());
				
				listOfOption.add(option);
			}

		
			options.setDropDownTypeCode(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeCode());
			options.setDropDownTypeName(dropDownValuesList.get(0).getDropDownTypeIdFk().getDropdownTypeName());
			
			options.setOptionList(listOfOption);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (NullArgumentException nae) {
			Logger.error("Exception while fetching Dynamic drop down With lang code dropdownType");
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
	
		}
	}
}
