package com.iris.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.iris.dateutility.enums.DateConstants;
import com.iris.dateutility.util.DateManip;
import com.iris.exception.ServiceException;
import com.iris.model.FilingStatus;
import com.iris.model.ReturnProperty;
import com.iris.model.ReturnsUploadDetails;
import com.iris.repository.FilingStatusRepo;
import com.iris.repository.ReturnUploadDetailsRepository;
import com.iris.service.GenericService;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.MethodConstants;

@Service
public class ReturnUploadDetailsService implements GenericService<ReturnsUploadDetails, Long> {

	@Autowired
	private ReturnUploadDetailsRepository returnUploadDetailsRepository;
	
	@Autowired
	private FilingStatusRepo filingStatusRepo;
	
	static final Logger LOGGER = LogManager.getLogger(ReturnUploadDetailsService.class);

	
	@Override
	public ReturnsUploadDetails add(ReturnsUploadDetails entity) throws ServiceException {
		return returnUploadDetailsRepository.save(entity);
	}

	@Override
	public boolean update(ReturnsUploadDetails entity) throws ServiceException {
		return false;
	}

	@Override
	public List<ReturnsUploadDetails> getDataByIds(Long[] ids) throws ServiceException {
		try {
			return returnUploadDetailsRepository.getReturnUploadDetailsByUploadIdInIsActiveTrue(ids);
		}catch(Exception e) {
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
	}
	@Override
	public List<ReturnsUploadDetails> getDataByColumnValue(Map<String, List<String>> columnValueMap, String methodName)
			throws ServiceException {
		try {
			List<String> entityIds  = null;
			List<String> returnIds  = null;
			List<String> finYearFreqDescIds  = null;
			List<Integer> statusIds  = null;
			Date startDate = null;
			Date endDate = null;
			String filedetailsId = null;
			List<String> returnIdList  = null;
			List<String> entityIdList  = null;
			List<Long> conRetIdList  = new ArrayList<>();
			List<Long> conEntIdList  = new ArrayList<>();
			
			
			for (String columnName : columnValueMap.keySet()) {
				if(columnValueMap.get(columnName)!= null && columnValueMap.get(columnName).size() > 0) {
					if(columnName.equalsIgnoreCase(ColumnConstants.ENTITYID.getConstantVal())) {
						entityIds = columnValueMap.get(columnName);
					} else if(columnName.equalsIgnoreCase(ColumnConstants.RETURNID.getConstantVal())) {
						returnIds = columnValueMap.get(columnName);
					} else if(columnName.equalsIgnoreCase(ColumnConstants.FIN_YEAR_FREQ_DESC_ID.getConstantVal())) {
						finYearFreqDescIds = columnValueMap.get(columnName);
					} else if(columnName.equalsIgnoreCase(ColumnConstants.STARTDATE.getConstantVal())) {
						startDate = DateManip.convertStringToDate(columnValueMap.get(columnName).get(0), DateConstants.DD_MM_YYYY.getDateConstants());
					} else if(columnName.equalsIgnoreCase(ColumnConstants.ENDDATE.getConstantVal())) {
						endDate = DateManip.convertStringToDate(columnValueMap.get(columnName).get(0), DateConstants.DD_MM_YYYY.getDateConstants());
					} else if(columnName.equalsIgnoreCase(ColumnConstants.FILE_DETAILS.getConstantVal())) {
						filedetailsId = columnValueMap.get(columnName).get(0);
					} else if(columnName.equalsIgnoreCase(ColumnConstants.STATUS.getConstantVal())) {
						List<String> list = columnValueMap.get(columnName);
						statusIds = list.stream().map(s -> Integer.parseInt(s)).collect(Collectors.toList());
					} else if(columnName.equalsIgnoreCase(ColumnConstants.RETURN_ID_LIST.getConstantVal())) {
						returnIdList = columnValueMap.get(columnName);
						for(String str : returnIdList) {
							conRetIdList.add(Long.valueOf(str));
						}
					} else if(columnName.equalsIgnoreCase(ColumnConstants.ENTITY_ID_LIST.getConstantVal())) {
						entityIdList = columnValueMap.get(columnName);
						for(String str : entityIdList) {
							conEntIdList.add(Long.valueOf(str));
						}
					}	
				}
			}
			if(methodName.equalsIgnoreCase(MethodConstants.GET_EXISTING_UPLOAD_DATA.getConstantVal()) && returnIds!= null && entityIds!= null && !CollectionUtils.isEmpty(returnIds) && !CollectionUtils.isEmpty(entityIds)) {
				return returnUploadDetailsRepository.getExistingUploadInfo(Long.parseLong(returnIds.get(0)), Long.parseLong(entityIds.get(0)),startDate, endDate);
			} else if(methodName.equalsIgnoreCase(MethodConstants.GET_EXISTING_UPLOAD_DATA_WITHOUT_BUSINESS_VALIDATION_FAILED.getConstantVal()) && returnIds!= null && entityIds!= null && !CollectionUtils.isEmpty(returnIds) && !CollectionUtils.isEmpty(entityIds)) {
				return returnUploadDetailsRepository.getExistingUploadInfoWithNotInStatus(Long.parseLong(returnIds.get(0)), Long.parseLong(entityIds.get(0)),startDate, endDate,statusIds);
			} else if(methodName.equalsIgnoreCase(MethodConstants.GET_RETURN_UPLOAD_DETAILS_BY_FILE_DETAILS_ID.getConstantVal())) {
				return returnUploadDetailsRepository.getReturnUploadDetailsByFileDetailsId(Long.parseLong(filedetailsId));
			} else if(methodName.equalsIgnoreCase(MethodConstants.GET_RETURN_UPLOAD_DETAILS_BY_ENTITY_WISE.getConstantVal()) && finYearFreqDescIds!= null && !CollectionUtils.isEmpty(finYearFreqDescIds)) {
				return returnUploadDetailsRepository.getSubmitedDataEntityWise(conRetIdList, Long.parseLong(entityIds.get(0)), startDate, endDate, Long.parseLong(finYearFreqDescIds.get(0)));
			} else if(methodName.equalsIgnoreCase(MethodConstants.GET_RETURN_UPLOAD_DETAILS_BY_RETURN_WISE.getConstantVal()) && finYearFreqDescIds!= null && !CollectionUtils.isEmpty(finYearFreqDescIds)) {
				return returnUploadDetailsRepository.getSubmitedDataReturnWise(conEntIdList, conRetIdList, startDate, endDate, Long.parseLong(finYearFreqDescIds.get(0)));
			}
			return null;
		}catch(Exception e) {
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
	}

	@Override
	public List<ReturnsUploadDetails> getDataByColumnLongValue(Map<String, List<Long>> columnValueMap, String methodName)
			throws ServiceException {
		
		return null;
	}

	@Override
	public List<ReturnsUploadDetails> getActiveDataFor(Class bean, Long id) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<ReturnsUploadDetails> getAllDataFor(Class bean, Long id) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteData(ReturnsUploadDetails bean) throws ServiceException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ReturnsUploadDetails getDataById(Long id) throws ServiceException {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings("unchecked")
	@Override
	@org.springframework.transaction.annotation.Transactional(rollbackFor = ServiceException.class)
	public List<ReturnsUploadDetails> getDataByObject(Map<String, Object> columnValueMap, String methodName)
			throws ServiceException {
		try {
			Long filedetailsId = null;
			List<Integer> fillingStatusIdList = null;
			List<String> fileTypeList = null;
			Integer changedFIllingStatus = null;
			Integer totalRecordCount = null;
			List<String> returnCodeList = null;
			
			for (String columnName : columnValueMap.keySet()) {
				if(columnValueMap.get(columnName)!= null) {
					if(columnName.equalsIgnoreCase(ColumnConstants.FILE_DETAILS.getConstantVal())) {
						filedetailsId = (Long) columnValueMap.get(columnName);
					}else if(columnName.equalsIgnoreCase(ColumnConstants.FILLING_STATUS_ID.getConstantVal())) {
						fillingStatusIdList = (List<Integer>) columnValueMap.get(columnName);
					}else if(columnName.equalsIgnoreCase(ColumnConstants.CHANGED_FILLING_STATUS_ID.getConstantVal())) {
						changedFIllingStatus = (Integer) columnValueMap.get(columnName);
					}else if(columnName.equalsIgnoreCase(ColumnConstants.TOTAL_RECORD_COUNT.getConstantVal())) {
						totalRecordCount = (Integer) columnValueMap.get(columnName);
					}else if(columnName.equalsIgnoreCase(ColumnConstants.FILE_TYPE.getConstantVal())) {
						fileTypeList = (List<String>) columnValueMap.get(columnName);
					}else if(columnName.equalsIgnoreCase(ColumnConstants.RETURN_CODE.getConstantVal())) {
						returnCodeList = (List<String>) columnValueMap.get(columnName);
					}
				}
			}
			
			if(methodName.equalsIgnoreCase(MethodConstants.GET_RETURN_UPLOAD_DETAILS_BY_FILE_DETAILS_ID.getConstantVal())) {
				return returnUploadDetailsRepository.getReturnUploadDetailsByFileDetailsId(filedetailsId);
			}else if(methodName.equalsIgnoreCase(MethodConstants.GET_RETURNS_UPLOAD_DETALS_RECORD_BY_STATUS_AND_TYPE.getConstantVal())) {
				return returnUploadDetailsRepository.getReturnUploadDetailsRecordByStatus(fillingStatusIdList, fileTypeList, returnCodeList, PageRequest.of(0, totalRecordCount));
			}else if(methodName.equalsIgnoreCase(MethodConstants.GET_RETURNS_UPLOAD_DETALS_RECORD_BY_STATUS_AND_UPDATE_NEW_STATUS.getConstantVal())) {
				FilingStatus filingStatus = filingStatusRepo.getDataByFilingStatusId(changedFIllingStatus);
				if(filingStatus!= null) {
					List<ReturnsUploadDetails> returnUploadDetailsList =  returnUploadDetailsRepository.getReturnUploadDetailsRecordByStatusForUpdate(fillingStatusIdList, fileTypeList, returnCodeList, PageRequest.of(0, totalRecordCount));
					long[] uploadId = returnUploadDetailsList.stream().mapToLong(p -> p.getUploadId()).toArray();
					if(uploadId.length > 0) {
						int updatedRecordCount = returnUploadDetailsRepository.updateReturnUploadDetailsRecordStatus(uploadId, filingStatus,new Date());
						LOGGER.info("Updated record count : " + updatedRecordCount + "Size of fetched record " + returnUploadDetailsList.size());
					}
					return returnUploadDetailsList;
				}else {
					throw new ServiceException("Status to update the record not found");
				}
			}
			return null;
		}catch(Exception e) {
			throw new ServiceException(e.getMessage(), e);
		}
	}
	
	/**
	 * @param uploadId
	 * @return
	 */
	public ReturnsUploadDetails getReturnUploadDetailsByUploadIdNActive(Long uploadId) {
		return returnUploadDetailsRepository.getReturnUploadDetailsByUploadIdNActive(uploadId);
	}

	public List<ReturnsUploadDetails> getReturnUploadDetailsByReturnId(Date endDate, Long returnId, ReturnProperty returnPropertyObj) {
		if(returnPropertyObj == null) {
			return returnUploadDetailsRepository.getReturnUploadDetailsByReturnIdWithoutProp(endDate,returnId);
		}else {
			return returnUploadDetailsRepository.getReturnUploadDetailsByReturnId(endDate,returnId,returnPropertyObj.getReturnProprtyId());
		}
		
	}
	
}
