/**
 * 
 */
package com.iris.sdmx.dimesnsion.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.Tuple;
import javax.transaction.Transactional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.omg.CORBA.DynamicImplementation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.iris.dto.ReturnDto;
import com.iris.exception.ApplicationException;
import com.iris.exception.ServiceException;
import com.iris.model.UserMaster;
import com.iris.sdmx.codelist.bean.CodeListMasterBean;
import com.iris.sdmx.codelist.entity.CodeListMaster;
import com.iris.sdmx.codelist.repo.CodeListMasterRepo;
import com.iris.sdmx.dimesnsion.bean.DimensionMasterBean;
import com.iris.sdmx.dimesnsion.bean.RegexBean;
import com.iris.sdmx.dimesnsion.entity.DimensionMaster;
import com.iris.sdmx.dimesnsion.entity.DimensionMasterMod;
import com.iris.sdmx.dimesnsion.entity.DimensionType;
import com.iris.sdmx.dimesnsion.entity.Regex;
import com.iris.sdmx.dimesnsion.repo.DimensionModRepo;
import com.iris.sdmx.dimesnsion.repo.DimensionRepo;
import com.iris.sdmx.element.bean.SdmxElementBean;
import com.iris.sdmx.elementdimensionmapping.bean.ElementDimensionStoredJson;
import com.iris.sdmx.exceltohtml.bean.DimensionDetailCategories;
import com.iris.service.GenericService;
import com.iris.util.JsonUtility;
import com.iris.util.Validations;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.MethodConstants;


/**
 * @author sajadhav
 *
 */
@Service
public class DimensionService implements GenericService<DimensionMaster, Long>{

	private static final Logger LOGGER = LogManager.getLogger(DimensionService.class);

	@Autowired
	private DimensionRepo dimensionRepo;
	
	@Autowired
	private CodeListMasterRepo codeListMasterRepo;
	
	@Autowired
	private DimensionModRepo dimensionModRepo;
	
	@Autowired
	EntityManager entityManager;
	
	
	@Override
	public DimensionMaster add(DimensionMaster entity) throws ServiceException {
		return null;
	}

	@Override
	public boolean update(DimensionMaster entity) throws ServiceException {
		return false;
	}

	@Override
	public List<DimensionMaster> getDataByIds(Long[] ids) throws ServiceException {
		return null;
	}

	@Override
	public DimensionMaster getDataById(Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<DimensionMaster> getDataByColumnValue(Map<String, List<String>> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@Override
	public List<DimensionMaster> getDataByColumnLongValue(Map<String, List<Long>> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@Override
	public List<DimensionMaster> getDataByObject(Map<String, Object> columnValueMap, String methodName)
			throws ServiceException {
		try {
			Boolean isActive= null;
			Long parentDimensionId = null;
			for (String columnName : columnValueMap.keySet()) {
				if (columnValueMap.get(columnName) != null && columnName.equalsIgnoreCase(ColumnConstants.IS_ACTIVE.getConstantVal())) {
					isActive = (Boolean) columnValueMap.get(columnName);
				}else if (columnValueMap.get(columnName) != null && columnName.equalsIgnoreCase(ColumnConstants.PARENT_DIMENSION_ID.getConstantVal())) {
					parentDimensionId = (Long) columnValueMap.get(columnName);
				}
			}
			
			if (methodName.equalsIgnoreCase(MethodConstants.GET_DIM_MASTER_RECORD_BY_PARENT_ID_IS_ACTIVE.getConstantVal())) {
				return dimensionRepo.findByIsActiveAndParentDimensionMasterDimesnsionMasterId(isActive, parentDimensionId);
			}else if(methodName.equalsIgnoreCase(MethodConstants.GET_DIM_MASTER_RECORD_BY_IS_ACTIVE.getConstantVal())) {
				return dimensionRepo.findByIsActive(isActive);
			}
		}catch(Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getErrorMessage(), e);
		}
		return null;
	}

	@Override
	public List<DimensionMaster> getActiveDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<DimensionMaster> getAllDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public void deleteData(DimensionMaster bean) throws ServiceException {
		
	}

	public List<DimensionMasterBean> prepareDimensionMasterResponseList(List<DimensionMaster> dimensionMasterList) {
		List<DimensionMasterBean> dimensionMasterBeans = new ArrayList<>();
		
		for (DimensionMaster dimensionMaster : dimensionMasterList) {
			if(dimensionMaster.getIsActive().equals(Boolean.FALSE))
				continue;
			DimensionMasterBean dimensionMasterBean = new DimensionMasterBean();
			dimensionMasterBean.setDimensionCode(dimensionMaster.getDimensionCode());
			dimensionMasterBean.setDimensionDesc(dimensionMaster.getDimDesc());
			dimensionMasterBean.setDimensionId(dimensionMaster.getDimesnsionMasterId());
			dimensionMasterBean.setDimensionName(dimensionMaster.getDimensionName());
			dimensionMasterBean.setDimensionType(dimensionMaster.getDimensionType().getDimesnsionTypeName());
			dimensionMasterBean.setDimensionTypeId(dimensionMaster.getDimensionType().getDimesnionTypeId());

			if(!CollectionUtils.isEmpty(dimensionMaster.getDimensionMasterList())) {
				prepareInnerDimensionObject(dimensionMasterBean, dimensionMaster);
			}
			
			if(dimensionMaster.getCodeListMaster()!= null) {
				CodeListMasterBean codeListMasterBean = new CodeListMasterBean();
				codeListMasterBean.setClCode(dimensionMaster.getCodeListMaster().getClCode());
				codeListMasterBean.setClLable(dimensionMaster.getCodeListMaster().getClLable());
				codeListMasterBean.setClVersion(dimensionMaster.getCodeListMaster().getClVersion());
				dimensionMasterBean.setCodeListMasterBean(codeListMasterBean);
			}
			
			if(dimensionMaster.getRegex()!= null) {
				RegexBean regExBean = new RegexBean();
				regExBean.setRegex(dimensionMaster.getRegex().getRegex());
				regExBean.setRegexName(dimensionMaster.getRegex().getRegexName());
				regExBean.setRegexId(dimensionMaster.getRegex().getRegexId());
				dimensionMasterBean.setRegEx(regExBean);
			}
			
			dimensionMasterBean.setMinLength(dimensionMaster.getMinLength());
			dimensionMasterBean.setMaxLength(dimensionMaster.getMaxLength());
			dimensionMasterBean.setIsCommon(dimensionMaster.getIsCommon());
			dimensionMasterBean.setIsMandatory(dimensionMaster.getIsMandatory());
			dimensionMasterBean.setDataType(dimensionMaster.getDataType());
			if(dimensionMaster.getLastUpdatedOn() != null) {
				dimensionMasterBean.setLastUpdatedOn(dimensionMaster.getLastUpdatedOn());
				dimensionMasterBean.setLastUpdatedOnInLong(dimensionMaster.getLastUpdatedOn().getTime());
			}
			
			
			dimensionMasterBeans.add(dimensionMasterBean);
		}
		
		return dimensionMasterBeans;
	}

	private void prepareInnerDimensionObject(DimensionMasterBean dimensionMasterBean, DimensionMaster dimensionMaster) {
		List<DimensionMasterBean> dimensionMasterBeans = new ArrayList<>();
		
		for (DimensionMaster dimen : dimensionMaster.getDimensionMasterList()) {
			if(dimen.getIsActive().equals(Boolean.FALSE))
				continue;
			DimensionMasterBean dimensionMasBean = new DimensionMasterBean();
			dimensionMasBean.setDimensionCode(dimen.getDimensionCode());
			dimensionMasBean.setDimensionDesc(dimen.getDimDesc());
			dimensionMasBean.setDimensionId(dimen.getDimesnsionMasterId());
			dimensionMasBean.setDimensionName(dimen.getDimensionName());
			dimensionMasBean.setDimensionType(dimen.getDimensionType().getDimesnsionTypeName());
			dimensionMasBean.setDimensionTypeId(dimen.getDimensionType().getDimesnionTypeId());

			if(!CollectionUtils.isEmpty(dimen.getDimensionMasterList())) {
				prepareInnerDimensionObject(dimensionMasBean, dimen);
			}
			
			if(dimen.getCodeListMaster()!= null) {
				CodeListMasterBean codeListMasterBean = new CodeListMasterBean();
				codeListMasterBean.setClCode(dimen.getCodeListMaster().getClCode());
				codeListMasterBean.setClLable(dimen.getCodeListMaster().getClLable());
				codeListMasterBean.setClVersion(dimen.getCodeListMaster().getClVersion());
				dimensionMasBean.setCodeListMasterBean(codeListMasterBean);
			}
			
			if(dimen.getRegex()!= null) {
				RegexBean regExBean = new RegexBean();
				regExBean.setRegex(dimen.getRegex().getRegex());
				regExBean.setRegexName(dimen.getRegex().getRegexName());
				regExBean.setRegexId(dimen.getRegex().getRegexId());
				dimensionMasBean.setRegEx(regExBean);
			}
			
			dimensionMasBean.setMinLength(dimen.getMinLength());
			dimensionMasBean.setMaxLength(dimen.getMaxLength());
			dimensionMasBean.setIsCommon(dimen.getIsCommon());
			dimensionMasBean.setIsMandatory(dimen.getIsMandatory());
			dimensionMasBean.setDataType(dimen.getDataType());
			if(dimen.getLastUpdatedOn() != null) {
				dimensionMasBean.setLastUpdatedOn(null);
				dimensionMasBean.setLastUpdatedOnInLong(dimen.getLastUpdatedOn().getTime());
			}
			
			//dimensionMasBean.setLastUpdatedOn(dimen.getLastUpdatedOn());
			
			dimensionMasterBeans.add(dimensionMasBean);
		}

		dimensionMasterBean.setDimesnionMasterBeans(dimensionMasterBeans);
	}

	@Transactional(rollbackOn = Exception.class)
	public boolean addDimensionData(DimensionMasterBean inputDimensionMasterBean, boolean isApprovalRequired) throws ApplicationException {
	
		DimensionMaster dimensionMasterBean = dimensionRepo.findByDimensionCodeIgnoreCaseAndIsActive(inputDimensionMasterBean.getDimensionCode(), true);
		DimensionMaster parentDimensionMaster = null;
		if(inputDimensionMasterBean.getParentDimensionBean()!= null) {
			parentDimensionMaster = dimensionRepo.findByDimensionCodeIgnoreCaseAndIsActive(inputDimensionMasterBean.getParentDimensionBean().getDimensionCode(), true);
			if (parentDimensionMaster == null) {
				throw new ApplicationException("E004", "Parent dimension record not present");
			}
		}
		
		if (dimensionMasterBean != null) {
			throw new ApplicationException("E004", "Same dim record present");
		}
		
		Date createdOn = new Date();
		UserMaster createdBy = new UserMaster();
		createdBy.setUserId(inputDimensionMasterBean.getUserId());
		
		DimensionMasterMod dimensionMasterMod = new DimensionMasterMod();
		dimensionMasterMod.setDimCode(inputDimensionMasterBean.getDimensionCode());
		dimensionMasterMod.setIsActive(true);
		dimensionMasterMod.setActionId(1);
		dimensionMasterMod.setDimMasterJson(JsonUtility.getGsonObject().toJson(inputDimensionMasterBean));
		
		if(isApprovalRequired) {
			dimensionMasterMod.setAdminStatusId(com.iris.util.constant.GeneralConstants.ACTIONID_ADDITION.getConstantIntVal());
		}else {
			dimensionMasterMod.setAdminStatusId(com.iris.util.constant.GeneralConstants.ACTIONID_EDITION.getConstantIntVal());
		}
		
		dimensionMasterMod.setCreatedBy(createdBy);
		dimensionMasterMod.setCreatedOn(createdOn);
		dimensionMasterMod.setLastUpdatedOn(createdOn);
		
		dimensionMasterMod = dimensionModRepo.save(dimensionMasterMod);
		
		if (!isApprovalRequired && dimensionMasterMod.getDimMasterModId() != null) {
			DimensionMaster dimensionMaster = new DimensionMaster();

			if(inputDimensionMasterBean.getCodeListMasterBean()!= null) {
				CodeListMaster codeListMaster = codeListMasterRepo.findByClCodeIgnoreCaseAndClVersionAndIsActive(inputDimensionMasterBean.getCodeListMasterBean().getClCode(), inputDimensionMasterBean.getCodeListMasterBean().getClVersion(), true);
				dimensionMaster.setCodeListMaster(codeListMaster);
			}

			dimensionMaster.setDimensionName(inputDimensionMasterBean.getDimensionName());
			dimensionMaster.setDimensionCode(inputDimensionMasterBean.getDimensionCode());
			
			DimensionType dimensionType = new DimensionType();
			dimensionType.setDimesnionTypeId(inputDimensionMasterBean.getDimensionTypeId());

			dimensionMaster.setDimensionType(dimensionType);
			dimensionMaster.setParentDimensionMaster(parentDimensionMaster);
			
			
			if(inputDimensionMasterBean.getRegEx()!= null) {
				Regex regex = new Regex();
				regex.setRegexId(inputDimensionMasterBean.getRegEx().getRegexId());
				dimensionMaster.setRegex(regex);
			}
			
			dimensionMaster.setMinLength(inputDimensionMasterBean.getMinLength());
			dimensionMaster.setMaxLength(inputDimensionMasterBean.getMaxLength());
			dimensionMaster.setDimDesc(inputDimensionMasterBean.getDimensionDesc());
			dimensionMaster.setIsActive(inputDimensionMasterBean.getIsActive());
			
			
			dimensionMaster.setCreatedBy(createdBy);
			dimensionMaster.setCreatedOn(createdOn);
			dimensionMaster.setLastUpdatedOn(createdOn);
			dimensionMaster.setIsCommon(inputDimensionMasterBean.getIsCommon());
			dimensionMaster.setIsMandatory(inputDimensionMasterBean.getIsMandatory());
			dimensionMaster.setDataType(inputDimensionMasterBean.getDataType());
			
			dimensionRepo.save(dimensionMaster);
		}
		
		return true;
	}

	@Transactional(rollbackOn = Exception.class)
	public boolean editDimensionData(DimensionMasterBean dimensionMasterBean, boolean isApprovalRequired) {
	
		try {
			DimensionMaster dimensionMaster = dimensionRepo.findByDimensionCodeIgnoreCaseAndIsActive(dimensionMasterBean.getDimensionCode(), true);
		
			DimensionMaster parentDimensionMaster = null;
			if(dimensionMasterBean.getParentDimensionBean()!= null) {
				parentDimensionMaster = dimensionRepo.findByDimensionCodeIgnoreCaseAndIsActive(dimensionMasterBean.getParentDimensionBean().getDimensionCode(), true);
				if (parentDimensionMaster == null) {
					throw new ApplicationException("E004", "Parent dimension record not present");
				}
			}

			CodeListMaster codeListMaster =  null;
			if(dimensionMasterBean.getCodeListMasterBean()!= null) {
				codeListMaster = codeListMasterRepo.findByClCodeIgnoreCaseAndClVersionAndIsActive(dimensionMasterBean.getCodeListMasterBean().getClCode(), dimensionMasterBean.getCodeListMasterBean().getClVersion(), true);
			}

			Date createdOn = new Date();
			
			UserMaster createdBy = new UserMaster();
			createdBy.setUserId(dimensionMasterBean.getUserId());
			
			if(dimensionMaster!= null) {
				DimensionMasterMod dimensionMasterMod = new DimensionMasterMod();
				dimensionMasterMod.setDimensionmaster(dimensionMaster);
				dimensionMasterMod.setIsActive(true);
				dimensionMasterMod.setDimMasterJson(JsonUtility.getGsonObject().toJson(dimensionMasterBean));
				dimensionMasterMod.setDimCode(dimensionMaster.getDimensionCode());
				dimensionMasterMod.setCreatedBy(createdBy);
				dimensionMasterMod.setCreatedOn(createdOn);
				dimensionMasterMod.setLastUpdatedOn(createdOn);
				dimensionMasterMod.setActionId(2);
				
				if(isApprovalRequired) {
					dimensionMasterMod.setAdminStatusId(1);
				}else {
					dimensionMasterMod.setAdminStatusId(2);
				}
					
				dimensionModRepo.save(dimensionMasterMod);
				
				if(!isApprovalRequired && dimensionMasterMod.getDimMasterModId()!= null) {
					
					dimensionMaster.setCodeListMaster(codeListMaster);
					dimensionMaster.setDimensionName(dimensionMasterBean.getDimensionName());
					dimensionMaster.setDimensionCode(dimensionMasterBean.getDimensionCode());
					
					DimensionType dimensionType = new DimensionType();
					dimensionType.setDimesnionTypeId(dimensionMasterBean.getDimensionTypeId());

					dimensionMaster.setDimensionType(dimensionType);
					dimensionMaster.setParentDimensionMaster(parentDimensionMaster);
					
					if(dimensionMasterBean.getRegEx()!= null) {
						Regex regex = new Regex();
						regex.setRegexId(dimensionMasterBean.getRegEx().getRegexId());
						dimensionMaster.setMinLength(dimensionMasterBean.getMinLength());
						dimensionMaster.setMaxLength(dimensionMasterBean.getMaxLength());
						dimensionMaster.setRegex(regex);
					}else {
						dimensionMaster.setRegex(null);
					}
					
					dimensionMaster.setDimDesc(dimensionMasterBean.getDimensionDesc());
					dimensionMaster.setIsActive(dimensionMasterBean.getIsActive());
					dimensionMaster.setMinLength(dimensionMasterBean.getMinLength());
					dimensionMaster.setMaxLength(dimensionMasterBean.getMaxLength());
					dimensionMaster.setLastModifiedBy(createdBy);
					dimensionMaster.setLastModifiedOn(createdOn);
					dimensionMaster.setLastUpdatedOn(createdOn);
					dimensionMaster.setIsCommon(dimensionMasterBean.getIsCommon());
					dimensionMaster.setIsMandatory(dimensionMasterBean.getIsMandatory());
					dimensionMaster.setDataType(dimensionMasterBean.getDataType());
					
					dimensionRepo.save(dimensionMaster);
				}
				return true;
			}else {
				throw new ServiceException("Code list not exist");
			}
		}catch(Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getErrorMessage(), e);
			return false;
		}
	}

	@Transactional(rollbackOn = Exception.class)
	public boolean deleteDimensionData(DimensionMasterBean inputDimensionMasterBean, boolean isApprovalRequired) {
		
		
		UserMaster createdBy = new UserMaster();
		createdBy.setUserId(inputDimensionMasterBean.getUserId());
		
		List<String> dmCodeList = inputDimensionMasterBean.getDimesnionMasterBeans().stream().map(f -> f.getDimensionCode()).collect(Collectors.toList());
		
		List<DimensionMasterMod> dimensionMasterMods = dimensionModRepo.findByDimCodeInAndAdminStatusId(dmCodeList, 1);
		
		if(!Validations.isEmpty(dimensionMasterMods)) {
			return false; 
		}
		
		List<DimensionMaster> dimensionMasterList = dimensionRepo.findByDimensionCodeInAndIsActive(dmCodeList,true);
		if(dimensionMasterList.size() != inputDimensionMasterBean.getDimesnionMasterBeans().size() ) {
			return false;
		}
		
		Map<String, DimensionMaster> dimensionMasterMap = new HashMap<>();
		
		for(DimensionMaster dimensionMaster :dimensionMasterList) {
			dimensionMasterMap.put(dimensionMaster.getDimensionCode(), dimensionMaster);
		}
		
		for (DimensionMasterBean dimensionMasterBean : inputDimensionMasterBean.getDimesnionMasterBeans()) {
			Date creationDate = new Date();
			
			List<DimensionMaster> dimensionMasters = dimensionRepo.getSdmxDimensionMasterUsingDimCode(dimensionMasterBean.getDimensionCode());
			if(dimensionMasters != null && dimensionMasters.size() > 0) {
				long dimensionId = dimensionMasters.get(0).getDimesnsionMasterId();
				List<DimensionMaster> dimMaster = dimensionRepo.findByIsActiveAndParentDimensionMasterDimesnsionMasterId(true,dimensionId);
				if(dimMaster != null && dimMaster.size() > 0) {
					for(DimensionMaster dimensionMaster :dimMaster ) {
						dimensionMaster.setParentDimensionMaster(dimensionMasters.get(0).getParentDimensionMaster());
						dimensionRepo.save(dimensionMaster);
					}
				}
			}
			
			
			if(dimensionMasterMap.containsKey(dimensionMasterBean.getDimensionCode())) {
				DimensionMaster dimensionMaster = dimensionMasterMap.get(dimensionMasterBean.getDimensionCode());
				// Create modification object
				
				DimensionMasterMod dimensionMasterMod = new DimensionMasterMod();
				dimensionMasterMod.setDimensionmaster(dimensionMasterMap.get(dimensionMasterBean.getDimensionCode()));
				dimensionMasterMod.setIsActive(true);
				
				dimensionMasterMod.setDimMasterJson(JsonUtility.getGsonObject().toJson(dimensionMasterBean));
				
				dimensionMasterMod.setCreatedBy(createdBy);
				dimensionMasterMod.setCreatedOn(creationDate);
				dimensionMasterMod.setLastUpdatedOn(creationDate);
				dimensionMasterMod.setActionId(com.iris.util.constant.GeneralConstants.ACTIONID_DELETION.getConstantIntVal());
				dimensionMasterMod.setDimCode(dimensionMasterBean.getDimensionCode());
				
				// Siddhart need to look into this
				if(isApprovalRequired) {
					dimensionMasterMod.setAdminStatusId(com.iris.util.constant.GeneralConstants.PENDING_ADMIN_STATUS_ID.getConstantIntVal());
				}else {
					dimensionMasterMod.setAdminStatusId(com.iris.util.constant.GeneralConstants.APPROVED_ADMIN_STATUS_ID.getConstantIntVal());
				}
				
				dimensionMasterMod = dimensionModRepo.save(dimensionMasterMod);
				
				if(!isApprovalRequired && dimensionMasterMod.getDimMasterModId() !=null) {
					dimensionMaster.setIsActive(false);
					dimensionRepo.save(dimensionMaster);
				}
			}
		}
		
		return true;
	}
	
	
	public Boolean getSdmxDimensionMasterUsingDimCode(String  dimCode) throws ServiceException {
		boolean found = false;
		List<DimensionMaster> sdmxDimensionMasters = null;
		try {
			sdmxDimensionMasters = dimensionRepo.getSdmxDimensionMasterUsingDimCode(dimCode);
			if(!Validations.isEmpty(sdmxDimensionMasters)) {
				found = true;
			}
			return found;
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		return found;
	}
	
	
	public List<DimensionMaster>  getCommonOrMandatoryDimension() throws ServiceException {
		
		List<DimensionMaster> sdmxDimensionMasters = null;
		try {
			sdmxDimensionMasters = dimensionRepo.getCommonOrMandatoryDimension();
			
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		return sdmxDimensionMasters;
	}
	
	public List<DimensionMasterBean> prepareDimensionCommonData(List<DimensionMaster> dimensionMasters){
		List<DimensionMasterBean> dimensionMasterBeans = null;
		if(!Validations.isEmpty(dimensionMasters)) {
			dimensionMasterBeans = new ArrayList<>();
			for (DimensionMaster dimen : dimensionMasters) {
				
				if(dimen.getIsActive().equals(Boolean.FALSE))
					continue;
				DimensionMasterBean dimensionMasBean = new DimensionMasterBean();
				dimensionMasBean.setDimensionCode(dimen.getDimensionCode());
				dimensionMasBean.setDimensionDesc(dimen.getDimDesc());
				dimensionMasBean.setDimensionId(dimen.getDimesnsionMasterId());
				dimensionMasBean.setDimensionName(dimen.getDimensionName());
				dimensionMasBean.setDimensionType(dimen.getDimensionType().getDimesnsionTypeName());
				dimensionMasBean.setDimensionTypeId(dimen.getDimensionType().getDimesnionTypeId());

				if(dimen.getCodeListMaster()!= null) {
					CodeListMasterBean codeListMasterBean = new CodeListMasterBean();
					codeListMasterBean.setClCode(dimen.getCodeListMaster().getClCode());
					codeListMasterBean.setClLable(dimen.getCodeListMaster().getClLable());
					codeListMasterBean.setClVersion(dimen.getCodeListMaster().getClVersion());
					dimensionMasBean.setCodeListMasterBean(codeListMasterBean);
				}
				
				if(dimen.getRegex()!= null) {
					RegexBean regExBean = new RegexBean();
					regExBean.setRegex(dimen.getRegex().getRegex());
					regExBean.setRegexName(dimen.getRegex().getRegexName());
					regExBean.setRegexId(dimen.getRegex().getRegexId());
					dimensionMasBean.setRegEx(regExBean);
				}
				
				dimensionMasBean.setMinLength(dimen.getMinLength());
				dimensionMasBean.setMaxLength(dimen.getMaxLength());
				dimensionMasBean.setIsCommon(dimen.getIsCommon());
				dimensionMasBean.setIsMandatory(dimen.getIsMandatory());
				dimensionMasBean.setDataType(dimen.getDataType());
				
				dimensionMasterBeans.add(dimensionMasBean);
			}	
		}
		return dimensionMasterBeans;
	}

	
	public List<DimensionMasterBean> searchDimensionCode(List<String> dimCodeList) {
		StringBuilder sb = new StringBuilder();

		sb.append("select ele.ELEMENT_ID, ele.DSD_CODE, ele.ELEMENT_LABEL, ele.ELEMENT_VER, eleDim.ELEMENT_DIMENSIONS , ele.ELEMENT_DESC "
				+ " from TBL_SDMX_ELEMENT_DIMENSIONS eleDim, "
				+ " TBL_SDMX_ELEMENT ele where ele.ELEMENT_ID = eleDim.ELEMENT_ID_FK and eleDim.IS_ACTIVE = 1 and ele.IS_ACTIVE = 1 and");
		int i = 0;
		for (String dimCode : dimCodeList) {
			if(i > 0) {
				sb.append("or eleDim.ELEMENT_DIMENSIONS -> '$.dimCombination[*].dimConceptId' like '%"+dimCode+"%'");
			}else {
				sb.append("(eleDim.ELEMENT_DIMENSIONS -> '$.dimCombination[*].dimConceptId' like '%"+dimCode+"%'");
			}
			i++;
		}
		if(i > 0) {
			sb.append(")");
		}
		
		List<Tuple> elementDimensions =  entityManager.createNativeQuery(sb.toString(),Tuple.class).getResultList();
		
		String jsonString = "";
		Long count = null;
		Long closeDimenCount = null;
		Long commonDimensionCount = null;
		Long openDimenCount = null;
		
		Map<String, Set<String>> dimensionElementMap = new HashMap<>();
		
		for (String dimCode : dimCodeList) {
			dimensionElementMap.put(dimCode, new HashSet<>());

			for (Tuple tuple : elementDimensions) {
				if(tuple.get(4)!= null && tuple.get(1)!= null && tuple.get(3)!= null) {
					   jsonString = tuple.get(4).toString();
					   
					   ElementDimensionStoredJson elementDimensionStoredJson = JsonUtility.getGsonObject().fromJson(jsonString, ElementDimensionStoredJson.class);
					   
					   count = elementDimensionStoredJson.getDimCombination().stream().filter(f -> f.getDimConceptId().equalsIgnoreCase(dimCode)).count();
					   
					   if(count > 0) {
						   dimensionElementMap.get(dimCode).add(tuple.get(1).toString() + "~" + tuple.get(3).toString()+ "~" +tuple.get(2).toString()+ "~" +tuple.get(5).toString());
					   }
				}
			}
		}
		
		
		sb = new StringBuilder();

		sb.append("select cod.ELEMENT_ID_FK, info.RETURN_CELL_REF, sheetInfo.RETURN_SHEET_INFO_ID, " + 
				" ret.RETURN_CODE, ret.RETURN_NAME, cod.MODEL_DIM , sheetInfo.SHEET_NAME , sheetInfo.SECTION_NAME from TBL_SDMX_MODEL_CODES cod, TBL_SDMX_RETURN_MODEL_INFO info, " + 
				"TBL_SDMX_RETURN_SHEET_INFO sheetInfo,  " + 
				"TBL_RETURN_TEMPLATE temp, TBL_RETURN ret " + 
				"where " + 
				"cod.MODEL_CODES_ID =  info.MODEL_CODES_ID_FK " + 
				"and info.RETURN_SHEET_INFO_ID_FK = sheetInfo.RETURN_SHEET_INFO_ID " + 
				"and sheetInfo.RETURN_TEMPLATE_ID_FK = temp.RETURN_TEMPLATE_ID " + 
				"and temp.RETURN_ID_FK = ret.RETURN_ID and  cod.IS_ACTIVE = 1 and info.IS_ACTIVE = 1 and ret.IS_ACTIVE = 1 and temp.IS_ACTIVE = 1 and (");
		
		i = 0;
		for (String dimCode : dimCodeList) {
			if(i != 0) {
				sb.append("or");
			}
			sb.append("(");
			sb.append("cod.MODEL_DIM -> '$.closedDim[*].dimConceptId' like '%"+dimCode+"%' or " );
			sb.append("cod.MODEL_DIM -> '$.openDimension[*].dimConceptId' like '%"+dimCode+"%' or ");
			sb.append("cod.MODEL_DIM -> '$.commonDimension[*].dimConceptId' like '%"+dimCode+"%' ");
			sb.append(")");
			i++;
		}
		sb.append(") order by ret.RETURN_CODE , sheetInfo.SECTION_NAME " );

		List<Tuple> modelMap =  entityManager.createNativeQuery(sb.toString(),Tuple.class).getResultList();
		Map<String, List<String>> retunCodeCellReference = new HashMap<>();
		
		Map<String, List<ReturnDto>> dimensionModelMap = new HashMap<>();
		
		for (String dimCode : dimCodeList) {
			for (Tuple tuple : modelMap) {
				if(tuple.get(5)!= null && tuple.get(1)!= null && tuple.get(3)!= null && tuple.get(4)!= null) {
					  jsonString = tuple.get(5).toString();
					   
					   DimensionDetailCategories dimensionDetailCategory = JsonUtility.getGsonObject().fromJson(jsonString, DimensionDetailCategories.class);
					   
					   openDimenCount = dimensionDetailCategory.getOpenDimension().stream().filter(f -> f.getDimConceptId().equalsIgnoreCase(dimCode)).count();
					   closeDimenCount = dimensionDetailCategory.getClosedDim().stream().filter(f -> f.getDimConceptId().equalsIgnoreCase(dimCode)).count();
					   commonDimensionCount = dimensionDetailCategory.getCommonDimension().stream().filter(f -> f.getDimConceptId().equalsIgnoreCase(dimCode)).count();
					   
					   if(openDimenCount > 0 || closeDimenCount > 0 || commonDimensionCount > 0) {
						   ReturnDto returnDto = new ReturnDto();
						   String tempTableName = tuple.get(7).toString();
						   
						   returnDto.setReturnCode(tuple.get(3).toString());
						   returnDto.setReturnName(tuple.get(4).toString());
						   returnDto.setSheetName(tuple.get(6).toString());
						   returnDto.setTableName(tuple.get(7).toString());
						   
						   
						   List<String> cellRefList = new ArrayList<>();
						   cellRefList.add(tuple.get(1).toString());
						   
						   returnDto.setCelReferences(cellRefList);
						   
						   if(dimensionModelMap.get(dimCode)!= null) {
							   
							   List<ReturnDto> returnDtos = dimensionModelMap.get(dimCode);
							   ReturnDto finalReturnDto = null;
							   if(!Validations.isEmpty(returnDtos)) {
								   List<ReturnDto> finalReturnDtoList  = new ArrayList<>();
								   for(ReturnDto reDto : returnDtos) {
									   if(reDto.getReturnCode().equals(tuple.get(3).toString())) {
										   finalReturnDtoList.add(reDto);
									   }
								   }
								   
								   if(finalReturnDtoList.size() > 0) {
									   finalReturnDto = finalReturnDtoList.get(finalReturnDtoList.size() -1); 
								   }
							   }
							   //ReturnDto filteredReturnDto = returnDtos.stream().filter(f -> f.getReturnCode().equalsIgnoreCase(tuple.get(3).toString())).findAny().orElse(null);
							   
							   if(finalReturnDto!= null && finalReturnDto.getTableName().equals(tempTableName)) {
								   finalReturnDto.getCelReferences().add(tuple.get(1).toString());
							   }else {
									List<ReturnDto> returnDtoList = dimensionModelMap.get(dimCode);
									returnDtoList.add(returnDto);
									dimensionModelMap.put(dimCode, returnDtoList);
							   }
						   }else {
							   List<ReturnDto> returnDtoList = new ArrayList<>();
							   returnDtoList.add(returnDto);
							   dimensionModelMap.put(dimCode, returnDtoList);
						   }
					   }else {
						   dimensionModelMap.put(dimCode, null);
					   }					
				}
			}
		}
		
		List<DimensionMasterBean> dimensionMasterBeans = new ArrayList<>();
		
		for (Map.Entry<String, Set<String>> obj: dimensionElementMap.entrySet()) {
			DimensionMasterBean dimensionMasterBean = new DimensionMasterBean();
			dimensionMasterBean.setDimensionCode(obj.getKey());
			
			List<SdmxElementBean> sdmxElementsBeans = new ArrayList<>();
			
			for (String str : obj.getValue()) {
				SdmxElementBean sdmxElementBean = new SdmxElementBean();
				sdmxElementBean.setDsdCode(str.split("~")[0]);
				sdmxElementBean.setElementVer(str.split("~")[1]);
				sdmxElementBean.setElementLabel(str.split("~")[2]);
				sdmxElementBean.setElementDesc(str.split("~")[3]);
				
				sdmxElementsBeans.add(sdmxElementBean);
			}
			if(!CollectionUtils.isEmpty(sdmxElementsBeans)) {
				dimensionMasterBean.setElements(sdmxElementsBeans);
			}
			
			dimensionMasterBeans.add(dimensionMasterBean);
		}
		
		
		for (DimensionMasterBean dimensionMasterBean : dimensionMasterBeans) {
			if(dimensionModelMap.get(dimensionMasterBean.getDimensionCode())!= null) {
				dimensionMasterBean.setModelMapping(dimensionModelMap.get(dimensionMasterBean.getDimensionCode()));
			}
		}
		
		return dimensionMasterBeans;
	}
	
}
