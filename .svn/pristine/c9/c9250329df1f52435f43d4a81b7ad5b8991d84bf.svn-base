/**
 * 
 */
package com.iris.sdmx.exceltohtml.service;

import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.iris.exception.ServiceException;
import com.iris.model.ReturnTemplate;
import com.iris.sdmx.exceltohtml.bean.SdmxModelCodesBean;
import com.iris.sdmx.exceltohtml.entity.SdmxModelCodesEntity;
import com.iris.sdmx.exceltohtml.helper.SdmxModelCodesHelper;
import com.iris.sdmx.exceltohtml.repo.SdmxModelCodesRepo;
import com.iris.service.GenericService;

/**
 * @author apagaria
 *
 */
@Service
@Transactional(readOnly = true)
public class SdmxModelCodesService implements GenericService<SdmxModelCodesEntity, Long> {

	@Autowired
	private SdmxModelCodesRepo sdmxModelCodesRepo;

	@Override
	@Transactional(readOnly = false)
	public SdmxModelCodesEntity add(SdmxModelCodesEntity entity) throws ServiceException {
		return sdmxModelCodesRepo.save(entity);
	}

	@Override
	public boolean update(SdmxModelCodesEntity entity) throws ServiceException {
		return false;
	}

	@Override
	public List<SdmxModelCodesEntity> getDataByIds(Long[] ids) throws ServiceException {
		return null;
	}

	@Override
	public SdmxModelCodesEntity getDataById(Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<SdmxModelCodesEntity> getDataByColumnValue(Map<String, List<String>> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@Override
	public List<SdmxModelCodesEntity> getDataByColumnLongValue(Map<String, List<Long>> columnValueMap,
			String methodName) throws ServiceException {
		return null;
	}

	@Override
	public List<SdmxModelCodesEntity> getDataByObject(Map<String, Object> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public List<SdmxModelCodesEntity> getActiveDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public List<SdmxModelCodesEntity> getAllDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public void deleteData(SdmxModelCodesEntity bean) throws ServiceException {

	}

	/**
	 * @param sdmxModelCodesBean
	 * @param userId
	 */
	@Transactional(readOnly = false)
	public Long saveEntityByBean(SdmxModelCodesBean sdmxModelCodesBean, Long userId) {
		SdmxModelCodesEntity sdmxModelCodesEntity = new SdmxModelCodesEntity();
		SdmxModelCodesHelper.convertBeanToEntity(sdmxModelCodesBean, sdmxModelCodesEntity, userId);
		add(sdmxModelCodesEntity);
		return sdmxModelCodesEntity.getModelCodesId();
	}

	/**
	 * @param modelCode
	 * @return
	 */
	public SdmxModelCodesBean getBeanByModelCode(String modelCode) {
		SdmxModelCodesBean sdmxModelCodesBean = null;
		SdmxModelCodesEntity sdmxModelCodesEntity = sdmxModelCodesRepo.findByModelCode(modelCode);
		if (sdmxModelCodesEntity != null) {
			sdmxModelCodesBean = new SdmxModelCodesBean();
			SdmxModelCodesHelper.convertEntityToBean(sdmxModelCodesEntity, sdmxModelCodesBean);
		}
		return sdmxModelCodesBean;
	}

	/**
	 * @param modelDim
	 * @return
	 */
	public SdmxModelCodesBean findEntityByModelDim(String modelDim) {
		SdmxModelCodesBean sdmxModelCodesBean = null;
		SdmxModelCodesEntity sdmxModelCodesEntity = sdmxModelCodesRepo.findEntityByModelDim(modelDim);
		if (sdmxModelCodesEntity != null) {
			sdmxModelCodesBean = new SdmxModelCodesBean();
			SdmxModelCodesHelper.convertEntityToBean(sdmxModelCodesEntity, sdmxModelCodesBean);
		}
		return sdmxModelCodesBean;
	}

	/**
	 * @param modelCodesId
	 */
	@Transactional(readOnly = false)
	public void deleteEntityByBean(Long modelCodesId) {
		SdmxModelCodesEntity sdmxModelCodesEntity = sdmxModelCodesRepo.findByModelCodesId(modelCodesId);
		sdmxModelCodesEntity.setIsActive(Boolean.FALSE);
		add(sdmxModelCodesEntity);
	}

	/**
	 * @param returnCellRef
	 * @param returnTemplateId
	 * @return
	 */
	public SdmxModelCodesBean findByReturnCellReffNReturnTemplate(Integer returnCellRef, Long returnTemplateId) {
		SdmxModelCodesBean sdmxModelCodesBean = null;
		ReturnTemplate returnTemplateFk = new ReturnTemplate(returnTemplateId);
		SdmxModelCodesEntity sdmxModelCodesEntity = sdmxModelCodesRepo
				.findByReturnCellReffNReturnTemplate(returnCellRef, returnTemplateFk);
		if (sdmxModelCodesEntity != null) {
			sdmxModelCodesBean = new SdmxModelCodesBean();
			SdmxModelCodesHelper.convertEntityToBean(sdmxModelCodesEntity, sdmxModelCodesBean);
		}
		return sdmxModelCodesBean;
	}

	/**
	 * @param dmModelCode
	 * @return
	 */
	public SdmxModelCodesBean findEntityByDmModelCodes(String dmModelCode) {
		SdmxModelCodesBean sdmxModelCodesBean = null;
		List<SdmxModelCodesEntity> sdmxModelCodesEntity = sdmxModelCodesRepo.findEntityByModelCode(dmModelCode);
		if (!CollectionUtils.isEmpty(sdmxModelCodesEntity)) {
			sdmxModelCodesBean = new SdmxModelCodesBean();
			SdmxModelCodesHelper.convertEntityToBean(sdmxModelCodesEntity.get(0), sdmxModelCodesBean);
		}
		return sdmxModelCodesBean;
	}

	/**
	 * @param sdmxModelCodesBean
	 * @param userId
	 * @throws ServiceException
	 */
	@Transactional(readOnly = false)
	public void deleteDataByBean(SdmxModelCodesBean sdmxModelCodesBean, Long userId) throws ServiceException {
		sdmxModelCodesBean.setIsActive(false);
		SdmxModelCodesEntity sdmxModelCodesEntity = new SdmxModelCodesEntity();
		SdmxModelCodesHelper.convertBeanToEntity(sdmxModelCodesBean, sdmxModelCodesEntity, userId);
		add(sdmxModelCodesEntity);
	}

	/**
	 * @param dmModelCode
	 * @return
	 */
	public List<String> findDmModelCodes(String dmModelCode) {
		return sdmxModelCodesRepo.findDmModelCodes(dmModelCode);
	}

	/**
	 * @return
	 */
	public String findMaxModelCodes() {
		return sdmxModelCodesRepo.findMaxModelCodes();
	}
}
