package com.iris.sdmx.exceltohtml.controller;

import java.io.File;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.sdmx.exceltohtml.bean.ProcessUploadInputBean;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnPreviewBean;
import com.iris.sdmx.exceltohtml.service.SdmxReturnPreviewService;
import com.iris.sdmx.util.SDMXConstants;
import com.iris.sdmx.util.SdmxUtil;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;

/**
 * @author apagaria
 *
 */
@RestController
@RequestMapping("/service/sdmx/fileProcessor")
public class SdmxUploadFileProcessorController {

	@Value("${excel.to.html.xls.base.path}")
	private String excelToHtmlXlsBasePath;

	@Value("${excel.to.html.base.path}")
	private String excelToHtmlBasePath;

	@Autowired
	private SdmxReturnPreviewService sdmxReturnPreviewService;

	/**
	 * 
	 */
	private static final Logger LOGGER = LogManager.getLogger(SdmxUploadFileProcessorController.class);

	@PutMapping("/user/{userId}/return/{returnTemplateId}/uploadFile")
	public ServiceResponse processUploadedFile(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("returnTemplateId") Long returnTemplateId,
			@RequestBody ProcessUploadInputBean processUploadInputBean) {
		LOGGER.info("START - Process Upload File request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			// Excel File Create
			String destinationXlsFilePath = excelToHtmlXlsBasePath + File.separator
					+ processUploadInputBean.getReturnCode() + File.separator + processUploadInputBean.getFileName()
					+ ".xlsx";
			File dir = new File(
					excelToHtmlXlsBasePath + File.separator + processUploadInputBean.getReturnCode() + File.separator);
			if (!dir.exists())
				dir.mkdirs();
			SdmxUtil.copyFile(processUploadInputBean.getExcelFilePath(), destinationXlsFilePath);

			// HTML File create
			String destinationHtmlFilePath = excelToHtmlBasePath + File.separator
					+ processUploadInputBean.getReturnCode() + File.separator + processUploadInputBean.getFileName()
					+ ".html";
			dir = new File(
					excelToHtmlBasePath + File.separator + processUploadInputBean.getReturnCode() + File.separator);
			if (!dir.exists())
				dir.mkdirs();
			SdmxUtil.copyFile(processUploadInputBean.getHtmlFilePath(), destinationHtmlFilePath);
			SdmxReturnPreviewBean sdmxReturnPreviewBean = new SdmxReturnPreviewBean();
			sdmxReturnPreviewBean.setHtmlFilePath(destinationHtmlFilePath);
			sdmxReturnPreviewBean.setXlsxFilePath(destinationXlsFilePath);
			sdmxReturnPreviewBean.setCreatedBy(userId);
			sdmxReturnPreviewBean.setReturnTemplateIdFk(returnTemplateId);
			sdmxReturnPreviewService.saveEntityByBean(sdmxReturnPreviewBean);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (Exception ex) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, ex);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Process Upload File request processed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

}
