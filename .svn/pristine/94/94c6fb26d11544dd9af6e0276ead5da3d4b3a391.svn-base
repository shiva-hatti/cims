package com.iris.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.dateutility.enums.DateConstants;
import com.iris.dateutility.util.DateManip;
import com.iris.dto.Action;
import com.iris.dto.DynamicContent;
import com.iris.dto.EntityMasterDto;
import com.iris.dto.MailServiceBean;
import com.iris.dto.ReturnApprovalDataDto;
import com.iris.dto.ReturnDto;
import com.iris.dto.ReturnGroupMappingDto;
import com.iris.dto.ReturnGroupMappingRequest;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.dto.UserDto;
import com.iris.dto.WorkflowJsonBean;
import com.iris.exception.ApplicationException;
import com.iris.model.EntityBean;
import com.iris.model.EntityLabelBean;
import com.iris.model.FilingStatus;
import com.iris.model.ReturnApprovalDetail;
import com.iris.model.ReturnLabel;
import com.iris.model.ReturnsUploadDetails;
import com.iris.model.UserMaster;
import com.iris.model.UserRole;
import com.iris.model.WorkFlowActivity;
import com.iris.repository.ReturnApprovalDetailsRepo;
import com.iris.service.GenericService;
import com.iris.service.impl.ReturnApprovalDetailsService;
import com.iris.util.UtilMaster;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MethodConstants;
import com.iris.workflow.WorkflowUtility;

/**
 * @author sajadhav
 */
@RestController
@RequestMapping("/service/approvalService")
public class ApprovalController {

	private static final Logger LOGGER = LogManager.getLogger(ApprovalController.class);

	@Autowired
	private EntityMasterController entityMasterController;

	@Autowired
	private ReturnGroupController returnGroupController;

	@Autowired
	private GenericService<UserRole, Long> userRoleService;

	@Autowired
	private ReturnApprovalDetailsService returnApprovalDetailService;

	@Autowired
	private GenericService<ReturnsUploadDetails, Long> returnUploadDetailService;

	@Autowired
	private GenericService<UserMaster, Long> userMasterService;

	@Autowired
	private PrepareSendMailController prepareSendMailController;

	@Autowired
	private ReturnApprovalDetailsRepo returnApprovalDetailRepo;

	@Autowired
	private NotificationController notificationController;

	@Autowired
	private FileDetailsController fileDetailsController;
	
	private static final  String APPROVED = "APPROVED";
	
	private static final  String REJECTED = "REJECTED";
	
	private static final  String AUTO_APPROVED = "AUTO_APPROVED";
	
	private static final Object lock1 = new Object();
	
	@PostMapping(value = "/getPendingRecordForApproval")
	public ServiceResponse getPendingRecords(@RequestHeader(name = "JobProcessingId") String jobProcessId, @RequestBody UserDto userDto) {
		try {
			EntityMasterDto entityMasterDto = new EntityMasterDto();
			entityMasterDto.setUserId(userDto.getUserId());
			entityMasterDto.setRoleId(userDto.getRoleId());
			entityMasterDto.setLanguageCode(userDto.getLangCode());
			entityMasterDto.setIsActive(true);

			ServiceResponse serviceResponse = entityMasterController.getEntityMasterList(UUID.randomUUID().toString(), entityMasterDto);

			List<Long> entityIds = new ArrayList<>();
			if (serviceResponse.isStatus()) {
				@SuppressWarnings("unchecked")
				List<EntityBean> entityBeans = (List<EntityBean>) serviceResponse.getResponse();
				entityBeans.forEach(f -> {
					entityIds.add(f.getEntityId());
				});
			}

			ReturnGroupMappingRequest returnGroupMappingReq = new ReturnGroupMappingRequest();
			returnGroupMappingReq.setRoleId(userDto.getRoleId());
			returnGroupMappingReq.setUserId(userDto.getUserId());
			returnGroupMappingReq.setIsActive(true);
			returnGroupMappingReq.setLangId(userDto.getLangId());

			ServiceResponse returnGroupServiceResponse = returnGroupController.getReturnGroups(jobProcessId, returnGroupMappingReq);
			List<Long> returnIds = new ArrayList<>();

			if (returnGroupServiceResponse.isStatus()) {
				@SuppressWarnings("unchecked")
				List<ReturnGroupMappingDto> returnGroupMappingRtos = (List<ReturnGroupMappingDto>) returnGroupServiceResponse.getResponse();
				returnGroupMappingRtos.forEach(f -> {
					List<ReturnDto> returnList = f.getReturnList();
					returnList.forEach(r -> {
						returnIds.add(r.getReturnId());
					});
				});
			}

			UserRole userRole = userRoleService.getDataById(userDto.getRoleId());
			List<Long> activityIds = new ArrayList<>();
			userRole.getUserRoleActivityMapping().forEach(t -> {
				activityIds.add(t.getWorkFlowActivity().getActivityId());
			});

			List<ReturnApprovalDataDto> returnApprovalDtos = new ArrayList<>();
			if (!CollectionUtils.isEmpty(returnIds) && !CollectionUtils.isEmpty(entityIds) && !CollectionUtils.isEmpty(activityIds)) {
				if (userDto.getIsCount()) {
					Long filingCount = returnApprovalDetailRepo.getPendingForApprovalDataCount(activityIds, userDto.getUserId(), entityIds, returnIds);

					return new ServiceResponse.ServiceResponseBuilder().setStatus(true).setResponse(filingCount.intValue()).build();
				} else {
					Map<String, Object> valueMap = new HashMap<String, Object>();
					valueMap.put(ColumnConstants.USER_ID.getConstantVal(), userDto.getUserId());
					valueMap.put(ColumnConstants.ENTITYID.getConstantVal(), entityIds);
					valueMap.put(ColumnConstants.RETURNID.getConstantVal(), returnIds);
					valueMap.put(ColumnConstants.ACTIVITY_IDS.getConstantVal(), activityIds);

					List<ReturnApprovalDetail> returnApprovalDetailList = returnApprovalDetailService.getDataByObject(valueMap, MethodConstants.GET_PENDING_FOR_APPROVAL_DATA.getConstantVal());
					ReturnsUploadDetails returnsUploadDetails = null;
					for (ReturnApprovalDetail returnApprovalDetail : returnApprovalDetailList) {
						try {
							returnsUploadDetails = returnApprovalDetail.getReturnUploadDetails();
							ReturnApprovalDataDto returnApprovalDto = new ReturnApprovalDataDto();
							returnApprovalDto.setUploadId(returnsUploadDetails.getUploadId());
							returnApprovalDto.setReturnApprovalDtlId(returnApprovalDetail.getReturnApprovalDetailId());
							returnApprovalDto.setReturnId(returnsUploadDetails.getReturnObj().getReturnId());
							returnApprovalDto.setEntityId(returnsUploadDetails.getEntity().getEntityId());
							returnApprovalDto.setEntityCode(returnsUploadDetails.getEntity().getEntityCode());
							returnApprovalDto.setFilingStatusId(returnsUploadDetails.getFilingStatus().getFilingStatusId());
							returnApprovalDto.setRoleId(returnsUploadDetails.getUploadUsrRole().getUserRoleId());
							returnApprovalDto.setUploadedUserId(returnsUploadDetails.getUploadedBy().getUserId());
							returnApprovalDto.setUploadedUserName(returnsUploadDetails.getUploadedBy().getUserName());
							if(returnsUploadDetails.getFinYrFreqDesc()!= null) {
								returnApprovalDto.setFrequencyDescId(returnsUploadDetails.getFinYrFreqDesc().getFinYrFreqDescId());
								returnApprovalDto.setFrequencyDesc(returnsUploadDetails.getFinYrFreqDesc().getFinYrFreqDesc());
							}
							returnApprovalDto.setPreviousUploadId(returnsUploadDetails.getPrevUploadId());
							returnApprovalDto.setWorkflowId(returnsUploadDetails.getWorkFlowMaster().getWorkflowId());
							returnApprovalDto.setCurrentStep(returnApprovalDetail.getWorkflowStep());

							returnApprovalDto.setUploadChannel(returnApprovalDetail.getReturnUploadDetails().getFileDetailsBean().getUploadChannelIdFk().getUploadChannelDesc());
							returnApprovalDto.setUploadChannelId(returnApprovalDetail.getReturnUploadDetails().getFileDetailsBean().getUploadChannelIdFk().getUploadChannelId());
							returnApprovalDto.setFileType(returnApprovalDetail.getReturnUploadDetails().getFileType());
							returnApprovalDto.setInstanceName(returnApprovalDetail.getReturnUploadDetails().getInstanceFile());
							returnApprovalDto.setFileName(returnApprovalDetail.getReturnUploadDetails().getFileDetailsBean().getFileName());
							returnApprovalDto.setSupportiveDocName(returnApprovalDetail.getReturnUploadDetails().getAttachedFile());
							returnApprovalDto.setOriginalSupportiveDocName(returnApprovalDetail.getReturnUploadDetails().getFileDetailsBean().getSupportiveDocName());
							returnApprovalDto.setFilingStatus(returnsUploadDetails.getFilingStatus().getStatus());
							returnApprovalDto.setFrequency(returnApprovalDetail.getReturnUploadDetails().getFrequency().getFrequencyName());
							returnApprovalDto.setFileStatusId(returnsUploadDetails.getFilingStatus().getFilingStatusId());
							returnApprovalDto.setEndDateInLong(returnsUploadDetails.getEndDate().getTime());
							returnApprovalDto.setStartDateInLong(returnsUploadDetails.getStartDate().getTime());
							returnApprovalDto.setReturnCode(returnsUploadDetails.getReturnObj().getReturnCode());
							
							if(returnsUploadDetails.getUnlockingReqId()!= null) {
								returnApprovalDto.setUnlockRequestId(returnsUploadDetails.getUnlockingReqId().getUnlockingReqId());
							}
							
							if(returnsUploadDetails.getReturnPropertyValue()!= null) {
								returnApprovalDto.setReturnPropertyVal(returnsUploadDetails.getReturnPropertyValue().getReturnProValue());
							}
							
							ReturnLabel returnLabel = returnsUploadDetails.getReturnObj().getReturnLblSet().stream().filter(f -> f.getLangIdFk().getLanguageId().equals(userDto.getLangId())).findAny().orElse(null);
							if (returnLabel != null) {
								returnApprovalDto.setReturnName(returnLabel.getReturnLabel());
							} else {
								returnApprovalDto.setReturnName(returnsUploadDetails.getReturnObj().getReturnName());
							}

							EntityLabelBean entityLabelBean = returnsUploadDetails.getEntity().getEntityLabelSet().stream().filter(f -> f.getLanguageMaster().getLanguageId().equals(userDto.getLangId())).findAny().orElse(null);
							if (entityLabelBean != null) {
								returnApprovalDto.setEntityName(entityLabelBean.getEntityNameLabel());
							} else {
								returnApprovalDto.setEntityName(returnsUploadDetails.getEntity().getEntityName());
							}

							try {
								if (returnsUploadDetails.getFileDetailsBean().getCreationDate() != null) {
									returnApprovalDto.setUploadedDate(DateManip.formatAppDateTime(returnsUploadDetails.getFileDetailsBean().getCreationDate(), userDto.getDateFormat(), userDto.getCalendarFormat()));
								}
							} catch (Exception e) {
								LOGGER.error("Exception while parsing uploaded date : ", e);
							}

							if(returnsUploadDetails.getTaxonomyId()!=null) {
								returnApprovalDto.setTemplateVersionNo(returnsUploadDetails.getTaxonomyId().getVersionNumber());
							}
							
							returnsUploadDetails.getFileDetailsBean().setDateFormat(userDto.getDateFormat());
							returnsUploadDetails.getFileDetailsBean().setCalendarFormat(userDto.getCalendarFormat());
							returnApprovalDto.setActivityTrackerJson(fileDetailsController.getActivityTrackerJson(returnsUploadDetails.getFileDetailsBean(), fileDetailsController.prepareActivityMap()));
							returnApprovalDtos.add(returnApprovalDto);
						} catch (Exception e) {
							LOGGER.error("Exception for approval detail Id " + returnApprovalDetail.getReturnApprovalDetailId());
						}
					}
				}
				return new ServiceResponse.ServiceResponseBuilder().setStatus(true).setResponse(returnApprovalDtos).build();
			} else {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0832.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0832.toString())).build();
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_CONTROLLER.getConstantVal(), e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.EC0013.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString())).build();
		}
	}

	@PostMapping(value = "/approveRejectRecord")
	public ServiceResponse approveRejectRecords(@RequestHeader(name = "JobProcessingId") String jobProcessId,
			@RequestBody ReturnApprovalDataDto returnApprovalDataDto) {
		
		try {
			validateRequestObject(returnApprovalDataDto,jobProcessId);
			ReturnApprovalDetail returnApprovalDetail = null;
			ReturnsUploadDetails returnsUploadDetails = null;
			Date approveRejectOn = null;
			Action action = null;
			synchronized (lock1) {
				returnApprovalDetail = returnApprovalDetailService.getDataById(returnApprovalDataDto.getReturnApprovalDtlId());
				if(!StringUtils.isEmpty(returnApprovalDetail.getReviewStatus())) {
					if(returnApprovalDetail.getReviewStatus().equalsIgnoreCase(APPROVED)) {
						return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0488.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0488.toString())).build();
					}else {
						return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0489.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0489.toString())).build();
					}
				}
				
				returnsUploadDetails = returnApprovalDetail.getReturnUploadDetails();
				
				String worklowJson = returnApprovalDetail.getReturnUploadDetails().getWorkFlowMaster().getWorkFlowJson();
				
				WorkflowJsonBean workflowJsonBean = WorkflowUtility.getWorkflowJsonBeanOfCurrentStep(worklowJson, returnApprovalDetail.getWorkflowStep());
				
				action = workflowJsonBean.getActions().stream().filter(f -> f.getActionStatusId() == returnApprovalDataDto.getIsApproved()).findAny().orElse(null);
				
				approveRejectOn = new Date();
				if(action!= null) {
					returnApprovalDetail.setComment(returnApprovalDataDto.getComment());
					
					if(returnApprovalDataDto.getIsApproved() == 1) {
						returnApprovalDetail.setReviewStatus(GeneralConstants.APPROVED.getConstantVal());
					}else{
						returnApprovalDetail.setReviewStatus(GeneralConstants.REJECTED.getConstantVal());
					}
					
					UserMaster userMaster = new UserMaster();
					userMaster.setUserId(returnApprovalDataDto.getApprovalUserId());
					returnApprovalDetail.setApprovedRejectedBy(userMaster);
					
					UserRole userRole = new UserRole();
					userRole.setUserRoleId(returnApprovalDataDto.getApprovalRoleId());
					returnApprovalDetail.setUserRole(userRole);
					
					returnApprovalDetail.setApprovedRejectedOn(approveRejectOn);
					
					if(action.getNextStep() == 0) {
						//Step completed
						returnApprovalDetail.setComplete(true);
						FilingStatus filingStatus = new FilingStatus();
						filingStatus.setFilingStatusId(action.getFilingStatusId());
						returnsUploadDetails.setFilingStatus(filingStatus);
					}else {
						List<ReturnApprovalDetail> returnApprovalDtlList = new ArrayList<>();
						getReturnApprovalDtlList(returnApprovalDtlList, returnsUploadDetails, action.getNextStep(), worklowJson, approveRejectOn);
						
						FilingStatus filingStatus = getFillingStatus(returnApprovalDtlList,action.getFilingStatusId());
						returnsUploadDetails.setFilingStatus(filingStatus);
						
						if(CollectionUtils.isEmpty(returnsUploadDetails.getReturnApprovalDetailsList())) {
							returnsUploadDetails.setReturnApprovalDetailsList(returnApprovalDtlList);
						}else {
							returnsUploadDetails.getReturnApprovalDetailsList().addAll(returnApprovalDtlList);
						}
					}
					returnUploadDetailService.add(returnsUploadDetails);
				}else {
					return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0833.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0833.toString())).build();
				}
			}
			
			List<DynamicContent> dynamicContentList = prepareDynamicContentListForApproval(returnsUploadDetails,returnApprovalDataDto.getIsApproved(),returnApprovalDataDto, approveRejectOn,returnApprovalDataDto.getComment());

			sendMail(action.getNotify().getEmailalerttype(), GeneralConstants.UPLOAD_FILLING_MENU_ID.getConstantLongVal(), returnApprovalDataDto.getApprovalRoleId(), 
					returnApprovalDataDto.getApprovalUserId(), returnsUploadDetails.getEntity().getEntityCode(),dynamicContentList,returnsUploadDetails.getReturnObj().getReturnCode());
			
			notificationController.sendFilingApprovalNotificationToUsers(returnsUploadDetails.getUploadId(), returnApprovalDetail.getReturnApprovalDetailId(),  returnsUploadDetails.getUploadedBy().getUserId(), true);
			
			return new ServiceResponse.ServiceResponseBuilder().setStatus(true).setStatusCode(GeneralConstants.SUCCESS.getConstantVal()).build();
		}catch(Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_CONTROLLER.getConstantVal(), e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.EC0013.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString())).build();
		}
	}

	private List<DynamicContent> prepareDynamicContentListForApproval(ReturnsUploadDetails returnsUploadDetails, Integer approvedOrRejected, 
			ReturnApprovalDataDto returnApprovalDataDto, Date approveRejectOn, String comment) {
		String languageCode = "en";
		List<DynamicContent> dynamicContentList = new ArrayList<>();
		
		UserMaster userMaster = userMasterService.getDataById(returnApprovalDataDto.getApprovalUserId());
		
		DynamicContent dynamicContent = new DynamicContent();
		dynamicContent.setLabel(ObjectCache.getLabelKeyValue(languageCode,"field.entity.entityName"));
		EntityLabelBean entitylabel = returnsUploadDetails.getEntity().getEntityLabelSet().stream().filter(f-> f.getLanguageMaster().getLanguageCode().equals(languageCode)).findAny().orElse(null);
		if(entitylabel!= null) {
			dynamicContent.setValue(entitylabel.getEntityNameLabel());
		}else {
			dynamicContent.setValue(returnsUploadDetails.getEntity().getEntityName());
		}
		dynamicContentList.add(dynamicContent);
		
		dynamicContent = new DynamicContent();
		dynamicContent.setLabel(ObjectCache.getLabelKeyValue(languageCode,"field.return.name"));
		
		ReturnLabel returnLabel = returnsUploadDetails.getReturnObj().getReturnLblSet().stream().filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(languageCode)).findAny().orElse(null);
		if(returnLabel!= null) {
			dynamicContent.setValue(returnLabel.getReturnLabel());
		}else {
			dynamicContent.setValue(returnsUploadDetails.getReturnObj().getReturnName());
		}
		dynamicContentList.add(dynamicContent);
		
		
		dynamicContent = new DynamicContent();
		dynamicContent.setLabel(ObjectCache.getLabelKeyValue(languageCode,"field.reporting.startdate"));
		dynamicContent.setValue(DateManip.convertDateToString(returnsUploadDetails.getStartDate(), DateConstants.DD_MM_YYYY.getDateConstants()));
		dynamicContentList.add(dynamicContent);
		
		dynamicContent = new DynamicContent();
		dynamicContent.setLabel(ObjectCache.getLabelKeyValue(languageCode,"field.reporting.enddate"));
		dynamicContent.setValue(DateManip.convertDateToString(returnsUploadDetails.getEndDate(), DateConstants.DD_MM_YYYY.getDateConstants()));
		dynamicContentList.add(dynamicContent);
		
		dynamicContent = new DynamicContent();
		dynamicContent.setLabel(ObjectCache.getLabelKeyValue(languageCode,"field.filingMngt.approvedSlashRejected"));
		
		if(approvedOrRejected == 1) {
			dynamicContent.setValue(APPROVED);
			dynamicContentList.add(dynamicContent);
		}else{
			dynamicContent.setValue(REJECTED);
			dynamicContentList.add(dynamicContent);

			dynamicContent = new DynamicContent();
			dynamicContent.setLabel(ObjectCache.getLabelKeyValue(languageCode,"field.comments"));
			dynamicContent.setValue(comment);
			dynamicContentList.add(dynamicContent);
		}
		
		dynamicContent = new DynamicContent();
		dynamicContent.setLabel(ObjectCache.getLabelKeyValue(languageCode,"field.filingMngt.approvedRejectedBy"));
		dynamicContent.setValue(userMaster.getUserName());
		dynamicContentList.add(dynamicContent);
		
		dynamicContent = new DynamicContent();
		dynamicContent.setLabel(ObjectCache.getLabelKeyValue(languageCode,"field.filingMngt.approvedRejectedOn"));
		try {
			System.out.println(DateManip.formatAppDateTime(approveRejectOn, returnApprovalDataDto.getDatetFormat() + " " + returnApprovalDataDto.getTimeFormat(), returnApprovalDataDto.getCalendarFormat()));
			dynamicContent.setValue(DateManip.formatAppDateTime(approveRejectOn, returnApprovalDataDto.getDatetFormat() + " " + returnApprovalDataDto.getTimeFormat(), returnApprovalDataDto.getCalendarFormat()));
		} catch (Exception e) {
			dynamicContent.setValue("");
			LOGGER.error("Exception : ",e);
		}
		dynamicContentList.add(dynamicContent);
		
		return dynamicContentList;
	}

	void sendMail(Long alertId, Long menuId, Long roleId, Long userId, String entityCode,List<DynamicContent> dynamicContentList,String returnCode){
		try {
			LOGGER.info("Mail Sending started For Alert Id ");

			String processingId = UUID.randomUUID().toString();
			MailServiceBean mailServiceBean = new MailServiceBean();
			mailServiceBean.setAlertId(alertId);
			mailServiceBean.setMenuId(menuId);
			mailServiceBean.setRoleId(roleId);
			mailServiceBean.setUniqueId(processingId);
			mailServiceBean.setUserId(userId);
			mailServiceBean.setEntityCode(entityCode);
			mailServiceBean.setReturnCode(returnCode);
			mailServiceBean.setDynamicContentsList(dynamicContentList);
			
			List<MailServiceBean> mailServiceBeanList = new ArrayList<>();
			mailServiceBeanList.add(mailServiceBean);
			ServiceResponse serviceResponse = prepareSendMailController.prepareSendEmail(processingId, mailServiceBeanList);
			if(serviceResponse.isStatus()) {
				LOGGER.info("Mail sent successfully");
			}
		}catch(Exception e) {
			LOGGER.error("Exception while sending email", e);
		}
	
	}
	
	private FilingStatus getFillingStatus(List<ReturnApprovalDetail> returnApprovalDtlList, int filingStatusId) {
		for (int i = returnApprovalDtlList.size() - 1; i>=0 ; i--) {
			if(returnApprovalDtlList.get(i).getFilingStatusId()!= 0) {
				FilingStatus filingStatus = new FilingStatus();
				filingStatus.setFilingStatusId(returnApprovalDtlList.get(i).getFilingStatusId());
				return filingStatus;
			}else {
				continue;
			}
		}
		FilingStatus filingStatus = new FilingStatus();
		filingStatus.setFilingStatusId(filingStatusId);
		return filingStatus;
	}
	
	private void getReturnApprovalDtlList(List<ReturnApprovalDetail> returnApprovalDetails, ReturnsUploadDetails returnsUploadDetails, int stepNo, String workflowJson, Date approveRejectOn) {
		ReturnApprovalDetail newReturnApprovalDetail = null;
		
		newReturnApprovalDetail = new ReturnApprovalDetail();
		newReturnApprovalDetail.setReturnUploadDetails(returnsUploadDetails);
		WorkflowJsonBean workflowJsonBean = null;
		try {
			workflowJsonBean = WorkflowUtility.getWorkflowJsonBeanOfCurrentStep(workflowJson, stepNo);
			newReturnApprovalDetail.setWorkflowStep(workflowJsonBean.getStepNo());
		}catch(Exception e) {
			LOGGER.error("Exception:", e);
		}
		
		if(workflowJsonBean!=null) {
			WorkFlowActivity workFlowActivity = new WorkFlowActivity();
			workFlowActivity.setActivityId(new Long(workflowJsonBean.getActivities().get(0).getActivityId()+""));
			
			newReturnApprovalDetail.setWorkFlowActivity(workFlowActivity);
			newReturnApprovalDetail.setCreationTime(approveRejectOn);
			newReturnApprovalDetail.setApprovedRejectedOn(approveRejectOn);
			
			if(workflowJsonBean.isAutoApproved()) {
				newReturnApprovalDetail.setComment(AUTO_APPROVED);
				newReturnApprovalDetail.setReviewStatus(APPROVED);
				Action action = workflowJsonBean.getActions().stream().filter(f -> f.getActionStatusId() == 1).findAny().orElse(null);
				if(action!= null) {
					if(action.getNextStep()!= 0) {
						getReturnApprovalDtlList(returnApprovalDetails, returnsUploadDetails, workflowJsonBean.getStepNo(), workflowJson, approveRejectOn);
					}else {
						newReturnApprovalDetail.setFilingStatusId(action.getFilingStatusId());
						newReturnApprovalDetail.setComplete(true);
						returnApprovalDetails.add(newReturnApprovalDetail);
					}
				}
			}else {
				newReturnApprovalDetail.setComplete(false);
				returnApprovalDetails.add(newReturnApprovalDetail);
			}	
		}
	}
	
	private void validateRequestObject(ReturnApprovalDataDto returnApprovalDataDto, String jobProcessingId) throws ApplicationException {
			boolean isFailed = false;

			if (UtilMaster.isEmpty(jobProcessingId)) {
				isFailed = true;
				LOGGER.error("Request Transaction ID is empty");
			}

			if (returnApprovalDataDto.getReturnApprovalDtlId() == null) {
				isFailed = true;
				LOGGER.error("Return approval details Id is empty");
			}
			
			if (StringUtils.isEmpty(returnApprovalDataDto.getApprovalRoleId())) {
				isFailed = true;
				LOGGER.error("Approval Role Id is empty");
		   }
			
			if (StringUtils.isEmpty(returnApprovalDataDto.getApprovalUserId())) {
				isFailed = true;
				LOGGER.error("Approval User Id is empty");
		   }
			
			if (StringUtils.isEmpty(returnApprovalDataDto.getIsApproved())) {
				isFailed = true;
				LOGGER.error("Is Approved empty");
		    }
			
			if (isFailed) {
				throw new ApplicationException(ErrorCode.EC0391.toString(),ObjectCache.getErrorCodeKey(ErrorCode.EC0391.toString()));
			}
	
	}
	
}
