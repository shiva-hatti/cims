package com.iris.model;

import java.io.Serializable;
import java.util.Date;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.apache.commons.lang.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.CollectionUtils;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.iris.util.Validations;



/**
 * @author psawant
 * @version 1.0
 * @date 12/07/2018
 */
@Entity
@Table(name = "TBL_REGULATOR")
@JsonInclude(Include.NON_NULL)
public class Regulator implements Serializable {

	private static final long serialVersionUID = 883729007961721091L;
	private static final Logger LOGGER = LoggerFactory.getLogger(Regulator.class);
	@Id
//	@SequenceGenerator(name = "REGULATOR_ID_GENERATOR", sequenceName = "TBL_REGULATOR_SEQ", allocationSize = 1)
//	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "REGULATOR_ID_GENERATOR")
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "REGULATOR_ID")
	private Long regulatorId;

	@Column(name = "REGULATOR_NMAE")
	private String regulatorName;

	@Column(name = "REGULATOR_CODE")
	private String regulatorCode;

	@Column(name = "IS_ACTIVE")
	private Boolean isActive;

	@ManyToOne
	@JoinColumn(name = "CREATED_BY_FK")
	private UserMaster createdByFk;

	@Column(name = "CREATED_ON")
	private Date createdOn;

	@ManyToOne
	@JoinColumn(name = "LAST_MODIFIED_BY_FK")
	private UserMaster lastModifiedByFk;

	@Column(name = "LAST_MODIFIED_ON")
	private Date lastModifiedOn;

	@Column(name = "LAST_UPDATED_ON")
	private Date lastUpdatedOn;

	@OneToMany(mappedBy = "regulatorIdFk")
	private Set<RegulatorLabel> regulatorLblSet;

	@Column(name = "REGULATOR_LOGO")
	private String aseJscLogo;

	@Column(name = "IS_MASTER")
	private Boolean isMaster;

	/**
	 * @return the regulatorId
	 */
	public Long getRegulatorId() {
		return regulatorId;
	}

	/**
	 * @param regulatorId the regulatorId to set
	 */
	public void setRegulatorId(Long regulatorId) {
		this.regulatorId = regulatorId;
	}

	/**
	 * @return the regulatorName
	 */
	public String getRegulatorName() {
		return regulatorName;
	}

	/**
	 * @param regulatorName the regulatorName to set
	 */
	public void setRegulatorName(String regulatorName) {
		this.regulatorName = Validations.trimInput(regulatorName);
	}

	/**
	 * @return the regulatorCode
	 */
	public String getRegulatorCode() {
		return regulatorCode;
	}

	/**
	 * @param regulatorCode the regulatorCode to set
	 */
	public void setRegulatorCode(String regulatorCode) {
		this.regulatorCode = Validations.trimInput(regulatorCode);
	}

	/**
	 * @return the isActive
	 */
	public Boolean getIsActive() {
		return isActive;
	}

	/**
	 * @param isActive the isActive to set
	 */
	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	/**
	 * @return the createdByFk
	 */
	public UserMaster getCreatedByFk() {
		return createdByFk;
	}

	/**
	 * @param createdByFk the createdByFk to set
	 */
	public void setCreatedByFk(UserMaster createdByFk) {
		this.createdByFk = createdByFk;
	}

	/**
	 * @return the createdOn
	 */
	public Date getCreatedOn() {
		return createdOn;
	}

	/**
	 * @param createdOn the createdOn to set
	 */
	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	/**
	 * @return the lastModifiedByFk
	 */
	public UserMaster getLastModifiedByFk() {
		return lastModifiedByFk;
	}

	/**
	 * @param lastModifiedByFk the lastModifiedByFk to set
	 */
	public void setLastModifiedByFk(UserMaster lastModifiedByFk) {
		this.lastModifiedByFk = lastModifiedByFk;
	}

	/**
	 * @return the lastModifiedOn
	 */
	public Date getLastModifiedOn() {
		return lastModifiedOn;
	}

	/**
	 * @param lastModifiedOn the lastModifiedOn to set
	 */
	public void setLastModifiedOn(Date lastModifiedOn) {
		this.lastModifiedOn = lastModifiedOn;
	}

	/**
	 * @return the lastUpdatedOn
	 */
	public Date getLastUpdatedOn() {
		return lastUpdatedOn;
	}

	/**
	 * @param lastUpdatedOn the lastUpdatedOn to set
	 */
	public void setLastUpdatedOn(Date lastUpdatedOn) {
		this.lastUpdatedOn = lastUpdatedOn;
	}

	/**
	 * @return the regulatorLblSet
	 */
	public Set<RegulatorLabel> getRegulatorLblSet() {
		return regulatorLblSet;
	}

	/**
	 * @param regulatorLblSet the regulatorLblSet to set
	 */
	public void setRegulatorLblSet(Set<RegulatorLabel> regulatorLblSet) {
		this.regulatorLblSet = regulatorLblSet;
	}

	public String getLangRegulatorLabel(Long languageId) {
		if (CollectionUtils.isEmpty(this.regulatorLblSet)) {
			return null;
		}
		if (languageId == null) {
			return null;
		}
		try {
			for (RegulatorLabel regulatorLabel : this.regulatorLblSet) {
				if (regulatorLabel.getLangIdFk().getLanguageId().equals(languageId)) {
					return regulatorLabel.getRegulatorLabel();
				}
			}
		} catch (Exception e) {
			LOGGER.error(ExceptionUtils.getFullStackTrace(e), LOGGER);
		}
		return null;
	}

	/**
	 * @return the aseJscLogo
	 */
	public String getAseJscLogo() {
		return aseJscLogo;
	}

	/**
	 * @param aseJscLogo the aseJscLogo to set
	 */
	public void setAseJscLogo(String aseJscLogo) {
		this.aseJscLogo = Validations.trimInput(aseJscLogo);
	}

	/**
	 * @return the isMaster
	 */
	public Boolean getIsMaster() {
		return isMaster;
	}

	/**
	 * @param isMaster the isMaster to set
	 */
	public void setIsMaster(Boolean isMaster) {
		this.isMaster = isMaster;
	}

}