package com.iris.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.iris.dto.ReturnDto;
import com.iris.dto.ReturnEntityOutputDto;
import com.iris.dto.ReturnGroupMappingDto;
import com.iris.exception.ServiceException;
import com.iris.model.ReturnGroupMapping;
import com.iris.service.GenericService;

@Service
public class ReturnGroupServiceV2 implements GenericService<ReturnGroupMapping, Long> {

	private static final Logger LOGGER = LoggerFactory.getLogger(ReturnGroupServiceV2.class);

	@Override
	public ReturnGroupMapping add(ReturnGroupMapping entity) throws ServiceException {
		return null;
	}

	@Override
	public boolean update(ReturnGroupMapping entity) throws ServiceException {
		return false;
	}

	@Override
	public List<ReturnGroupMapping> getDataByIds(Long[] ids) throws ServiceException {
		return null;
	}

	@Override
	public ReturnGroupMapping getDataById(Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<ReturnGroupMapping> getDataByColumnValue(Map<String, List<String>> columnValueMap, String methodName) throws ServiceException {
		return null;
	}

	@Override
	public List<ReturnGroupMapping> getDataByColumnLongValue(Map<String, List<Long>> columnValueMap, String methodName) throws ServiceException {
		return null;
	}

	@Override
	public List<ReturnGroupMapping> getDataByObject(Map<String, Object> columnValueMap, String methodName) throws ServiceException {
		return null;
	}

	@Override
	public List<ReturnGroupMapping> getActiveDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<ReturnGroupMapping> getAllDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public void deleteData(ReturnGroupMapping bean) throws ServiceException {

	}

	public List<ReturnGroupMappingDto> transposeObject(List<ReturnEntityOutputDto> returnEntityOutputDtoList) {
		if (!CollectionUtils.isEmpty(returnEntityOutputDtoList)) {
			List<ReturnGroupMappingDto> returnGroupMappingDtos = new ArrayList<>();

			returnEntityOutputDtoList.forEach(f -> {
				ReturnGroupMappingDto returnGroupMappingDto = new ReturnGroupMappingDto();
				returnGroupMappingDto.setReturnGroupMapId(f.getReturnEntityGroupDto().getGroupId());
				returnGroupMappingDto.setDefaultGroupName(f.getReturnEntityGroupDto().getGroupName());

				ReturnDto returnDto = new ReturnDto();
				returnDto.setReturnId(f.getReturnId());
				returnDto.setReturnCode(f.getReturnCode());
				returnDto.setReturnName(f.getReturnName());

				if (returnGroupMappingDtos.indexOf(returnGroupMappingDto) != -1) {
					returnGroupMappingDto = returnGroupMappingDtos.get(returnGroupMappingDtos.indexOf(returnGroupMappingDto));
					returnGroupMappingDto.getReturnList().add(returnDto);
					if (!CollectionUtils.isEmpty(returnGroupMappingDto.getReturnList())) {
						returnGroupMappingDto.setReturnCount(returnGroupMappingDto.getReturnList().size());
					}
				} else {
					List<ReturnDto> returnDtoList = new ArrayList<>();
					returnDtoList.add(returnDto);
					returnGroupMappingDto.setReturnList(returnDtoList);
					if (!CollectionUtils.isEmpty(returnGroupMappingDto.getReturnList())) {
						returnGroupMappingDto.setReturnCount(returnGroupMappingDto.getReturnList().size());
					}
					returnGroupMappingDtos.add(returnGroupMappingDto);
				}
			});

			if (!CollectionUtils.isEmpty(returnGroupMappingDtos)) {
				returnGroupMappingDtos.sort((g1, g2) -> g1.getDefaultGroupName().compareTo(g2.getDefaultGroupName()));
			}
			return returnGroupMappingDtos;
		}
		return null;
	}

}
