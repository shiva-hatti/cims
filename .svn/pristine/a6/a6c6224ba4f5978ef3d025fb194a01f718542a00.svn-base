/**
 * 
 */
package com.iris.sdmx.lockrecord.controller;

import java.io.Serializable;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.exception.ApplicationException;
import com.iris.sdmx.lockrecord.bean.SdmxLockRecordBean;
import com.iris.sdmx.lockrecord.bean.SdmxLockRecordSetBean;
import com.iris.sdmx.lockrecord.bean.SdmxLockRecordStatusCheckBean;
import com.iris.sdmx.lockrecord.helper.SdmxLockRecordHelper;
import com.iris.sdmx.lockrecord.service.SdmxLockRecordService;
import com.iris.sdmx.lockrecord.validator.SdmxLockRecordValidator;
import com.iris.sdmx.util.SDMXConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;

/**
 * @author apagaria
 *
 */
@RestController
@RequestMapping("/service/sdmx/lockRecord")
public class SdmxLockRecordController implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Autowired
	private SdmxLockRecordService sdmxLockRecordService;

	@Autowired
	private SdmxLockRecordValidator sdmxLockRecordValidator;

	private static final Logger LOGGER = LogManager.getLogger(SdmxLockRecordController.class);

	@PostMapping("/user/{userId}")
	public ServiceResponse setLockOnRecord(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @RequestBody SdmxLockRecordSetBean sdmxLockRecordSetBean) {
		LOGGER.info("START - Set Lock on Record request received with Job Processing ID : " + jobProcessId);
		LOGGER.debug("Set Lock on Record request : " + sdmxLockRecordSetBean);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			// Validation
			sdmxLockRecordValidator.validateSetLockOnRecord(userId, jobProcessId, sdmxLockRecordSetBean);

			// Sorting and Base 64 conversion
			String recordDetailEncodedStr = SdmxLockRecordHelper.sortingNBase64FromRecordDetailJsonString(
					sdmxLockRecordSetBean.getRecordDetailEncodedJson(), jobProcessId);

			// Check Lock Status
			SdmxLockRecordBean sdmxLockRecordBean = sdmxLockRecordService
					.findByRecordDetailEncode(recordDetailEncodedStr, jobProcessId);
			Long recordLockId = null;
			if (sdmxLockRecordBean != null) {
				if (!sdmxLockRecordBean.getIsActive()) {
					recordLockId = sdmxLockRecordBean.getLockRecordId();
				} else {
					throw new ApplicationException("ER001", "Record already locked");
				}
			}
			// Save lock record
			sdmxLockRecordService.setLockOnRecord(sdmxLockRecordSetBean, jobProcessId, userId, recordLockId,
					recordDetailEncodedStr);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
//			e.printStackTrace();
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("END - Set Lock on Record request received with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	@PutMapping("/user/{userId}/status")
	public ServiceResponse updateLockOnRecordStatus(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId,
			@RequestBody SdmxLockRecordStatusCheckBean sdmxLockRecordStatusCheckBean) {
		LOGGER.info("START - update lock record status request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			// Validation
			sdmxLockRecordValidator.validateCheckLockRecordStatus(userId, jobProcessId,
					sdmxLockRecordStatusCheckBean.getRecordDetailEncodedJson());

			// Sorting and Base 64 conversion
			String recordDetailEncodedStr = SdmxLockRecordHelper.sortingNBase64FromRecordDetailJsonString(
					sdmxLockRecordStatusCheckBean.getRecordDetailEncodedJson(), jobProcessId);

			// Check Lock Status
			sdmxLockRecordService.findNSaveByRecordDetailEncodeNActive(recordDetailEncodedStr, Boolean.TRUE,
					jobProcessId);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("END - update lock record status request received with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	@PutMapping("/user/{userId}/checkLockRecordStatus")
	public ServiceResponse checkLockRecordStatus(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId,
			@RequestBody SdmxLockRecordStatusCheckBean sdmxLockRecordStatusCheckBean) {
		LOGGER.info("START - Check lock record status request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			// Validation
			sdmxLockRecordValidator.validateCheckLockRecordStatus(userId, jobProcessId,
					sdmxLockRecordStatusCheckBean.getRecordDetailEncodedJson());

			// Sorting and Base 64 conversion
			String recordDetailEncodedStr = SdmxLockRecordHelper.sortingNBase64FromRecordDetailJsonString(
					sdmxLockRecordStatusCheckBean.getRecordDetailEncodedJson(), jobProcessId);

			// Check Lock Status
			SdmxLockRecordBean sdmxLockRecordBean = sdmxLockRecordService
					.findByRecordDetailEncodeNActive(recordDetailEncodedStr, Boolean.TRUE, jobProcessId);
			// Response
			if (sdmxLockRecordBean != null) {
				serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
				serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
				serviceResponseBuilder.setResponse(sdmxLockRecordBean);
			} else {
				serviceResponseBuilder.setStatus(false);
				serviceResponseBuilder.setStatusCode(SDMXConstants.FAILURE_CODE);
				serviceResponseBuilder.setStatusMessage(SDMXConstants.FAILURE_MESSAGE);
			}
		} catch (ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId,
					applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("END - Check lock record status request received with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
}
