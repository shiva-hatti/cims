/**
 * 
 */
package com.iris.sdmx.exceltohtml.controller;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.exception.ApplicationException;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnPreviewBean;
import com.iris.sdmx.exceltohtml.service.SdmxReturnPreviewService;
import com.iris.sdmx.exceltohtml.validator.SdmxRetrunPreviewValidator;
import com.iris.sdmx.util.SDMXConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;

/**
 * @author apagaria
 *
 */
@RestController
@RequestMapping("/service/sdmx/returnPreview")
public class SdmxReturnPreviewController {

	private static final Logger LOGGER = LogManager.getLogger(SdmxReturnPreviewController.class);

	@Autowired
	private SdmxReturnPreviewService sdmxReturnPreviewService;

	@Autowired
	private SdmxRetrunPreviewValidator sdmxRetrunPreviewValidator;

	/**
	 * @param jobProcessId
	 * @param userId
	 * @return
	 */
	@GetMapping("/user/{userId}/returns")
	public ServiceResponse fetchElementList(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validateFetchAllRecord(userId, jobProcessId);
			List<SdmxReturnPreviewBean> sdmxReturnPreviewBeanList = sdmxReturnPreviewService.fetchAllRecord();
			serviceResponseBuilder.setResponse(sdmxReturnPreviewBeanList);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	private String getFileHtmlString(String outPutFilePath) throws IOException {
		StringBuilder contentBuilder = new StringBuilder();
		BufferedReader in = null;
		try {
			in = new BufferedReader(new FileReader(outPutFilePath));
			String str;
			while ((str = in.readLine()) != null) {
				contentBuilder.append(str);
			}

		} catch (IOException e) {
		} finally {
			if (in != null) {
				in.close();
			}
		}
		return contentBuilder.toString();
	}

	@GetMapping("/user/{userId}/returnPreview/{returnTemplateId}")
	public ServiceResponse fetchHtmlById(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("returnTemplateId") Long returnTemplateId) {
		LOGGER.info("START - Fetch Html By Id request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxRetrunPreviewValidator.validateFetchHtmlById(userId, jobProcessId, returnTemplateId);
			String htmlFilePath = sdmxReturnPreviewService.fetchHtmlByReturnTemplateId(returnTemplateId);
			String htmlStringContent = null;
			if (!StringUtils.isBlank(htmlFilePath)) {
				htmlStringContent = getFileHtmlString(htmlFilePath);
			}
			serviceResponseBuilder.setResponse(Base64.encodeBase64String(htmlStringContent.getBytes("utf-8")));
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Html By Id request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
}
