package com.iris.sdmx.elementdimensionmapping.controller;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.exception.ApplicationException;
import com.iris.model.RoleType;
import com.iris.model.UserMaster;
import com.iris.sdmx.dimesnsion.bean.DimensionMasterBean;
import com.iris.sdmx.dimesnsion.service.DimensionApprovalService;
import com.iris.sdmx.elementdimensionmapping.bean.ElementDimPendingBean;
import com.iris.sdmx.elementdimensionmapping.bean.ElementDimensionBean;
import com.iris.sdmx.elementdimensionmapping.bean.ElementDimensionModBean;
import com.iris.sdmx.elementdimensionmapping.service.ElementDimApprovalService;
import com.iris.sdmx.elementdimensionmapping.validator.ElementDimApprovalValidator;
import com.iris.sdmx.userMangement.bean.ApprovalInputBean;
import com.iris.service.GenericService;
import com.iris.util.UtilMaster;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;

/**
 * @author vjadhav
 *
 */

@RestController
@RequestMapping("/service/sdmx/approval")
public class ElementDimensionApprovalController {

	/**
	 * 
	 */
	private static final Logger LOGGER = LogManager.getLogger(ElementDimensionApprovalController.class);
	
	@Autowired
	private ElementDimApprovalValidator elementDimApprovalValidator; 
	
	@Autowired
	private ElementDimApprovalService elementDimApprovalService;
	
	@Autowired
	private GenericService<UserMaster, Long> userMasterService;
	
	@Autowired
	private DimensionApprovalService dimensionApprovalService;
	
	@PostMapping("/user/elementDimensionMap")
	public ServiceResponse fetchApprovalRequest(@RequestHeader("JobProcessingId") String jobProcessId,
			@RequestBody ApprovalInputBean approvalInputBean) {
		LOGGER.info("START - Fetch approval request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		ApprovalInputBean validInputBean = new ApprovalInputBean();
		try {
			elementDimApprovalValidator.validateFetchApprovalRequest(approvalInputBean, validInputBean, jobProcessId);
			List<ElementDimensionModBean> elementDimRequestList=elementDimApprovalService.getRequests(validInputBean);
			serviceResponseBuilder.setResponse(elementDimRequestList);
			
		} catch(ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + " Transaction ID : " + jobProcessId
					+ ", Error Code - " + applicationException.getErrorCode() + ", Error Msg - " + applicationException.getErrorMsg(), applicationException);
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + " Transaction ID : " + jobProcessId, applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		}catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
			
		}	
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch approval request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
	
	@PostMapping("/user/elementDimension/approveReject")
	public ServiceResponse approveRejectElement(@RequestHeader("JobProcessingId") String jobProcessId,
			@RequestBody ApprovalInputBean approvalInputBean) {
		LOGGER.info("START - Element Dimension approve/reject request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		ApprovalInputBean validInputBean = new ApprovalInputBean();
		try {
			elementDimApprovalValidator.validateApproveRejectElementRequest(approvalInputBean, validInputBean, jobProcessId);
			
			elementDimApprovalService.approveRejectElementDimensionRecord(validInputBean);
		} catch(ApplicationException applicationException) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + " Transaction ID : " + jobProcessId
					+ ", Error Code - " + applicationException.getErrorCode() + ", Error Msg - " + applicationException.getErrorMsg(), applicationException);
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + " Transaction ID : " + jobProcessId, applicationException);
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Element Dimension approve/reject request received with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}
	
	@PostMapping(value = "/isElementDimMapPending")
	public ServiceResponse isElementDimMapPending(@RequestHeader(name = "JobProcessingId") String jobProcessId, @RequestBody ElementDimPendingBean elementDimPendingBean) {
		LOGGER.info("Request received to check code list master pending or not for job processing Id : " + jobProcessId );
		
		try {
			validateInputRequestForRecordPending(jobProcessId, elementDimPendingBean);

			UserMaster userMaster = userMasterService.getDataById(elementDimPendingBean.getUserId());
			if(userMaster == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0638.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0638.toString())).build();
			} else if(userMaster.getRoleType() == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0481.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0481.toString())).build();
			}
			RoleType roleType = userMaster.getRoleType();
			
			if(GeneralConstants.ENTITY_ROLE_TYPE_ID.getConstantLongVal().equals(roleType.getRoleTypeId())) {
				//Don't have access to this module
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0613.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0613.toString())).build();
			}
			
			return new ServiceResponseBuilder().setStatus(true).setResponse(elementDimApprovalService.isElementDimensionPending(elementDimPendingBean.getDsdCode(),elementDimPendingBean.getElementVersion(),elementDimPendingBean.getAgencyCode())).build();
		}catch(ApplicationException e) {
			LOGGER.error("Exception occured for job processing Id : " + jobProcessId + "", e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(e.getErrorCode()).setStatusMessage(ObjectCache.getErrorCodeKey(e.getErrorCode())).build();
		}catch(Exception e) {
			LOGGER.error("Exception occured for job processing Id : " + jobProcessId + "", e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.EC0033.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0033.toString())).build();
		}
	}
	
	@PostMapping(value = "/isDimensionListPending/{elementVersion}/{agencyCode}")
	public ServiceResponse isDimensionListPending(@RequestHeader(name = "JobProcessingId") String jobProcessId, @RequestBody ElementDimensionBean elementDimensionBean,
			@PathVariable(name = "elementVersion") String elementVersion,@PathVariable(name = "agencyCode") String agencyCode) {
		LOGGER.info("Request received to check code list master pending or not for job processing Id : " + jobProcessId );
		
		try {
			validateInputRequestForDimListPending(jobProcessId, elementDimensionBean);

			UserMaster userMaster = userMasterService.getDataById(elementDimensionBean.getUserId());
			if(userMaster == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0638.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0638.toString())).build();
			} else if(userMaster.getRoleType() == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0481.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0481.toString())).build();
			}
			RoleType roleType = userMaster.getRoleType();
			
			if(GeneralConstants.ENTITY_ROLE_TYPE_ID.getConstantLongVal().equals(roleType.getRoleTypeId())) {
				//Don't have access to this module
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0613.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0613.toString())).build();
			}
			
			return new ServiceResponseBuilder().setStatus(true).setResponse(elementDimApprovalService.isDimensionListPending(elementDimensionBean.getDimensionmasterBeans(),
					agencyCode,elementVersion)).build();

		}catch(ApplicationException e) {
			LOGGER.error("Exception occured for job processing Id : " + jobProcessId + "", e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(e.getErrorCode()).setStatusMessage(ObjectCache.getErrorCodeKey(e.getErrorCode())).build();
		}catch(Exception e) {
			LOGGER.error("Exception occured for job processing Id : " + jobProcessId + "", e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.EC0033.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0033.toString())).build();
		}
	}
	
	private void validateInputRequestForRecordPending(String jobProcessingId, ElementDimPendingBean elementDimPendingBean) throws ApplicationException {
		if (UtilMaster.isEmpty(jobProcessingId) || UtilMaster.isEmpty(elementDimPendingBean.getElementVersion())
				|| UtilMaster.isEmpty(elementDimPendingBean.getDsdCode()) || UtilMaster.isEmpty(elementDimPendingBean.getUserId())
				|| UtilMaster.isEmpty(elementDimPendingBean.getRoleId())) {
			throw new ApplicationException(ErrorCode.E0889.toString(),ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString()));
		}
	}
	
	private void validateInputRequestForDimListPending(String jobProcessingId, ElementDimensionBean elementDimensionBean) throws ApplicationException {
		boolean nullFlag = false;
		List<DimensionMasterBean> dimensionList = elementDimensionBean.getDimensionmasterBeans();
		if (!dimensionList.isEmpty()) {
			for(DimensionMasterBean dimObj: dimensionList) {
				if(UtilMaster.isEmpty(dimObj.getDimensionCode())) {
					nullFlag = true;
					break;
				}
			}
			
			if(nullFlag) {
				throw new ApplicationException(ErrorCode.E0889.toString(),ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString()));

			}
		} else {
			throw new ApplicationException(ErrorCode.E0889.toString(),ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString()));

		}
		
		if(UtilMaster.isEmpty(elementDimensionBean.getUserId())) {
			throw new ApplicationException(ErrorCode.E0889.toString(),ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString()));

		}
		
	}
	
	
	
	
	
}
