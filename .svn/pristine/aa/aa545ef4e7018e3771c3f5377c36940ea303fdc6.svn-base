/**
 * 
 */
package com.iris.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.UUID;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.format.CellFormat;
import org.apache.poi.ss.format.CellFormatResult;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.iris.dto.ServiceResponse;
import com.iris.exception.ServiceException;
import com.iris.model.ReturnTemplate;
import com.iris.model.Scheduler;
import com.iris.model.SchedulerLog;
import com.iris.model.WebServiceComponentUrl;
import com.iris.sdmx.element.service.SdmxElementService;
import com.iris.sdmx.exceltohtml.bean.CodeListDimension;
import com.iris.sdmx.exceltohtml.bean.CommonDimension;
import com.iris.sdmx.exceltohtml.bean.InputDimension;
import com.iris.sdmx.exceltohtml.bean.ProcessUploadInputBean;
import com.iris.sdmx.exceltohtml.bean.SDMXReturnModelBean;
import com.iris.sdmx.exceltohtml.bean.SdmxModelCodesBean;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnModelInfoBean;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnPreviewBean;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnSheetInfoBean;
import com.iris.sdmx.exceltohtml.entity.SdmxModelCodesEntity;
import com.iris.sdmx.exceltohtml.entity.SdmxReturnModelInfoEntity;
import com.iris.sdmx.exceltohtml.entity.SdmxReturnPreviewEntity;
import com.iris.sdmx.exceltohtml.helper.SdmxModelCodesHelper;
import com.iris.sdmx.exceltohtml.service.SdmxModelCodesService;
import com.iris.sdmx.exceltohtml.service.SdmxReturnModelInfoService;
import com.iris.sdmx.exceltohtml.service.SdmxReturnPreviewService;
import com.iris.sdmx.exceltohtml.service.SdmxReturnSheetInfoService;
import com.iris.sdmx.lockrecord.bean.SdmxLockRecordSetBean;
import com.iris.sdmx.lockrecord.bean.SdmxLockRecordStatusCheckBean;
import com.iris.sdmx.lockrecord.helper.SdmxLockRecordHelper;
import com.iris.sdmx.lockrecord.service.SdmxLockRecordService;
import com.iris.service.GenericService;
import com.iris.util.JsonUtility;
import com.iris.util.ResourceUtil;
import com.iris.util.SdmxDataTemplateStatus;
import com.iris.util.Validations;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MethodConstants;
import com.iris.webservices.client.CIMSRestWebserviceClient;

/**
 * @author apagaria
 *
 */
@RestController
public class SdmxDataTemplateUploadController {

	/**
	 * 
	 */
	private static final Logger LOGGER = LogManager.getLogger(SdmxDataTemplateUploadController.class);

	/**
	 * 
	 */
	@Autowired
	private GenericService<WebServiceComponentUrl, Long> webServiceComponentService;

	/**
	 * 
	 */
	@Autowired
	private SdmxReturnModelInfoService sdmxReturnModelInfoService;

	@Autowired
	private SdmxElementService sdmxElementService;

	@Autowired
	private SdmxLockRecordService sdmxLockRecordService;

	/**
	 * 
	 */
	@Autowired
	private SdmxModelCodesService sdmxModelCodesService;

	/**
	 * 
	 */
	@Autowired
	private SdmxReturnPreviewService sdmxReturnPreviewService;

	private static final String HTML_EXT = ".html";

	private static final String XLSX_EXT = ".xlsx";

	/**
	 * 
	 */
	@Autowired
	private SdmxReturnSheetInfoService sdmxReturnSheetInfoService;

	@Scheduled(cron = "${cron.data.template.upload}")
	public void processUploadedDataTemplate() {
		String jobProcessingId = UUID.randomUUID().toString();
		LOGGER.info("Scheduler started with Job processing ID {}", jobProcessingId);
		Long schedulerLogId = null;
		Scheduler scheduler = getSchedulerStatus(jobProcessingId);
		if (scheduler != null) {
			if (scheduler.getIsRunning().equals(Boolean.TRUE)) {
				LOGGER.error("Error while starting scheduler -> Reason : Schduler is alrady running ");
				return;
			}

			SdmxReturnPreviewBean sdmxReturnPreviewBean = null;
			try {

				sdmxReturnPreviewBean = sdmxReturnPreviewService.fetchEntityByStatusId(1, true);
				if (sdmxReturnPreviewBean != null) {
					schedulerLogId = makeSchedulerStartEntry(sdmxReturnPreviewBean.getReturnPreviewTypeId(),
							scheduler.getSchedulerId(), jobProcessingId);
					if (schedulerLogId == null) {
						LOGGER.error("Error while starting scheduler -> Reason : Schduler Log ID not received ");
						return;
					}
				}
			} catch (Exception e) {
				LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
				return;
			}
			int successfullyProcessedRecord = 1;
			if (sdmxReturnPreviewBean != null) {
				ProcessUploadInputBean processUploadInputBean = new Gson()
						.fromJson(sdmxReturnPreviewBean.getOtherDetailJson(), ProcessUploadInputBean.class);
				List<SdmxReturnPreviewEntity> sdmxReturnPreviewEntities = null;
				try {
					saveSdmxReturnSheetInfo(processUploadInputBean, sdmxReturnPreviewBean.getCreatedBy(),
							sdmxReturnPreviewBean.getReturnTemplateIdFk(), sdmxReturnPreviewEntities,
							sdmxReturnPreviewBean);
					// Uploaded Return Lock release
					// Request Bean
					SdmxLockRecordStatusCheckBean sdmxLockRecordStatusCheckBean = new SdmxLockRecordStatusCheckBean();

					Map<String, Long> otherDetailMap = new HashMap<>();

					otherDetailMap.put("returnTemplateId", sdmxReturnPreviewBean.getReturnTemplateIdFk());
					sdmxLockRecordStatusCheckBean.setRecordDetailEncodedJson(
							Base64.encodeBase64String((new Gson().toJson(otherDetailMap)).getBytes()));
					// Sorting and Base 64 conversion
					String recordDetailEncodedStr = SdmxLockRecordHelper.sortingNBase64FromRecordDetailJsonString(
							sdmxLockRecordStatusCheckBean.getRecordDetailEncodedJson(), jobProcessingId);

					// Check Lock Status
					sdmxLockRecordService.findNSaveByRecordDetailEncodeNActive(recordDetailEncodedStr, Boolean.TRUE,
							jobProcessingId);

					// Relative Return Lock release
					if (!StringUtils.isBlank(processUploadInputBean.getOldReturnTemplateId())) {
						sdmxLockRecordStatusCheckBean = new SdmxLockRecordStatusCheckBean();
						otherDetailMap = new HashMap<>();
						otherDetailMap.put("returnTemplateId",
								Long.parseLong(processUploadInputBean.getOldReturnTemplateId()));
						sdmxLockRecordStatusCheckBean.setRecordDetailEncodedJson(
								Base64.encodeBase64String((new Gson().toJson(otherDetailMap)).getBytes()));
						// Sorting and Base 64 conversion
						recordDetailEncodedStr = SdmxLockRecordHelper.sortingNBase64FromRecordDetailJsonString(
								sdmxLockRecordStatusCheckBean.getRecordDetailEncodedJson(), jobProcessingId);

						// Check Lock Status
						sdmxLockRecordService.findNSaveByRecordDetailEncodeNActive(recordDetailEncodedStr, Boolean.TRUE,
								jobProcessingId);

					}

				} catch (EncryptedDocumentException | InvalidFormatException | IOException e) {
					// TODO Auto-generated catch block
					// e.printStackTrace();
					LOGGER.error("Exception with sdmx scheduler - ", e);
				}
				makeSchedulerStopEntry(successfullyProcessedRecord, schedulerLogId, scheduler.getSchedulerId(),
						jobProcessingId);
			}
		} else {
			LOGGER.error(ErrorConstants.SCHEDULER_INFO_NOT_PRESENT.getConstantVal());
		}
	}

	private void deactivateOldTemplate(Long returnTemplateId, Long currentReturnPreviewTypeId) {
		// Deactivate old data templates

		ReturnTemplate returnTemplate = new ReturnTemplate();
		returnTemplate.setReturnTemplateId(returnTemplateId);
		List<SdmxReturnPreviewEntity> sdmxReturnPreviewEntities = sdmxReturnPreviewService
				.fetchActiveByReturnTemplateId(returnTemplate, true);
		for (SdmxReturnPreviewEntity sdmxReturnPreviewEntity : sdmxReturnPreviewEntities) {
			if (currentReturnPreviewTypeId != sdmxReturnPreviewEntity.getReturnPreviewTypeId()) {
				// Deactivate Return Preview records
				sdmxReturnPreviewEntity.setIsActive(false);
				sdmxReturnPreviewEntity.setStatusId(SdmxDataTemplateStatus.DEACTIVATED.getStatusId());
				sdmxReturnPreviewEntity.setStatusMessage(SdmxDataTemplateStatus.DEACTIVATED.getStatusMessage());
				sdmxReturnPreviewService.add(sdmxReturnPreviewEntity);

				// Delete return model info entries
				List<SdmxModelCodesEntity> modelCodesEntityList = new ArrayList<>();
				List<SdmxReturnModelInfoEntity> sdmxReturnModelInfoEntityList = sdmxReturnModelInfoService
						.findListByReturnTemplate(returnTemplate);
				for (SdmxReturnModelInfoEntity sdmxReturnModelInfoEntity : sdmxReturnModelInfoEntityList) {
					modelCodesEntityList.add(sdmxReturnModelInfoEntity.getModelCodesIdFk());
					sdmxReturnModelInfoEntity.setIsActive(Boolean.FALSE);
					sdmxReturnModelInfoService.add(sdmxReturnModelInfoEntity);
				}

				// Deactivate unmapped mode code ids
				for (SdmxModelCodesEntity sdmxModelCodesEntity : modelCodesEntityList) {
					if (!sdmxReturnModelInfoService.getBeanByModelCode(sdmxModelCodesEntity.getModelCodesId())) {
						sdmxModelCodesEntity.setIsActive(Boolean.FALSE);
						sdmxModelCodesService.add(sdmxModelCodesEntity);
					}
				}
			}
		}
	}

	private void saveSdmxReturnSheetInfo(ProcessUploadInputBean processUploadInputBean, Long userId,
			Long returnTemplateId, List<SdmxReturnPreviewEntity> sdmxReturnPreviewEntities,
			SdmxReturnPreviewBean sdmxReturnPreviewBean)
			throws EncryptedDocumentException, InvalidFormatException, IOException {

		// Update return preview status
		sdmxReturnPreviewBean.setStatusId(SdmxDataTemplateStatus.IN_PROGRESS.getStatusId());
		sdmxReturnPreviewBean.setStatusMessage(SdmxDataTemplateStatus.IN_PROGRESS.getStatusMessage());
		sdmxReturnPreviewService.saveEntityByBean(sdmxReturnPreviewBean);

		// Deactivate Other templates
		deactivateOldTemplate(returnTemplateId, sdmxReturnPreviewBean.getReturnPreviewTypeId());

		Type listType = new TypeToken<ArrayList<SdmxReturnSheetInfoBean>>() {
		}.getType();

		// return sheet info details
		List<SdmxReturnSheetInfoBean> sdmxReturnSheetInfoBeanList = new Gson().fromJson(
				new String(Base64.decodeBase64(processUploadInputBean.getSheetInfoBean().getBytes("utf-8"))), listType);
		Type MapType = new TypeToken<Map<String, List<Integer>>>() {
		}.getType();
		Map<String, List<Integer>> sheetCellMapping = new Gson()
				.fromJson(processUploadInputBean.getSheetCellMappingJson(), MapType);
		Map<Integer, SdmxReturnModelInfoEntity> oldCellRefWithModelCodeMap = new HashMap<>();
		Map<String, Long> sheetCodeNewIdMap = new HashMap<>();
		sdmxReturnSheetInfoService.saveEntityByBean(sdmxReturnSheetInfoBeanList, returnTemplateId, userId,
				oldCellRefWithModelCodeMap, sheetCodeNewIdMap, sheetCellMapping,
				processUploadInputBean.getOldReturnTemplateId());

		if (StringUtils.isBlank(processUploadInputBean.getOldReturnTemplateId())) {
			String xlsFilePath = ResourceUtil.getKeyValue("filepath.root") + File.separator
					+ ResourceUtil.getKeyValue("excel.to.html.xls.base.path") + File.separator
					+ processUploadInputBean.getReturnCode() + File.separator + processUploadInputBean.getFileName()
					+ XLSX_EXT;

			InputStream in = new FileInputStream(xlsFilePath);
			Workbook wb = WorkbookFactory.create(in);
			Sheet sheet = wb.getSheetAt(0);
			Iterator<Row> rows = sheet.rowIterator();
			Map<Integer, String> cellRefJsonMapping = new HashMap<>();
			int rowCount = 0;
			while (rows.hasNext()) {
				rowCount++;
				Row row = rows.next();
				String labelValue = "";
				row.getLastCellNum();
				Cell cell = row.getCell(2);
				if (cell != null) {
					CellStyle style = cell.getCellStyle();
					// Set the value that is rendered for the cell
					// also applies the format
					CellFormat cf = CellFormat.getInstance(style.getDataFormatString());
					CellFormatResult result = cf.apply(cell);
					String content = result.text;
					if (!StringUtils.isBlank(content)) {
						cell = row.getCell(5);
						style = cell.getCellStyle();
						// Set the value that is rendered for the cell
						// also applies the format
						cf = CellFormat.getInstance(style.getDataFormatString());
						result = cf.apply(cell);
						if (!StringUtils.isBlank(result.text)) {
							if (NumberUtils.isDigits(content)) {
								cellRefJsonMapping.put(Integer.parseInt(content), result.text);
							}
						}
					}
				}
			}
			for (Map.Entry<Integer, String> entry : cellRefJsonMapping.entrySet()) {
				Gson gson = new Gson();
				SDMXReturnModelBean sdmxReturnModelBean = convertEleSDMXModelToJSON(entry.getValue());
				String sdmxReturnModelJson = gson.toJson(sdmxReturnModelBean);
				sdmxReturnModelJson = sortJsonStr(sdmxReturnModelJson, gson);
				String sdmxReturnModelJsonBase64Enc = Base64.encodeBase64String(sdmxReturnModelJson.getBytes());
				SdmxModelCodesBean sdmxModelCodesBean = sdmxModelCodesService
						.findEntityByModelCodeHash(sdmxReturnModelJsonBase64Enc);
				Long modelCodeIdFk = null;
				if (sdmxModelCodesBean == null) {
					sdmxModelCodesBean = new SdmxModelCodesBean();
					Long elementId = sdmxElementService.findByDsdCodeAndVerAndIsActive(sdmxReturnModelBean.getDsdId(),
							sdmxReturnModelBean.getElementVersion(), true);
					sdmxModelCodesBean.setElementIdFk(elementId);
					sdmxModelCodesBean.setModelDim(sdmxReturnModelJson);
					sdmxModelCodesBean.setModelDimHash(sdmxReturnModelJsonBase64Enc);
					sdmxModelCodesBean.setModelCode(
							SdmxModelCodesHelper.generateDMISeq(sdmxModelCodesService.findMaxDMIModelCodes("DMI")));
					sdmxModelCodesBean.setIsActive(true);
					modelCodeIdFk = sdmxModelCodesService.saveEntityByBean(sdmxModelCodesBean, userId);
				} else {
					modelCodeIdFk = sdmxModelCodesBean.getModelCodesId();
					if (!sdmxModelCodesBean.getIsActive()) {
						sdmxModelCodesBean.setIsActive(true);
						sdmxModelCodesService.saveEntityByBean(sdmxModelCodesBean, userId);
					}
				}

				String sheetCode = null;
				SdmxReturnModelInfoBean sdmxReturnModelInfoBean = new SdmxReturnModelInfoBean();
				sdmxReturnModelInfoBean.setModelCodesIdFk(modelCodeIdFk);
				sdmxReturnModelInfoBean.setReturnCellRef(entry.getKey());
				sdmxReturnModelInfoBean.setIsActive(true);
				for (Map.Entry<String, List<Integer>> sheetCellMappingEntry : sheetCellMapping.entrySet()) {
					List<Integer> cellRefList = sheetCellMappingEntry.getValue();
					if (cellRefList.contains(entry.getKey())) {
						sheetCode = sheetCellMappingEntry.getKey();
						break;
					}
				}
				if (!StringUtils.isBlank(sheetCode)) {
					Long newReturnSheetInfoId = sheetCodeNewIdMap.get(sheetCode);
					sdmxReturnModelInfoBean.setReturnSheetIdFk(newReturnSheetInfoId);
				}
				sdmxReturnModelInfoService.saveEntityByBean(sdmxReturnModelInfoBean, userId);
			}
		} else {
			// Request Bean
			SdmxLockRecordSetBean sdmxLockRecordSetBean = new SdmxLockRecordSetBean();
			sdmxLockRecordSetBean.setLockedBy(userId);
			sdmxLockRecordSetBean.setModuleId(2L);
			Map<String, Long> otherDetailMap = new HashMap<>();

			otherDetailMap.put("returnTemplateId", Long.parseLong(processUploadInputBean.getOldReturnTemplateId()));
			sdmxLockRecordSetBean.setRecordDetailEncodedJson(
					Base64.encodeBase64String((new Gson().toJson(otherDetailMap)).getBytes()));

			for (Map.Entry<Integer, SdmxReturnModelInfoEntity> oldCellRefWithModelEntry : oldCellRefWithModelCodeMap
					.entrySet()) {
				Long returnSheetIdFk = null;
				for (Map.Entry<String, List<Integer>> sheetCellEntry : sheetCellMapping.entrySet()) {
					List<Integer> sheetMappingCellList = sheetCellEntry.getValue();
					if (sheetMappingCellList.contains(oldCellRefWithModelEntry.getKey())) {
						returnSheetIdFk = sheetCodeNewIdMap.get(sheetCellEntry.getKey());
						break;
					}
				}
				SdmxReturnModelInfoBean sdmxReturnModelInfoBean = new SdmxReturnModelInfoBean();
				sdmxReturnModelInfoBean
						.setModelCodesIdFk(oldCellRefWithModelEntry.getValue().getModelCodesIdFk().getModelCodesId());
				sdmxReturnModelInfoBean.setReturnCellRef(oldCellRefWithModelEntry.getKey());
				sdmxReturnModelInfoBean.setIsActive(true);
				sdmxReturnModelInfoBean.setReturnSheetIdFk(returnSheetIdFk);
				sdmxReturnModelInfoService.saveEntityByBean(sdmxReturnModelInfoBean, userId);
			}
		}
		sdmxReturnPreviewBean.setStatusId(SdmxDataTemplateStatus.UPLOADED_SUCCESSFULLY.getStatusId());
		sdmxReturnPreviewBean.setStatusMessage(SdmxDataTemplateStatus.UPLOADED_SUCCESSFULLY.getStatusMessage());
		sdmxReturnPreviewService.saveEntityByBean(sdmxReturnPreviewBean);
	}

	private void makeSchedulerStopEntry(int successfullyProcessedRecord, Long schedulerLogId, Long schedulerId,
			String jobProcessingId) {
		try {
			if (schedulerLogId != null) {
				SchedulerLog schedulerLog = new SchedulerLog();
				schedulerLog.setSuccessfullyProcessedCount(Long.valueOf(successfullyProcessedRecord));
				schedulerLog.setId(schedulerLogId);
				Scheduler scheduler = new Scheduler();
				scheduler.setSchedulerId(schedulerId);
				scheduler.setIsRunning(false);
				schedulerLog.setSchedulerIdFk(scheduler);
				CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

				WebServiceComponentUrl componentUrl = getWebServiceComponentURL(
						GeneralConstants.ADD_UPDATE_SCHEDULER_LOG.getConstantVal(),
						CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);

				Map<String, String> headerMap = new HashMap<>();
				headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);

				String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl,
						schedulerLog, null, headerMap);

				ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring,
						ServiceResponse.class);

				if (!serviceResponse.isStatus()) {
					LOGGER.info("Error while stopping scheduler -> Reason : Schduler is alrady stopped ");
				} else {
					LOGGER.info("Scheduler stopped successfully ");
				}
			} else {
				LOGGER.error("Scheduler Log Id not found");
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
	}

	private Long makeSchedulerStartEntry(Long totalRecordCount, Long schedulerId, String jobProcessingId) {
		try {
			SchedulerLog schedulerLog = new SchedulerLog();
			schedulerLog.setTakedRecordsCount(totalRecordCount);
			Scheduler scheduler = new Scheduler();
			scheduler.setSchedulerId(schedulerId);
			scheduler.setIsRunning(true);
			schedulerLog.setSchedulerIdFk(scheduler);
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(
					GeneralConstants.ADD_UPDATE_SCHEDULER_LOG.getConstantVal(),
					CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);

			Map<String, String> headerMap = new HashMap<>();
			headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);

			String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, schedulerLog,
					null, headerMap);

			Type listToken = new TypeToken<ServiceResponse>() {
			}.getType();
			ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, listToken);
			Long schedulerLogId = null;

			if (!serviceResponse.isStatus()) {
				LOGGER.error("False status received from API with status message " + serviceResponse.getStatusCode());
				return null;
			} else {
				listToken = new TypeToken<SchedulerLog>() {
				}.getType();
				SchedulerLog schedulerLog1 = JsonUtility.getGsonObject().fromJson(serviceResponse.getResponse() + "",
						listToken);
				schedulerLogId = schedulerLog1.getId();
			}
			return schedulerLogId;
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return null;
	}

	private Scheduler getSchedulerStatus(String jobProcessingId) {
		try {
			String SCHEDULER_CODE = "SDMX_DATA_TEMPLATE_SCHEDULER";
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

			Map<String, String> headerMap = new HashMap<>();
			headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);
			headerMap.put(GeneralConstants.SCHEDULER_CODE.getConstantVal(), SCHEDULER_CODE);

			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(
					GeneralConstants.GET_ACTIVE_SCHEDULER_STATUS_BY_CODE.getConstantVal(),
					CIMSRestWebserviceClient.HTTP_METHOD_TYPE_GET);
			String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, null, null,
					headerMap);

			Type listToken = new TypeToken<ServiceResponse>() {
			}.getType();
			ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, listToken);

			if (!serviceResponse.isStatus()) {
				LOGGER.error("False status received from API with status message " + serviceResponse.getStatusCode());
				return null;
			} else {
				if (serviceResponse.getResponse() != null) {
					listToken = new TypeToken<Scheduler>() {
					}.getType();
					return JsonUtility.getGsonObject().fromJson(serviceResponse.getResponse() + "", listToken);
				} else {
					LOGGER.error("response object not present in the response string, response received from API : {}"
							+ responsestring);
				}
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return null;
	}

	private WebServiceComponentUrl getWebServiceComponentURL(String componentName, String methodType) {
		Map<String, List<String>> valueMap = new HashMap<>();

		List<String> valueList = new ArrayList<>();
		valueList.add(componentName);
		valueMap.put(ColumnConstants.COMPONENTTYPE.getConstantVal(), valueList);

		valueList = new ArrayList<>();
		valueList.add(methodType);
		valueMap.put(ColumnConstants.METHODTYPE.getConstantVal(), valueList);

		WebServiceComponentUrl componentUrl = null;
		try {
			componentUrl = webServiceComponentService.getDataByColumnValue(valueMap,
					MethodConstants.GET_ACTIVE_DATA_BY_COMPONENTTYPE_METHODTYPE.getConstantVal()).get(0);
		} catch (ServiceException e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return componentUrl;
	}

	private SDMXReturnModelBean convertEleSDMXModelToJSON(String input) {
		if (StringUtils.isBlank(input)) {
			return null;
		}

		String[] sdmxModelArrHash, sdmxModelArrSemiColon, sdmxModelArrHyphen, dimValPipe;
		;
		String splitVal;

		String sdmxModel = input;

		sdmxModelArrHash = sdmxModel.split("#"); // #

		if (sdmxModelArrHash == null) {
			return null;
		}

		SDMXReturnModelBean sdmxReturnModelBean = new SDMXReturnModelBean();

		List<CodeListDimension> codeListDim;
		List<CommonDimension> commonDimension;
		List<InputDimension> inputDimension;

		CodeListDimension codeList;
		CommonDimension commonDim;
		InputDimension inputDim;

		for (String sdmxModelArrHashVal : sdmxModelArrHash) {
			if (sdmxModelArrHashVal.contains("[Element]")) {
				splitVal = sdmxModelArrHashVal.replace("[Element]", "");

				sdmxModelArrSemiColon = splitVal.split(";"); // ;

				if (sdmxModelArrSemiColon == null) {
					continue;
				}

				for (String sdmxModelArrSemiColonVal : sdmxModelArrSemiColon) {
					if (StringUtils.isEmpty(sdmxModelArrSemiColonVal)) {
						continue;
					}
					sdmxReturnModelBean.setDsdId(Validations.trimInput(sdmxModelArrSemiColonVal));
				}

				continue;
			} else if (sdmxModelArrHashVal.contains("[Codelist Dimension]")) {
				splitVal = sdmxModelArrHashVal.replace("[Codelist Dimension]", "");

				sdmxModelArrSemiColon = splitVal.split(";"); // ;

				if (sdmxModelArrSemiColon == null) {
					continue;
				}

				codeListDim = new ArrayList<>();

				for (String sdmxModelArrSemiColonVal : sdmxModelArrSemiColon) {
					if (StringUtils.isEmpty(sdmxModelArrSemiColonVal)) {
						continue;
					}

					// sdmxModelArrHyphen =
					// sdmxModelArrSemiColonVal.split(Config.CODE_LIST_DIM_SEPARATOR); // -
					sdmxModelArrHyphen = sdmxModelArrSemiColonVal.split("[|]"); // |

					if (sdmxModelArrHyphen == null || sdmxModelArrHyphen.length > 2) {
						continue;
					}

					codeList = new CodeListDimension();
					codeList.setDimConceptId(sdmxModelArrHyphen[0]);
					if (sdmxModelArrHyphen == null || sdmxModelArrHyphen.length > 1) {
						codeList.setClValueCode(sdmxModelArrHyphen[1]);
					}

					codeListDim.add(codeList);
				}

				if (!CollectionUtils.isEmpty(codeListDim)) {

					codeListDim.sort((CodeListDimension s1, CodeListDimension s2) -> s1.getDimConceptId()
							.compareTo(s2.getDimConceptId()));

					sdmxReturnModelBean.setClosedDim(codeListDim);
				}

				continue;
			} else if (sdmxModelArrHashVal.contains("[Common Dimension]")) {
				splitVal = sdmxModelArrHashVal.replace("[Common Dimension]", "");

				sdmxModelArrSemiColon = splitVal.split(";"); // ;

				if (sdmxModelArrSemiColon == null) {
					continue;
				}

				commonDimension = new ArrayList<>();

				for (String sdmxModelArrSemiColonVal : sdmxModelArrSemiColon) {
					if (StringUtils.isEmpty(sdmxModelArrSemiColonVal)) {
						continue;
					}
					dimValPipe = sdmxModelArrSemiColonVal.split("[|]");

					commonDim = new CommonDimension();

					if (dimValPipe.length > 1) {
						commonDim.setDimConceptId(dimValPipe[0].trim());
						commonDim.setClValueCode(dimValPipe[1].trim());
					} else {
						commonDim.setDimConceptId(sdmxModelArrSemiColonVal);
					}
					commonDimension.add(commonDim);
				}

				if (!CollectionUtils.isEmpty(commonDimension)) {
					commonDimension.sort((CommonDimension s1, CommonDimension s2) -> s1.getDimConceptId()
							.compareTo(s2.getDimConceptId()));
					sdmxReturnModelBean.setCommonDimension(commonDimension);
				}
				continue;
			} else if (sdmxModelArrHashVal.contains("[Open Dimension]")) {
				splitVal = sdmxModelArrHashVal.replace("[Open Dimension]", "");

				sdmxModelArrSemiColon = splitVal.split(";"); // ;

				if (sdmxModelArrSemiColon == null) {
					continue;
				}

				inputDimension = new ArrayList<>();

				for (String sdmxModelArrSemiColonVal : sdmxModelArrSemiColon) {
					if (StringUtils.isEmpty(sdmxModelArrSemiColonVal)) {
						continue;
					}

					dimValPipe = sdmxModelArrSemiColonVal.split("[|]");

					inputDim = new InputDimension();

					if (dimValPipe.length > 1) {
						inputDim.setDimConceptId(dimValPipe[0].trim());
						inputDim.setClValueCode(dimValPipe[1].trim());
					} else {
						inputDim.setDimConceptId(sdmxModelArrSemiColonVal);
					}
					inputDimension.add(inputDim);
				}
				if (!CollectionUtils.isEmpty(inputDimension)) {
					inputDimension.sort((InputDimension s1, InputDimension s2) -> s1.getDimConceptId()
							.compareTo(s2.getDimConceptId()));
					sdmxReturnModelBean.setOpenDimension(inputDimension);
				}
				continue;
			} else {
				continue;
			}
		}
		return sdmxReturnModelBean;
	}

	private String sortJsonStr(String jsonString, Gson gson) {
		SortedMap<String, Object> retMap = gson.fromJson(jsonString, new TypeToken<TreeMap<String, Object>>() {
		}.getType());
		return gson.toJson(retMap);
	}

}
