package com.iris.sdmx.element.controller;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.controller.ErrorCodeLabelMappingController;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.exception.ApplicationException;
import com.iris.sdmx.element.service.SdmxElementDependencyTypeService;
import com.iris.sdmx.element.validator.SdmxElementDependencyValidator;
import com.iris.sdmx.util.SDMXConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;
import com.iris.sdmx.element.bean.SdmxElementDependencyTypeBean;

/**
 * @author vjadhav
 *
 */

@RestController
@RequestMapping("/service/sdmx/dependency")
public class SdmxElementDependencyController {

@Autowired
private SdmxElementDependencyTypeService sdmxElementDependencyTypeService;

@Autowired
private SdmxElementDependencyValidator sdmxElementDependencyValidator;

static final Logger LOGGER = LogManager.getLogger(ErrorCodeLabelMappingController.class);

@GetMapping(value = "/fetchDependencyByActiveStatus/{userId}")
public ServiceResponse fetchElementDependency(@RequestHeader("JobProcessingId") String jobProcessId,
		@RequestHeader("IsActive") Boolean isActive, @PathVariable("userId") Long userId) {
	LOGGER.info("START - Fetch Element Dependency by Active status request received with Job Processing ID : "
			+ jobProcessId);
	ServiceResponse serviceResponse = null;
	ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
	serviceResponseBuilder.setStatus(true);
	List<SdmxElementDependencyTypeBean> sdmxElementDependencyTypeBean = null;
	try {
		sdmxElementDependencyValidator.validateDependencyRequest(jobProcessId, userId);
		sdmxElementDependencyTypeBean = sdmxElementDependencyTypeService.findByActiveStatus(isActive);
		serviceResponseBuilder.setResponse(sdmxElementDependencyTypeBean);
		serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
		serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
		
		
	} catch (ApplicationException applicationException) {
		serviceResponseBuilder.setStatus(false);
		serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
		serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
	} catch(Exception e) {
		LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
		serviceResponse = new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.EC0013.toString())
				.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString())).build();
	}
	serviceResponse = serviceResponseBuilder.build();
	LOGGER.info("End - Fetch Element Dependency by Active status request completed with Job Processing ID : "
			+ jobProcessId);
	return serviceResponse;
}
}
