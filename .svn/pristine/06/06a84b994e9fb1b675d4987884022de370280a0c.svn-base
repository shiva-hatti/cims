/**
 * 
 */
package com.iris.sdmx.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.iris.dateutility.enums.DateConstants;
import com.iris.dateutility.util.DateManip;
import com.iris.exception.ApplicationException;
import com.iris.sdmx.bean.DataSet;
import com.iris.sdmx.bean.SDMXDocument;
import com.iris.sdmx.exceltohtml.repo.SdmxModelCodesRepo;
import com.iris.sdmx.model.code.data.SdmxDataModelCodeBean;
import com.iris.sdmx.upload.bean.EBRFileUploadService;
import com.iris.sdmx.upload.bean.EbrFileDetailsBean;
import com.iris.sdmx.upload.bean.RepDateReturnDataPoint;
import com.iris.sdmx.upload.bean.ReturnDataPoint;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MetaDataCheckConstants;

/**
 * @author sajadhav
 *
 */
@Service
public class SDMXMLDocumentReaderUtilityService {
	
	private static final Logger LOGGER = LogManager.getLogger(SDMXMLDocumentReaderUtilityService.class);
	
	@Autowired
	private SdmxModelCodesRepo sdmxModelCodesRepo;
	
	@Autowired
	private EBRFileUploadService ebrFileUploadService;
	
	public Map<String, List<RepDateReturnDataPoint>> generateDateWiseJsonModified(Map<String, Map<String, List<String>>>  dmIdMapForAllElement, Map<String, List<String>> sdmxDataModelCodeBeans) throws Exception{
		
		if(sdmxDataModelCodeBeans!= null) {
			Map<String, List<RepDateReturnDataPoint>> elementAndReportingDateMap = new HashMap<>();
			
			for (String elementCode : dmIdMapForAllElement.keySet()) {
				
				Map<String, List<String>> dmIdMapForSingleElement = dmIdMapForAllElement.get(elementCode);

				List<RepDateReturnDataPoint> repDateReturnDataPointMapList = new ArrayList<>();
				
				for (String reportingDate : dmIdMapForSingleElement.keySet()) {
					RepDateReturnDataPoint repDateReturnDataPointMap = new RepDateReturnDataPoint();
					repDateReturnDataPointMap.setEndDate(reportingDate);
					
					List<String> dmIdList = dmIdMapForSingleElement.get(reportingDate);
					
					for (String dmId : dmIdList) {
						List<String> returnCodeList =  sdmxDataModelCodeBeans.get(dmId);
						for (String returnCode : returnCodeList) {
							if(repDateReturnDataPointMap.getReturnList()!= null) {
								ReturnDataPoint ret = new ReturnDataPoint();
								ret.setReturnCode(returnCode);
								if(repDateReturnDataPointMap.getReturnList().indexOf(ret) == -1) {
									Set<String> dataPoints = new HashSet<>();
									dataPoints.add(dmId);
									ret.setDataPoints(dataPoints);
									repDateReturnDataPointMap.getReturnList().add(ret);
								}else {
									ret = repDateReturnDataPointMap.getReturnList().get(repDateReturnDataPointMap.getReturnList().indexOf(ret));
									if(ret.getDataPoints()!= null) {
										ret.getDataPoints().add(dmId);
									}else {
										Set<String> dataPoints = new HashSet<>();
										dataPoints.add(dmId);
										ret.setDataPoints(dataPoints);
									}
								}
							}else {
									List<ReturnDataPoint> returnDataPointMapList = new ArrayList<>();
									
									ReturnDataPoint returnDataPointMap = new ReturnDataPoint();
									
									Set<String> dataPoints = new HashSet<>();
									dataPoints.add(dmId);
									
									returnDataPointMap.setReturnCode(returnCode);
									returnDataPointMap.setDataPoints(dataPoints);
									
									returnDataPointMapList.add(returnDataPointMap);
									
									repDateReturnDataPointMap.setReturnList(returnDataPointMapList);	
							}
						}
					}
					
					repDateReturnDataPointMapList.add(repDateReturnDataPointMap);
				}
				elementAndReportingDateMap.put(elementCode, repDateReturnDataPointMapList);
			}
			return elementAndReportingDateMap;
		}
		return null;
	}
	
//	public Map<String, Map<String, List<String>>> generateDateWiseJson(SDMXDocument sdmxDocument){
//		
//		DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
//		DateFormat df2 = new SimpleDateFormat("dd-MM-yyyy");
//		
//		List<DataSet> dataSets = sdmxDocument.getDataSets();
//		Set<String> dmIdSet = new HashSet<>();
//		
//		Map<String, List<String>> dmIdMap = new HashMap<>();
//		dataSets.forEach(f -> {
//			List<Map<String, String>> lisvalueMap = f.getData();	
//			lisvalueMap.forEach(k -> {
//				try {
//					String keyDate = df2.format(df1.parse(k.get("TIME_PERIOD"))); 
//					if(dmIdMap.containsKey(keyDate)) {
//						List<String> list = dmIdMap.get(keyDate);
//						list.add(k.get("DMID"));
//						dmIdSet.add(k.get("DMID"));
//						dmIdMap.put(keyDate, list);
//					}else {
//						List<String> list = new ArrayList<>();
//						list.add(k.get("DMID"));
//						dmIdSet.add(k.get("DMID"));
//						dmIdMap.put(keyDate, list);
//					}	
//				}catch(Exception e) {
//					LOGGER.error("Exception : ", e);
//				}
//			});
//		});
//		
//		
//		Map<String, List<String>> sdmxDataModelCodeBeans = getSdmxReturnModelCodeBeans(dmIdSet);
//		
//		if(sdmxDataModelCodeBeans!= null) {
//			Map<String, Map<String, List<String>>> finalMapToBePrepared = new HashMap<>();
//
//			for (String reportingDate : dmIdMap.keySet()) {
//				List<String> dmIdList = dmIdMap.get(reportingDate);
//				
//				Map<String, List<String>> returnCodeAndDMIDMap = new HashMap<>();
//				
//				for (String dmId : dmIdList) {
//					List<String> returnCodeList =  sdmxDataModelCodeBeans.get(dmId);
//					for (String returnCode : returnCodeList) {
//						if(returnCodeAndDMIDMap.containsKey(returnCode)) {
//							List<String> dmIds =  returnCodeAndDMIDMap.get(returnCode);
//							dmIds.add(dmId);
//							returnCodeAndDMIDMap.put(returnCode, dmIds);
//						}else {
//							List<String> dmIds = new ArrayList<>();
//							dmIds.add(dmId);
//							returnCodeAndDMIDMap.put(returnCode, dmIds);
//						}
//					}
//				}
//				finalMapToBePrepared.put(reportingDate, returnCodeAndDMIDMap);
//			}			
//			System.out.println(new Gson().toJson(finalMapToBePrepared));
//			return finalMapToBePrepared;
//		}
//		return null;
//	}
	
	
	private Map<String, List<String>> getSdmxReturnModelCodeBeans(Set<String> dmIdSet, Map<String, List<String>> dbDimCodeAndReturnListMap, Set<String> dbDmidAndElementCodeSet) {
		
		List<SdmxDataModelCodeBean> sdmxDataModelCodeBeans = sdmxModelCodesRepo.fetchDistinctDimIdData(new ArrayList<>(dmIdSet));
		
		if(!CollectionUtils.isEmpty(sdmxDataModelCodeBeans)) {
			for (SdmxDataModelCodeBean sdmxDataModelCodeBean : sdmxDataModelCodeBeans) {
				if(dbDimCodeAndReturnListMap.containsKey(sdmxDataModelCodeBean.getModelCode())) {
					List<String> returnCodeList =  dbDimCodeAndReturnListMap.get(sdmxDataModelCodeBean.getModelCode());
					returnCodeList.add(sdmxDataModelCodeBean.getReturnCode());
					dbDimCodeAndReturnListMap.put(sdmxDataModelCodeBean.getModelCode(), returnCodeList);
				}else {
					List<String> returnCodeList = new ArrayList<>();
					returnCodeList.add(sdmxDataModelCodeBean.getReturnCode());
					dbDimCodeAndReturnListMap.put(sdmxDataModelCodeBean.getModelCode(), returnCodeList);
				}
				dbDmidAndElementCodeSet.add(sdmxDataModelCodeBean.getDsdCode() + "~" + sdmxDataModelCodeBean.getModelCode());
			}	
			return dbDimCodeAndReturnListMap;
		}
		return null;
	}


	public static void main(String[] args) throws ApplicationException {
		 String filePath = "D:\\CIMS-Document\\EBR\\SDMX-ML-DOCUMENT\\ALE_RETURNS\\XML\\";
		 SDMXMLDocumentReaderUtilityService sdmxmlDocumentReader = new SDMXMLDocumentReaderUtilityService();
//		 System.out.println(new XmlValidate().checkXMLDocumentType(filePath + "ALE-FILE1.xml"));
//         
//         Map<String, Map<String, List<String>>> map = new HashMap<>();
//         
//         Map<String, List<String>> internalMap = new HashMap<>();
//         List<String> list = new ArrayList<>();
//         list.add("DM017");
//         list.add("DM012");
//         internalMap.put("R017", list);
//         
//         list = new ArrayList<>();
//         list.add("DM017");
//         list.add("DM012");
//         internalMap.put("R019", list);
//         
//         map.put("31-12-2020", internalMap);
//         
//         list = new ArrayList<>();
//         list.add("DM017");
//         list.add("DM012");
//         internalMap.put("R017", list);
//         
//         list = new ArrayList<>();
//         list.add("DM017");
//         list.add("DM012");
//         internalMap.put("R019", list);
//         
//         map.put("31-01-2021", internalMap);
//
//         System.out.println(new Gson().toJson(map));
         
	}


	public boolean validateSdmxDocumentAndGetDmIds(SDMXDocument sdmxDocument, EbrFileDetailsBean ebrFileAuditInputBean, 
			Map<String, Map<String, List<String>>> dmIdMapForAllElement, Map<String, Map<Boolean, Set<String>>> fieldCheckListMap, 
			Map<String, List<String>> dbDimCodeAndReturnListMap) {
		boolean isValidationFailed = false;
		final String TIME_PERIOD = "TIME_PERIOD";
		final String DMID = "DMID";
		final String INDEPENDENT = "INDEPENDENT";
		final String DEPENDENCY_TYPE_CHECK = "DEPENDENCY_TYPE";
		Set<String> documentDmidSet = new HashSet<>();
		Set<String> documentDmidAndElementCodeSet = new HashSet<>();
		Set<String> dbDmidAndElementCodeSet = new HashSet<>();
		
		if(ebrFileAuditInputBean.getFileType().equalsIgnoreCase(GeneralConstants.XML.getConstantVal())) {
			if(sdmxDocument.getDataSets() == null || sdmxDocument.getDataSets().get(0).getStructureRef() == null || 
					sdmxDocument.getDataSets().get(0).getStructureRef().getSender() == null) {
				isValidationFailed = true;
				ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.ENTITY_CODE_MATCH_CHECK.getConstantVal(), false, ErrorCode.E0646.toString(), fieldCheckListMap);
			}else {
				if(sdmxDocument.getDataSets().get(0).getStructureRef().getSender().equals(ebrFileAuditInputBean.getEntityCode())) {
					ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.ENTITY_CODE_MATCH_CHECK.getConstantVal(), true, null, fieldCheckListMap);
				}else {
					isValidationFailed = true;
					ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.ENTITY_CODE_MATCH_CHECK.getConstantVal(), false, ErrorCode.E0644.toString(), fieldCheckListMap);
				}
			}
		}else if(ebrFileAuditInputBean.getFileType().equalsIgnoreCase(GeneralConstants.CSV.getConstantVal())){
			if(sdmxDocument.getDataSets().size() > 1) {
				isValidationFailed = true;
				ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.ELEMENT_CHECK.getConstantVal(), false, ErrorCode.E0249.toString(), fieldCheckListMap);
			}else {
				ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.ELEMENT_CHECK.getConstantVal(), true, null, fieldCheckListMap);
			}
		}

		if(isValidationFailed) {
			return isValidationFailed;
		}
		
		List<DataSet> dataSets = sdmxDocument.getDataSets();
		Set<String> reportingEndDateErrorSet = new HashSet<>();
		Set<String> dmidErrorSet = new HashSet<>();
		Set<String> dependencyTypeErrorSet = new HashSet<>();
		
		
		for (DataSet f : dataSets) {
			Map<String, List<String>> dmIdMap = new HashMap<>();
			String elementCode = f.getStructureRef().getCode();
			List<Map<String, String>> lisvalueMap = f.getData();	
			
			for (Map<String, String> k : lisvalueMap) {
				String keyDate = null;
				try {
					if(k.get(TIME_PERIOD) == null) {
						reportingEndDateErrorSet.add(ErrorCode.E0257.toString() + ":" + elementCode);
					}else {
						if(!k.get(TIME_PERIOD).toUpperCase().contains("T")) {
							keyDate = DateManip.formatDate(k.get(TIME_PERIOD), DateConstants.YYYY_MM_DD.getDateConstants(), DateConstants.DD_MM_YYYY.getDateConstants());
							if(keyDate == null) {
								reportingEndDateErrorSet.add(ErrorCode.E0258.toString() + ":" + elementCode);
							}
						}else {
							LOGGER.error("Date Contains T character ");
							reportingEndDateErrorSet.add(ErrorCode.E0258.toString() + ":" + elementCode);
						}
					}
				} catch (Exception e) {
					LOGGER.error("Exception ", e);
					reportingEndDateErrorSet.add(ErrorCode.E0258.toString() + ":" + elementCode);
				} 
				
				
				if(Objects.isNull(k.get(DEPENDENCY_TYPE_CHECK))) {
					dependencyTypeErrorSet.add(ErrorCode.E0381.toString() + ":" + elementCode);
				}else {
					if(!k.get(DEPENDENCY_TYPE_CHECK).equals(INDEPENDENT)) {
						dependencyTypeErrorSet.add(ErrorCode.E0383.toString() + ":" + elementCode);
					}
				}
				
				if(Objects.isNull(k.get(DMID)) || k.get(DMID).equals("")) {
					dmidErrorSet.add(ErrorCode.E0259.toString() + ":" + elementCode);
				}else {
					if(dmIdMap.containsKey(keyDate)) {
						List<String> list = dmIdMap.get(keyDate);
						list.add(k.get(DMID));
						dmIdMap.put(keyDate, list);
					}else {
						List<String> list = new ArrayList<>();
						list.add(k.get(DMID));
						dmIdMap.put(keyDate, list);
					}	
					documentDmidSet.add(k.get(DMID));
					documentDmidAndElementCodeSet.add(elementCode + "~" + k.get(DMID));
				}
			}
			dmIdMapForAllElement.put(elementCode, dmIdMap);
		}
		
		getSdmxReturnModelCodeBeans(documentDmidSet, dbDimCodeAndReturnListMap, dbDmidAndElementCodeSet);
		
		Set<String> notPresetnDocDmidAndElementCodeSet = documentDmidAndElementCodeSet.stream().filter(i -> !dbDmidAndElementCodeSet.contains(i)).collect(Collectors.toSet());
		
		if(!notPresetnDocDmidAndElementCodeSet.isEmpty()) {
			for (String string : notPresetnDocDmidAndElementCodeSet) {
				dmidErrorSet.add(ErrorCode.E0292.toString() + ":" + " For DSD Code = " + string.split("~")[0] + " and DMID = " + string.split("~")[1]);
			}
		}
		
		if(!reportingEndDateErrorSet.isEmpty()) {
			reportingEndDateErrorSet.forEach(f -> ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.REPORTING_END_DATE_CHECK.getConstantVal(), false, f, fieldCheckListMap));
		}else {
			ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.REPORTING_END_DATE_CHECK.getConstantVal(), true, null, fieldCheckListMap);
		}
		
		if(!dependencyTypeErrorSet.isEmpty()) {
			dependencyTypeErrorSet.forEach(f -> ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.DEPENDENCY_TYPE_CHECK.getConstantVal(), false, f, fieldCheckListMap));
		}else {
			ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.DEPENDENCY_TYPE_CHECK.getConstantVal(), true, null, fieldCheckListMap);
		}
		
		if(!dmidErrorSet.isEmpty()) {
			dmidErrorSet.forEach(f -> ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.DMID_CHECK.getConstantVal(), false, f, fieldCheckListMap));
		}else {
			ebrFileUploadService.insertValueIntoStatusMap(MetaDataCheckConstants.DMID_CHECK.getConstantVal(), true, null, fieldCheckListMap);
		}
		
		return !reportingEndDateErrorSet.isEmpty() || !dependencyTypeErrorSet.isEmpty() || !dmidErrorSet.isEmpty();
	}
}
