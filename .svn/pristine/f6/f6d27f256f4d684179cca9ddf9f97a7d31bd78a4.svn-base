package com.iris.repository;

import java.util.List;

import javax.ws.rs.QueryParam;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

import com.iris.model.UserRoleReturnMapping;

/**
 * @author bthakare
 */
public interface UserRoleReturnMappingRepo extends JpaRepository<UserRoleReturnMapping, Long> {

	UserRoleReturnMapping getDataByRoleReturnId(Long id);

	@Query(value = "select * FROM TBL_USER_ROLE_RETURN_MAPPING rgm where rgm.IS_ACTIVE = '1' order by ROLE_RETURN_ID desc", nativeQuery = true)
	List<UserRoleReturnMapping> getAllActiveData();

	@Query(value = "from UserRoleReturnMapping retMap where retMap.isActive =:isActive and retMap.roleIdFk.userRoleId =:roleId")
	List<UserRoleReturnMapping> getUserRoleReturnDataByRoleIdAndActiveFlag(@QueryParam("roleId") Long roleId, @QueryParam("isActive") boolean isActive);

	@Query(value = "select * FROM TBL_USER_ROLE_RETURN_MAPPING where IS_ACTIVE =:isActive and ROLE_ID_FK=:roleId order by ROLE_RETURN_ID desc", nativeQuery = true)
	List<UserRoleReturnMapping> getUserRoleReturnMappingByUserId(@Param("roleId") Long roleId, @Param("isActive") Boolean isActive);

	List<UserRoleReturnMapping> findByRoleIdFkUserRoleIdAndIsActiveTrue(Long userRoleId);

	@Transactional
	@Modifying
	@Query("update UserRoleReturnMapping u set u.isActive = false where u.roleIdFk.userRoleId=:userRoleId")
	void cancelUserRoleReturnMapping(@Param("userRoleId") Long userRoleId);

	@Query(value = "from UserRoleReturnMapping retMap, Return ret where retMap.isActive = '1' and retMap.roleIdFk.userRoleId =:roleId and retMap.returnIdFk.returnId = ret.returnId and retMap.returnIdFk.isActive = '1' and ret.returnGroupMapIdFk.returnGroupMapId IS NULL")
	List<UserRoleReturnMapping> getUserRoleReturnMappingByRoleId(@Param("roleId") Long roleId);

	@Query(value = "from UserRoleReturnMapping retMap, Return ret where retMap.roleIdFk.userRoleId =:roleId and retMap.returnIdFk.returnId = ret.returnId and retMap.returnIdFk.isActive = '1'")
	List<UserRoleReturnMapping> getAllUserRoleReturnMappingByRoleId(@Param("roleId") Long roleId);

	List<UserRoleReturnMapping> findByRoleIdFkUserRoleId(Long userRoleId);

	@Query(value = "from UserRoleReturnMapping retMap  where retMap.roleIdFk.userRoleId =:roleId and retMap.isActive =:isActive and retMap.returnIdFk.isActive =:isActive and  retMap.returnIdFk.returnId not in ( select reg.returnIdFk.returnId from ReturnRegulatorMapping reg where reg.isActive =:isActive)")
	List<UserRoleReturnMapping> getUnMappedReturnListByRegulatorIdAndIsActive(@Param("roleId") Long roleId, @Param("isActive") Boolean isActive);

	@Query(value = "from UserRoleReturnMapping retMap  where retMap.roleIdFk.userRoleId =:roleId and retMap.returnIdFk.returnId not in ( select reg.returnIdFk.returnId from ReturnRegulatorMapping reg)")
	List<UserRoleReturnMapping> getUnMappedReturnListByRegulatorId(@Param("roleId") Long roleId);

	@Query(value = "FROM UserRoleReturnMapping userRoleReturnMap, UserEntityRole userEntityRole, UserRole userRole, UserRoleMaster userRoleMaster, EntityBean entityBean where userRoleReturnMap.roleIdFk.userRoleId = userRole.userRoleId " + " and userEntityRole.userRoleMaster.userRoleMasterId = userRoleMaster.userRoleMasterId and userRoleMaster.userRole.userRoleId = userRole.userRoleId and userEntityRole.entityBean.entityId = entityBean.entityId " + " and userRoleReturnMap.isActive = 1 and userEntityRole.isActive = 1 and userRole.isActive = 1 and userRoleMaster.isActive = 1 and entityBean.isActive = 1 and entityBean.entityCode =:entCode and userRole.userRoleId =:roleId")
	List<UserRoleReturnMapping> getReturnDataByRoleId(@Param("roleId") Long roleId, @Param("entCode") String entCode);

	@Query(value = "FROM UserRoleReturnMapping userRoleReturnMapping where userRoleReturnMapping.roleIdFk.userRoleId IN :roleIds")
	List<UserRoleReturnMapping> getReturnListByRoleId(@Param("roleIds") Long[] roleIds);

	@Query(value = "select new com.iris.model.UserRoleReturnMapping(userRoleReturnMapping.roleIdFk.userRoleId, userRoleReturnMapping.returnIdFk.returnId, userRoleReturnMapping.returnIdFk.returnCode,userRoleReturnMapping.isActive) FROM UserRoleReturnMapping userRoleReturnMapping where userRoleReturnMapping.roleIdFk.userRoleId IN :roleIds order by lastModifiedOn asc")
	List<UserRoleReturnMapping> getLightWeightUserRoleReturnByRoleId(@Param("roleIds") Long[] roleIds);

	@Query(value = "select count(*) FROM UserRoleReturnMapping userRoleReturnMapping where userRoleReturnMapping.roleIdFk.userRoleId IN :roleId")
	int getMappedReturnCountForUserRole(@Param("roleId") Long roleId);

	@Query(value = "select new com.iris.model.UserRoleReturnMapping(userRoleReturnMapping.roleIdFk.userRoleId, userRoleReturnMapping.returnIdFk.returnId, " + "userRoleReturnMapping.returnIdFk.returnCode,userRoleReturnMapping.isActive) FROM UserRoleReturnMapping userRoleReturnMapping where " + "userRoleReturnMapping.returnIdFk.returnId=:returnId")
	List<UserRoleReturnMapping> getUserRolesOnReturnId(@Param("returnId") Long returnId);

}