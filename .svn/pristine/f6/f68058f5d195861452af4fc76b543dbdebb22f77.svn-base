package com.iris.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.iris.caching.ObjectCache;
import com.iris.dto.Option;
import com.iris.dto.Options;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.model.DistrictMaster;
import com.iris.model.StateMaster;
import com.iris.service.impl.StateMasterService;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;

/**
 * @author Siddique H Khan
 */
@RestController
@RequestMapping("/service/stateData")
public class StateMasterController {

	static final Logger logger = LogManager.getLogger(StateMasterController.class);

	@Autowired
	StateMasterService stateMasterService;

	@GetMapping(value = "/fetchActiveStateData/{languageCode}")
	public ServiceResponse fetchActiveStateList(@PathVariable String languageCode) {
		logger.info("fetch state data controller started " + languageCode);
		ServiceResponse serviceResponse = null;
		Option option = null;
		Options options = null;
		List<Option> optionList = null;
		List<StateMaster> listOfActiveStateData = null;
		if (languageCode != null) {

			optionList = new ArrayList<>();
			options = new Options();
			listOfActiveStateData = stateMasterService.getActiveDataFor(StateMaster.class, null);

			for (StateMaster stateMaster : listOfActiveStateData) {
				option = new Option();
				if (languageCode.equals(GeneralConstants.ENG_LANG.getConstantVal())) {
					option.setKey(stateMaster.getStateCode());
					option.setValue(stateMaster.getStateName().toUpperCase());
				} else if (languageCode.equals(GeneralConstants.HIN_LANG.getConstantVal())) {
					option.setKey(stateMaster.getStateCode());
					option.setValue(stateMaster.getStateNameBil().toUpperCase());
				}
				optionList.add(option);
			}
			Collections.sort(optionList, new Comparator<Option>() {
				@Override
				public int compare(Option o1, Option o2) {
					return o1.getValue().compareTo(o2.getValue());
				}
			});
			options.setOptionList(optionList);
			return new ServiceResponseBuilder().setStatus(true).setResponse(new Gson().toJson(options)).build();
		}
		return serviceResponse;
	}

	@GetMapping(value = "/fetchActiveStateDataWithLangCode/{languageCode}")
	public ServiceResponse fetchActiveStateDataWithLangCode(@PathVariable String languageCode) {
		logger.info("fetch state data controller started " + languageCode);
		ServiceResponse serviceResponse = null;
		Option option = null;
		Options options = null;
		List<Option> optionList = null;
		List<StateMaster> listOfActiveStateData = null;
		if (languageCode != null) {

			optionList = new ArrayList<>();
			options = new Options();
			listOfActiveStateData = stateMasterService.getActiveDataFor(StateMaster.class, null);

			for (StateMaster stateMaster : listOfActiveStateData) {
				option = new Option();
				if (languageCode.equals(GeneralConstants.ENG_LANG.getConstantVal())) {
					option.setKey(stateMaster.getStateName().toUpperCase());
					option.setValue(stateMaster.getStateName().toUpperCase());
				} else if (languageCode.equals(GeneralConstants.HIN_LANG.getConstantVal())) {
					option.setKey(stateMaster.getStateNameBil());
					option.setValue(stateMaster.getStateNameBil());
				}
				optionList.add(option);
			}
			Collections.sort(optionList, new Comparator<Option>() {
				@Override
				public int compare(Option o1, Option o2) {
					return o1.getValue().compareTo(o2.getValue());
				}
			});
			options.setOptionList(optionList);
			serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			serviceResponse.setResponse(options);
			return serviceResponse;
		}
		return serviceResponse;
	}

	@GetMapping(value = "/fetchActiveStateDataWithLangCodeWithStateCode/{languageCode}")
	public ServiceResponse fetchActiveStateDataWithLangCodeWithStateCode(@PathVariable String languageCode) {
		logger.info("fetch state data controller started " + languageCode);
		ServiceResponse serviceResponse = null;
		Option option = null;
		Options options = null;
		List<Option> optionList = null;
		List<StateMaster> listOfActiveStateData = null;
		if (languageCode != null) {

			optionList = new ArrayList<>();
			options = new Options();
			listOfActiveStateData = stateMasterService.getActiveDataFor(StateMaster.class, null);

			for (StateMaster stateMaster : listOfActiveStateData) {
				option = new Option();
				if (languageCode.equals(GeneralConstants.ENG_LANG.getConstantVal())) {
					option.setKey(stateMaster.getStateName().toUpperCase() + "~" + stateMaster.getStateCode().toUpperCase());
					option.setValue(stateMaster.getStateName().toUpperCase());
				} else if (languageCode.equals(GeneralConstants.HIN_LANG.getConstantVal())) {
					option.setKey(stateMaster.getStateNameBil() + "~" + stateMaster.getStateCode().toUpperCase());
					option.setValue(stateMaster.getStateNameBil());
				}
				optionList.add(option);
			}
			Collections.sort(optionList, new Comparator<Option>() {
				@Override
				public int compare(Option o1, Option o2) {
					return o1.getValue().compareTo(o2.getValue());
				}
			});
			options.setOptionList(optionList);
			serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			serviceResponse.setResponse(options);
			return serviceResponse;
		}
		return serviceResponse;
	}

	@GetMapping(value = "/fetchStateDistrictData/{languageCode}")
	public ServiceResponse fetchStateDistrictData(@PathVariable String languageCode) {
		logger.info("fetch fetchStateDistrictData method started " + languageCode);

		ServiceResponse serviceResponse = null;
		try {
			Option option = null;
			Options options = null;
			List<Option> optionList = null;
			List<StateMaster> listOfActiveStateData = null;

			if (languageCode != null) {

				optionList = new ArrayList<>();
				options = new Options();
				listOfActiveStateData = stateMasterService.getActiveDataFor(StateMaster.class, null);

				for (StateMaster stateMaster : listOfActiveStateData) {
					for (DistrictMaster districtMaster : stateMaster.getDistrictMaster()) {
						option = new Option();
						if (languageCode.equals(GeneralConstants.ENG_LANG.getConstantVal())) {
							option.setKey(stateMaster.getStateName().toUpperCase() + "~" + districtMaster.getDistrictName().toUpperCase());
						} else if (languageCode.equals(GeneralConstants.HIN_LANG.getConstantVal())) {
							option.setKey(stateMaster.getStateNameBil().toUpperCase() + "~" + districtMaster.getDistrictNameBil().toUpperCase());
						}
						option.setValue(stateMaster.getStateCode() + "~" + districtMaster.getDistrictCode());
						optionList.add(option);
					}
				}
				Collections.sort(optionList, new Comparator<Option>() {
					@Override
					public int compare(Option o1, Option o2) {
						return o1.getValue().compareTo(o2.getValue());
					}
				});
				options.setOptionList(optionList);
				serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
				serviceResponse.setResponse(options);
				return serviceResponse;
			}
		} catch (Exception e) {
			logger.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString())).build();
		}
		return serviceResponse;
	}
	
	@GetMapping(value = "/fetchActiveStateCodeList")
	public ServiceResponse fetchActiveStateCodeData() {
		ServiceResponse serviceResponse = null;
		List<StateMaster> listOfActiveStateData = null;

		listOfActiveStateData = stateMasterService.getActiveDataFor(StateMaster.class, null);
		
		List<String> stateCodeList = listOfActiveStateData.stream().map(StateMaster::getStateCode).collect(Collectors.toList());

		serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
		serviceResponse.setResponse(stateCodeList);
		return serviceResponse;
	}
}