/**
 * 
 */
package com.iris.controller;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.reflect.TypeToken;
import com.iris.dto.Action;
import com.iris.dto.ServiceResponse;
import com.iris.dto.WorkflowJsonBean;
import com.iris.exception.ServiceException;
import com.iris.model.FileDetails;
import com.iris.model.FilingStatus;
import com.iris.model.ReturnApprovalDetail;
import com.iris.model.ReturnsUploadDetails;
import com.iris.model.Scheduler;
import com.iris.model.SchedulerLog;
import com.iris.model.WebServiceComponentUrl;
import com.iris.model.WorkFlowActivity;
import com.iris.repository.ReturnUploadDetailsRepository;
import com.iris.service.GenericService;
import com.iris.service.impl.FileDetailsService;
import com.iris.service.impl.ReturnUploadDetailsService;
import com.iris.util.JsonUtility;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MethodConstants;
import com.iris.webservices.client.CIMSRestWebserviceClient;
import com.iris.workflow.WorkflowUtility;

/**
 * @author akhandagale
 *
 */
@RestController
public class WorkflowTriggerScheduler {

	static final Logger logger = LogManager.getLogger(WorkflowTriggerScheduler.class);

	@Autowired
	private ReturnUploadDetailsRepository returnUploadDetailsRepository;

	@Autowired
	private GenericService<WebServiceComponentUrl, Long> webServiceComponentService;

	@Autowired
	private ReturnUploadDetailsService returnsUploadDetailsService;
	
	@Autowired
	private FileDetailsService fileDetailsService;

	private String jobProcessId;

	private static final String SCHEDULER_CODE = "WORKFLOW_TRIGGER";

	@Scheduled(cron = "${cron.workFlowTrigger}")
	public void workFlowTriggerSchedular() {
		jobProcessId = UUID.randomUUID().toString();
		logger.info("WorkflowTriggerScheduler started");

		Long schedulerLogId = null;
		Scheduler scheduler = getSchedulerStatus();
		if (scheduler != null) {
			if (scheduler.getIsRunning().equals(Boolean.TRUE)) {
				logger.error("Error while starting workFlow Trigger scheduler -> Reason : Schduler is alrady running ");
				return;
			}
			long successCount = 0; 
			try {
				logger.info("WorkFlow Trigger Scheduler entry started");
				schedulerLogId = makeSchedulerStartEntry(0l, scheduler.getSchedulerId());
				if (schedulerLogId == null) {
					logger.error(
							"Error while starting workFlow Trigger scheduler -> Reason : Schduler Log ID not received ");
					return;
				}

				List<ReturnsUploadDetails> pendingRecords = returnUploadDetailsRepository.getPendingWorkFlowRecordsAfterETLProcess();
				if (CollectionUtils.isEmpty(pendingRecords)) {
					logger.info("New Records were not added in workflow trigger schedular");
					makeSchedulerStopEntry(0l, schedulerLogId, scheduler.getSchedulerId());
					return;

				}
				for (ReturnsUploadDetails appDet : pendingRecords) {
					try {
						prepareObjectForWorkflowAndBusinessValidationSuccess(appDet);
						successCount++;
					} catch (Exception e) {
						logger.error("Exception occoured while processing workflow trigger schedular Exception is ", e);
					}
				}

			} catch (Exception e) {
				logger.error("Exception occoured while processing workflow trigger schedular Exception is ", e);
				makeSchedulerStopEntry(successCount, schedulerLogId, scheduler.getSchedulerId());
			}
			makeSchedulerStopEntry(successCount, schedulerLogId, scheduler.getSchedulerId());
		}

	}

	private void prepareObjectForWorkflowAndBusinessValidationSuccess(ReturnsUploadDetails returnUploadDetails)
			throws Exception {
		String json = returnUploadDetails.getWorkFlowMaster().getWorkFlowJson();
		logger.info("Workflow json string: " + json);
		WorkflowJsonBean workflowJsonBean = WorkflowUtility.getWorkflowJsonBeanOfCurrentStep(json,
				returnUploadDetails.getCurrentWFStep());
		if (workflowJsonBean.getFilingStatusId() <= 0) {
			logger.error("FILLING status can not be 0");
		}
		returnUploadDetails.setAlertTypeId(workflowJsonBean.getNotify().getEmailalerttype());
		List<ReturnApprovalDetail> returnApprovalDtlList = new ArrayList<>();
		getReturnApprovalDtlList(returnApprovalDtlList, returnUploadDetails, workflowJsonBean.getNextStep(), json);

		FilingStatus filingStatus = getFillingStatus(returnApprovalDtlList, workflowJsonBean.getFilingStatusId());
		returnUploadDetails.setFilingStatus(filingStatus);
		FileDetails fileDetails = returnUploadDetails.getFileDetailsBean();
		fileDetails.setFileStatus(filingStatus);
		if (CollectionUtils.isEmpty(returnUploadDetails.getReturnApprovalDetailsList())) {
			returnUploadDetails.setReturnApprovalDetailsList(returnApprovalDtlList);
		} else {
			returnUploadDetails.getReturnApprovalDetailsList().addAll(returnApprovalDtlList);
		}
//		returnUploadNBusinessResult.setUploadId(returnUploadDetails.getUploadId());
//		returnUploadNBusinessResult.setFillingStatusId(filingStatus.getFilingStatusId());
		fileDetailsService.add(fileDetails);
		returnsUploadDetailsService.add(returnUploadDetails);
	}

	private FilingStatus getFillingStatus(List<ReturnApprovalDetail> returnApprovalDtlList, int filingStatusId) {
		for (int i = returnApprovalDtlList.size() - 1; i >= 0; i--) {
			if (returnApprovalDtlList.get(i).getFilingStatusId() != 0) {
				FilingStatus filingStatus = new FilingStatus();
				filingStatus.setFilingStatusId(returnApprovalDtlList.get(i).getFilingStatusId());
				return filingStatus;
			} else {
				continue;
			}
		}
		FilingStatus filingStatus = new FilingStatus();
		filingStatus.setFilingStatusId(filingStatusId);
		return filingStatus;
	}

	private void getReturnApprovalDtlList(List<ReturnApprovalDetail> returnApprovalDetails,
			ReturnsUploadDetails returnsUploadDetails, int stepNo, String workflowJson) {
		ReturnApprovalDetail newReturnApprovalDetail = new ReturnApprovalDetail();
		newReturnApprovalDetail.setReturnUploadDetails(returnsUploadDetails);
		WorkflowJsonBean workflowJsonBean = null;
		try {
			workflowJsonBean = WorkflowUtility.getWorkflowJsonBeanOfCurrentStep(workflowJson, stepNo);
			newReturnApprovalDetail.setWorkflowStep(workflowJsonBean.getStepNo());
			WorkFlowActivity workFlowActivity = new WorkFlowActivity();
			workFlowActivity.setActivityId(new Long(workflowJsonBean.getActivities().get(0).getActivityId() + ""));

			newReturnApprovalDetail.setWorkFlowActivity(workFlowActivity);
			newReturnApprovalDetail.setCreationTime(new Date());

			if (workflowJsonBean.isAutoApproved()) {
				newReturnApprovalDetail.setComment("AUTO_APPROVED");
				newReturnApprovalDetail.setReviewStatus("APPROVED");
				Action action = workflowJsonBean.getActions().stream().filter(f -> f.getActionStatusId() == 1).findAny()
						.orElse(null);
				if (action != null) {
					if (action.getNextStep() != 0) {
						newReturnApprovalDetail.setFilingStatusId(action.getFilingStatusId());
						newReturnApprovalDetail.setComplete(false);
						returnApprovalDetails.add(newReturnApprovalDetail);
						getReturnApprovalDtlList(returnApprovalDetails, returnsUploadDetails, action.getNextStep(),
								workflowJson);
					} else {
						newReturnApprovalDetail.setFilingStatusId(action.getFilingStatusId());
						newReturnApprovalDetail.setComplete(true);
						returnApprovalDetails.add(newReturnApprovalDetail);
					}
				}
			} else {
				newReturnApprovalDetail.setComplete(false);
				returnApprovalDetails.add(newReturnApprovalDetail);
			}
		} catch (Exception e) {
			logger.error("Exception :", e);
		}
	}

	private void makeSchedulerStopEntry(long successfullyProcessed, Long schedulerLogId, Long schedulerId) {
		try {
			if (schedulerLogId != null) {
				SchedulerLog schedulerLog = new SchedulerLog();
				schedulerLog.setSuccessfullyProcessedCount(Long.valueOf(successfullyProcessed));
				schedulerLog.setId(schedulerLogId);
				Scheduler scheduler = new Scheduler();
				scheduler.setSchedulerId(schedulerId);
				scheduler.setIsRunning(false);
				schedulerLog.setSchedulerIdFk(scheduler);
				CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

				WebServiceComponentUrl componentUrl = getWebServiceComponentURL(
						GeneralConstants.ADD_UPDATE_SCHEDULER_LOG.getConstantVal(),
						CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);

				Map<String, String> headerMap = new HashMap<>();
				headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessId);

				String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl,
						schedulerLog, null, headerMap);

				ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring,
						ServiceResponse.class);

				if (!serviceResponse.isStatus()) {
					logger.info("Error while stopping scheduler -> Reason : Schduler is alrady stopped ");
				} else {
					logger.info("Scheduler stopped successfully ");
				}
			} else {
				logger.error("Scheduler Log Id not found");
			}
		} catch (Exception e) {
			logger.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}

	}

	private Scheduler getSchedulerStatus() {
		try {
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

			Map<String, String> headerMap = new HashMap<>();
			headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessId);
			headerMap.put(GeneralConstants.SCHEDULER_CODE.getConstantVal(), SCHEDULER_CODE);

			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(
					GeneralConstants.GET_ACTIVE_SCHEDULER_STATUS_BY_CODE.getConstantVal(),
					CIMSRestWebserviceClient.HTTP_METHOD_TYPE_GET);
			String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, null, null,
					headerMap);

			Type listToken = new TypeToken<ServiceResponse>() {
			}.getType();
			ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, listToken);

			if (!serviceResponse.isStatus()) {
				logger.error("False status received from API with status message " + serviceResponse.getStatusCode());
				return null;
			} else {
				if (serviceResponse.getResponse() != null) {
					listToken = new TypeToken<Scheduler>() {
					}.getType();
					return JsonUtility.getGsonObject().fromJson(serviceResponse.getResponse() + "", listToken);
				} else {
					logger.error("response object not present in the response string, response received from API : {}"
							+ responsestring);
				}
			}
		} catch (Exception e) {
			logger.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return null;
	}

	private WebServiceComponentUrl getWebServiceComponentURL(String componentName, String methodType) {
		Map<String, List<String>> valueMap = new HashMap<>();

		List<String> valueList = new ArrayList<>();
		valueList.add(componentName);
		valueMap.put(ColumnConstants.COMPONENTTYPE.getConstantVal(), valueList);

		valueList = new ArrayList<>();
		valueList.add(methodType);
		valueMap.put(ColumnConstants.METHODTYPE.getConstantVal(), valueList);

		WebServiceComponentUrl componentUrl = null;
		try {
			componentUrl = webServiceComponentService.getDataByColumnValue(valueMap,
					MethodConstants.GET_ACTIVE_DATA_BY_COMPONENTTYPE_METHODTYPE.getConstantVal()).get(0);
		} catch (ServiceException e) {
			logger.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return componentUrl;
	}

	private Long makeSchedulerStartEntry(long totalRecordCount, Long schedulerId) {
		try {
			SchedulerLog schedulerLog = new SchedulerLog();
			schedulerLog.setTakedRecordsCount(totalRecordCount);
			Scheduler scheduler = new Scheduler();
			scheduler.setSchedulerId(schedulerId);
			scheduler.setIsRunning(true);
			schedulerLog.setSchedulerIdFk(scheduler);
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(
					GeneralConstants.ADD_UPDATE_SCHEDULER_LOG.getConstantVal(),
					CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);

			Map<String, String> headerMap = new HashMap<>();
			headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessId);

			String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, schedulerLog,
					null, headerMap);

			Type listToken = new TypeToken<ServiceResponse>() {
			}.getType();
			ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, listToken);
			Long schedulerLogId = null;

			if (!serviceResponse.isStatus()) {
				logger.error("False status received from API with status message " + serviceResponse.getStatusCode());
				return null;
			} else {
				listToken = new TypeToken<SchedulerLog>() {
				}.getType();
				SchedulerLog schedulerLog1 = JsonUtility.getGsonObject().fromJson(serviceResponse.getResponse() + "",
						listToken);
				schedulerLogId = schedulerLog1.getId();
			}
			return schedulerLogId;
		} catch (Exception e) {
			logger.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return null;
	}

}
