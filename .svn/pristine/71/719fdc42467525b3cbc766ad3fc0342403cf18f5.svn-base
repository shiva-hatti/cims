/**
 * 
 */
package com.iris.controller;

import java.lang.reflect.Type;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.iris.dto.ServiceResponse;
import com.iris.exception.ServiceException;
import com.iris.model.Return;
import com.iris.model.Scheduler;
import com.iris.model.SchedulerLog;
import com.iris.model.UserMaster;
import com.iris.model.WebServiceComponentUrl;
import com.iris.sdmx.exceltohtml.bean.FusionDetailBeanHistory;
import com.iris.sdmx.exceltohtml.bean.ReturnFormulaBean;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnPreviewBean;
import com.iris.sdmx.exceltohtml.bean.SdmxReturnPreviewDetailJsonBean;
import com.iris.sdmx.exceltohtml.entity.SdmxReturnFormulaMappingEntity;
import com.iris.sdmx.exceltohtml.entity.SdmxReturnPreviewEntity;
import com.iris.sdmx.exceltohtml.entity.SdmxReturnPreviewHistoryEntity;
import com.iris.sdmx.exceltohtml.service.SdmxReturnFormulaMappingService;
import com.iris.sdmx.exceltohtml.service.SdmxReturnModelInfoService;
import com.iris.sdmx.exceltohtml.service.SdmxReturnPreviewHistoryService;
import com.iris.sdmx.exceltohtml.service.SdmxReturnPreviewService;
import com.iris.sdmx.fusion.service.FusionConstraintsApiService;
import com.iris.sdmx.status.entity.SdmxModuleDetailEntity;
import com.iris.sdmx.status.entity.SdmxModuleStatus;
import com.iris.sdmx.status.service.SdmxModuleStatusService;
import com.iris.service.GenericService;
import com.iris.util.JsonUtility;
import com.iris.util.ResourceUtil;
import com.iris.util.SdmxModuleStatusCodeEnum;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MethodConstants;
import com.iris.webservices.client.CIMSRestWebserviceClient;

/**
 * @author apagaria
 *
 */
@RestController
public class SdmxReturnPreviewPublishController {

	private static final Logger LOGGER = LogManager.getLogger(SdmxReturnPreviewPublishController.class);

	/**
	 * 
	 */
	@Autowired
	private SdmxModuleStatusService sdmxModuleStatusService;

	/**
	 * 
	 */
	@Autowired
	private GenericService<WebServiceComponentUrl, Long> webServiceComponentService;

	/**
	 * 
	 */
	@Autowired
	private SdmxReturnPreviewService sdmxReturnPreviewService;

	@Autowired
	private FusionConstraintsApiService fusionConstraintsApiService;

	@Autowired
	private SdmxReturnPreviewHistoryService sdmxReturnPreviewHistoryService;

	@Autowired
	private SdmxReturnModelInfoService sdmxReturnModelInfoService;

	@Autowired
	private SdmxReturnFormulaMappingService sdmxReturnFormulaMappingService;

	@Scheduled(cron = "${cron.return.preview.publish.scheduler}")
	public void processUploadedDataTemplate() {

		String jobProcessingId = UUID.randomUUID().toString();
		LOGGER.info(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + "SdmxReturnPreviewPublishController-> Scheduler started with Job processing ID {}", jobProcessingId);
		Long schedulerLogId = null;
		// Fetching Schedulers
		LOGGER.debug(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + "SdmxReturnPreviewPublishController-> Fetching schedulers ");
		Scheduler scheduler = null;
		try {
			scheduler = getSchedulerStatus(jobProcessingId);
			if (scheduler != null) {
				// Checking scheduler is running or not
				/*
				 * if (scheduler.getIsRunning().equals(Boolean.TRUE)) {
				 * LOGGER.error(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " +
				 * jobProcessingId +
				 * "SdmxReturnPreviewPublishController-> Error while starting scheduler -> Reason : Schduler is alrady running "
				 * ); return; }
				 */

				List<SdmxReturnPreviewBean> sdmxReturnPreviewBeanList = null;

				// Fetching list of un processed record
				LOGGER.debug(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + "SdmxReturnPreviewPublishController-> Fetching list of un processed record ");
				Map<String, SdmxModuleStatus> sdmxModuleStatusMap = fetchModuleSpecificStatusMap();
				SdmxModuleStatus sdmxModuleStatus = sdmxModuleStatusMap.get(SdmxModuleStatusCodeEnum.READY_PUBLISH.getStatusCode());
				LOGGER.debug(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + " SdmxReturnPreviewPublishController-> Module Status id is =  " + sdmxModuleStatus.getModuleStatusId());
				sdmxReturnPreviewBeanList = sdmxReturnPreviewService.fetchEntityByStatusId(sdmxModuleStatus.getModuleStatusId().intValue(), true);
				int successfullyProcessedRecord = 0;
				if (!CollectionUtils.isEmpty(sdmxReturnPreviewBeanList)) {
					LOGGER.debug(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + " SdmxReturnPreviewPublishController-> sdmxReturnPreviewBeanList Size of records are " + sdmxReturnPreviewBeanList.size());
					// Making scheduler start entry
					schedulerLogId = makeSchedulerStartEntry(new Long(sdmxReturnPreviewBeanList.size()), scheduler.getSchedulerId(), jobProcessingId);
					if (schedulerLogId == null) {
						LOGGER.error(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + "SdmxReturnPreviewPublishController-> Error while starting scheduler -> Reason : Schduler Log ID not received ");
						return;
					}

					SdmxReturnPreviewHistoryEntity sdmxReturnPreviewHistoryEntity = null;
					for (SdmxReturnPreviewBean sdmxReturnPreviewBean : sdmxReturnPreviewBeanList) {
						sdmxReturnPreviewHistoryEntity = new SdmxReturnPreviewHistoryEntity();
						SdmxReturnPreviewDetailJsonBean sdmxReturnPreviewDetailJsonBean = new SdmxReturnPreviewDetailJsonBean();
						sdmxReturnPreviewDetailJsonBean.setIsDataPointMapped(true);
						sdmxReturnPreviewDetailJsonBean.setIsFormulaValidated(true);
						sdmxReturnPreviewDetailJsonBean.setOtherDetailedStored(true);
						FusionDetailBeanHistory fusionDetailBeanHistory = null;
						try {
							SdmxReturnPreviewEntity sdmxReturnPreviewEntity = new SdmxReturnPreviewEntity();
							sdmxReturnPreviewEntity.setReturnPreviewTypeId(sdmxReturnPreviewBean.getReturnPreviewTypeId());
							sdmxReturnPreviewHistoryEntity.setSdmxReturnPreviewIdFk(sdmxReturnPreviewEntity);
							UserMaster createdBy = new UserMaster();
							createdBy.setUserId(3L);
							sdmxReturnPreviewHistoryEntity.setCreatedBy(createdBy);
							sdmxReturnPreviewHistoryEntity.setCreatedOn(new Date());

							// Update return preview status
							sdmxModuleStatus = sdmxModuleStatusMap.get(SdmxModuleStatusCodeEnum.PUBLISH_IN_PROGRESS.getStatusCode());
							sdmxReturnPreviewBean.setModuleStatusId(sdmxModuleStatus.getModuleStatusId());
							sdmxReturnPreviewBean.setModuleStatusMessage(sdmxModuleStatus.getModuleStatusLabel());
							sdmxReturnPreviewService.saveEntityByBean(sdmxReturnPreviewBean);

							Instant fusionInsertStart = Instant.now();
							Map<String, Boolean> elementStatusMap = new HashMap<>();
							Boolean processStatus = false;
							Boolean submitDataToFusion = ResourceUtil.getKeyValue("submitDataToFusion").equalsIgnoreCase(Boolean.TRUE.toString());
							if (submitDataToFusion) {
								processStatus = fusionConstraintsApiService.processFusionConstraintsByReturnPreviewId(sdmxReturnPreviewBean.getReturnPreviewTypeId(), jobProcessingId, elementStatusMap);
							}
							Instant fusionInsertEnd = Instant.now();
							Duration fusionInsertTimeElapsed = Duration.between(fusionInsertStart, fusionInsertEnd);
							Long fusionInsertTimeSeconds = fusionInsertTimeElapsed.getSeconds();
							LOGGER.debug(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + ", fusionInsertTimeSeconds" + fusionInsertTimeSeconds);
							fusionDetailBeanHistory = new FusionDetailBeanHistory();
							fusionDetailBeanHistory.setFusionProcessStartTime(fusionInsertStart.toEpochMilli());
							fusionDetailBeanHistory.setFusionProcessEndTime(fusionInsertEnd.toEpochMilli());
							fusionDetailBeanHistory.setTotalTimetakenInSeconds(fusionInsertTimeSeconds);
							fusionDetailBeanHistory.setElementStatusMap(elementStatusMap);
							sdmxReturnPreviewDetailJsonBean.setRecordStatus(true);
							sdmxReturnPreviewDetailJsonBean.setIsFusionDataInserted(processStatus);
							sdmxReturnPreviewDetailJsonBean.setFusionDetailBeanHistory(fusionDetailBeanHistory);
							sdmxReturnPreviewHistoryEntity.setIsSuccessRecord(true);
							sdmxReturnPreviewHistoryEntity.setOtherDetailJson(new Gson().toJson(sdmxReturnPreviewDetailJsonBean));
							sdmxReturnPreviewHistoryService.add(sdmxReturnPreviewHistoryEntity);
							if (processStatus || !submitDataToFusion) {
								sdmxModuleStatus = sdmxModuleStatusMap.get(SdmxModuleStatusCodeEnum.PUBLISH_SUCCESS.getStatusCode());
							} else {
								sdmxModuleStatus = sdmxModuleStatusMap.get(SdmxModuleStatusCodeEnum.PUBLISH_FAILED.getStatusCode());
							}

							// Formula JSON local
							List<ReturnFormulaBean> returnFormulaBeans = sdmxReturnModelInfoService.fetchFormulaBuilderJson(sdmxReturnPreviewBean.getReturnPreviewTypeId());
							sdmxReturnPreviewBean.setModuleStatusId(sdmxModuleStatus.getModuleStatusId());
							sdmxReturnPreviewBean.setFormulaJson(new Gson().toJson(returnFormulaBeans));
							sdmxReturnPreviewBean.setModuleStatusMessage(sdmxModuleStatus.getModuleStatusLabel());
							sdmxReturnPreviewService.saveEntityByBean(sdmxReturnPreviewBean);

							// Formula JSON Outer Use
							SdmxReturnFormulaMappingEntity sdmxReturnFormulaMappingEntity = new SdmxReturnFormulaMappingEntity();
							sdmxReturnFormulaMappingEntity.setFormulaJson(new Gson().toJson(returnFormulaBeans));
							sdmxReturnFormulaMappingEntity.setIsActive(true);
							Return returnIdFk = new Return();
							returnIdFk.setReturnId(sdmxReturnPreviewBean.getReturnTemplateIdFk());
							sdmxReturnFormulaMappingEntity.setReturnIdFk(returnIdFk);
							sdmxReturnFormulaMappingEntity.setCreatedDate(new Date());
							sdmxReturnFormulaMappingEntity.setEbrVersion(sdmxReturnPreviewBean.getEbrVersion());
							sdmxReturnFormulaMappingEntity.setRbrVersion(sdmxReturnPreviewBean.getReturnTemplateVer());
							sdmxReturnFormulaMappingService.add(sdmxReturnFormulaMappingEntity);
						} catch (Exception ex) {
							LOGGER.error(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + "SdmxReturnPreviewPublishController-> Exception while processing the record with id " + sdmxReturnPreviewBean.getReturnPreviewTypeId() + " Exception ", ex);
							sdmxReturnPreviewDetailJsonBean.setRecordStatus(false);
							sdmxReturnPreviewDetailJsonBean.setIsFusionDataInserted(false);
							sdmxReturnPreviewDetailJsonBean.setFusionDetailBeanHistory(fusionDetailBeanHistory);
							sdmxReturnPreviewHistoryEntity.setIsSuccessRecord(false);
							sdmxReturnPreviewHistoryEntity.setOtherDetailJson(new Gson().toJson(sdmxReturnPreviewDetailJsonBean));
							sdmxReturnPreviewHistoryService.add(sdmxReturnPreviewHistoryEntity);
							sdmxModuleStatus = sdmxModuleStatusMap.get(SdmxModuleStatusCodeEnum.PUBLISH_FAILED.getStatusCode());
							sdmxReturnPreviewBean.setModuleStatusId(sdmxModuleStatus.getModuleStatusId());
							sdmxReturnPreviewBean.setModuleStatusMessage(sdmxModuleStatus.getModuleStatusLabel());
							sdmxReturnPreviewService.saveEntityByBean(sdmxReturnPreviewBean);
						}
					}

				} else {
					LOGGER.info(GeneralConstants.JOB_PROCESSING_ID.getConstantVal() + " " + jobProcessingId + " SdmxReturnPreviewPublishController->  no record to process for scheduler");
					return;
				}
				makeSchedulerStopEntry(successfullyProcessedRecord, schedulerLogId, scheduler.getSchedulerId(), jobProcessingId);
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
			return;
		}
	}

	private void makeSchedulerStopEntry(int successfullyProcessedRecord, Long schedulerLogId, Long schedulerId, String jobProcessingId) {
		try {
			if (schedulerLogId != null) {
				SchedulerLog schedulerLog = new SchedulerLog();
				schedulerLog.setSuccessfullyProcessedCount(Long.valueOf(successfullyProcessedRecord));
				schedulerLog.setId(schedulerLogId);
				Scheduler scheduler = new Scheduler();
				scheduler.setSchedulerId(schedulerId);
				scheduler.setIsRunning(false);
				schedulerLog.setSchedulerIdFk(scheduler);
				CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

				WebServiceComponentUrl componentUrl = getWebServiceComponentURL(GeneralConstants.ADD_UPDATE_SCHEDULER_LOG.getConstantVal(), CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);

				Map<String, String> headerMap = new HashMap<>();
				headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);

				String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, schedulerLog, null, headerMap);

				ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, ServiceResponse.class);

				if (!serviceResponse.isStatus()) {
					LOGGER.info("Error while stopping scheduler -> Reason : Schduler is alrady stopped ");
				} else {
					LOGGER.info("Scheduler stopped successfully ");
				}
			} else {
				LOGGER.error("Scheduler Log Id not found");
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
	}

	private Long makeSchedulerStartEntry(Long totalRecordCount, Long schedulerId, String jobProcessingId) {
		try {
			SchedulerLog schedulerLog = new SchedulerLog();
			schedulerLog.setTakedRecordsCount(totalRecordCount);
			Scheduler scheduler = new Scheduler();
			scheduler.setSchedulerId(schedulerId);
			scheduler.setIsRunning(true);
			schedulerLog.setSchedulerIdFk(scheduler);
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(GeneralConstants.ADD_UPDATE_SCHEDULER_LOG.getConstantVal(), CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);

			Map<String, String> headerMap = new HashMap<>();
			headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);

			String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, schedulerLog, null, headerMap);

			Type listToken = new TypeToken<ServiceResponse>() {
			}.getType();
			ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, listToken);
			Long schedulerLogId = null;

			if (!serviceResponse.isStatus()) {
				LOGGER.error("False status received from API with status message " + serviceResponse.getStatusCode());
				return null;
			} else {
				listToken = new TypeToken<SchedulerLog>() {
				}.getType();
				SchedulerLog schedulerLog1 = JsonUtility.getGsonObject().fromJson(serviceResponse.getResponse() + "", listToken);
				schedulerLogId = schedulerLog1.getId();
			}
			return schedulerLogId;
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return null;
	}

	private Map<String, SdmxModuleStatus> fetchModuleSpecificStatusMap() {
		// Setting Module 1 as hard code to fetch module specific status and create a
		// map
		SdmxModuleDetailEntity moduleDetailEntity = new SdmxModuleDetailEntity(1L);

		Map<String, SdmxModuleStatus> sdmxModuleStatusMap = sdmxModuleStatusService.findModuleStatusByModuleIdNActive(moduleDetailEntity, true);

		return sdmxModuleStatusMap;
	}

	private Scheduler getSchedulerStatus(String jobProcessingId) {
		try {
			String SCHEDULER_CODE = "SDMX_RETURN_PREVIEW_PUBLISH_SCHEDULER";
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

			Map<String, String> headerMap = new HashMap<>();
			headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);
			headerMap.put(GeneralConstants.SCHEDULER_CODE.getConstantVal(), SCHEDULER_CODE);

			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(GeneralConstants.GET_ACTIVE_SCHEDULER_STATUS_BY_CODE.getConstantVal(), CIMSRestWebserviceClient.HTTP_METHOD_TYPE_GET);
			String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, null, null, headerMap);

			Type listToken = new TypeToken<ServiceResponse>() {
			}.getType();
			ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, listToken);

			if (!serviceResponse.isStatus()) {
				LOGGER.error("False status received from API with status message " + serviceResponse.getStatusCode());
				return null;
			} else {
				if (serviceResponse.getResponse() != null) {
					listToken = new TypeToken<Scheduler>() {
					}.getType();
					return JsonUtility.getGsonObject().fromJson(serviceResponse.getResponse() + "", listToken);
				} else {
					LOGGER.error("response object not present in the response string, response received from API : {}" + responsestring);
				}
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return null;
	}

	private WebServiceComponentUrl getWebServiceComponentURL(String componentName, String methodType) {
		Map<String, List<String>> valueMap = new HashMap<>();

		List<String> valueList = new ArrayList<>();
		valueList.add(componentName);
		valueMap.put(ColumnConstants.COMPONENTTYPE.getConstantVal(), valueList);

		valueList = new ArrayList<>();
		valueList.add(methodType);
		valueMap.put(ColumnConstants.METHODTYPE.getConstantVal(), valueList);

		WebServiceComponentUrl componentUrl = null;
		try {
			componentUrl = webServiceComponentService.getDataByColumnValue(valueMap, MethodConstants.GET_ACTIVE_DATA_BY_COMPONENTTYPE_METHODTYPE.getConstantVal()).get(0);
		} catch (ServiceException e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return componentUrl;
	}

}
