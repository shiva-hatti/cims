package com.iris.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.iris.dto.CategoryDto;
import com.iris.dto.EntityDto;
import com.iris.dto.EntityMasterDto;
import com.iris.dto.SubCategoryDto;
import com.iris.dto.UserDetailsDto;
import com.iris.dto.UserDto;
import com.iris.exception.ApplicationException;
import com.iris.exception.ServiceException;
import com.iris.model.EntityBean;
import com.iris.service.GenericService;

@Service
public class EntityServiceV2 implements GenericService<EntityBean, Long> {

	private static final Logger LOGGER = LogManager.getLogger(EntityServiceV2.class);

	@Autowired
	private UserMasterServiceV2 userMasterServiceV2;
	
	@Override
	public EntityBean add(EntityBean entity) throws ServiceException {
		return null;
	}

	@Override
	public boolean update(EntityBean entity) throws ServiceException {
		return false;
	}

	@Override
	public List<EntityBean> getDataByIds(Long[] ids) throws ServiceException {
		return null;
	}

	@Override
	public EntityBean getDataById(Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<EntityBean> getDataByColumnValue(Map<String, List<String>> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@Override
	public List<EntityBean> getDataByColumnLongValue(Map<String, List<Long>> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@Override
	public List<EntityBean> getDataByObject(Map<String, Object> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@Override
	public List<EntityBean> getActiveDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<EntityBean> getAllDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public void deleteData(EntityBean bean) throws ServiceException {
		
	}
	
	public List<EntityDto> getFlatEntityList(EntityMasterDto entityMasterDto) throws ApplicationException {
		UserDto userDto = new UserDto();
		userDto.setUserId(entityMasterDto.getUserId());
		userDto.setLangCode(entityMasterDto.getLanguageCode());
		userDto.setIsActive(entityMasterDto.getIsActive());
		userDto.setSubCategoryCodes(entityMasterDto.getSubCategoryCodeList());
		userDto.setCategoryCode(entityMasterDto.getCategoryCode());
		userDto.setLangCode(entityMasterDto.getLanguageCode());
		
		if(!ObjectUtils.isEmpty(userMasterServiceV2.getUserWithEntityDetails(userDto))) {
			List<EntityDto> entityDtos = userMasterServiceV2.getUserWithEntityDetails(userDto).getEntityDtos();
			sortEntityDtos(entityDtos);
			return entityDtos;
		}
		
		return null;
	}
	
	private void sortEntityDtos(List<EntityDto> entityDtos) {
		if(!CollectionUtils.isEmpty(entityDtos)) {
			 entityDtos.sort((o1, o2) -> o1.getEntityName().compareTo(o2.getEntityName()));
		}
	}

	public CategoryDto getCategoryWiseEntityList(EntityMasterDto entityMasterDto, String jobProcessId) throws ApplicationException {
		UserDto userDto = new UserDto();
		userDto.setUserId(entityMasterDto.getUserId());
		userDto.setLangCode(entityMasterDto.getLanguageCode());
		userDto.setIsActive(entityMasterDto.getIsActive());
		userDto.setSubCategoryCodes(entityMasterDto.getSubCategoryCodeList());
		userDto.setCategoryCode(entityMasterDto.getCategoryCode());
		userDto.setLangCode(entityMasterDto.getLanguageCode());
		userDto.setRoleId(entityMasterDto.getRoleId());
		
		UserDetailsDto userDetailsDto = userMasterServiceV2.getUserWithEntityDetails(userDto);
		
		if(ObjectUtils.isEmpty(userDetailsDto)) {
			LOGGER.error(jobProcessId + " User Details Not found");
			return null;
		}
		
		List<EntityDto> entityDtoList = userDetailsDto.getEntityDtos(); 
		
		if(!CollectionUtils.isEmpty(entityDtoList)) {
			return arrangeEntityDataCategoryWise(entityDtoList);
		}else {
			LOGGER.error(jobProcessId + " Entity DTO list is empty");
		}

		return null;
	}

	private CategoryDto arrangeEntityDataCategoryWise(List<EntityDto> entityDtoList) {
		if(!CollectionUtils.isEmpty(entityDtoList)) {
			sortEntityDtos(entityDtoList);
			List<CategoryDto> categoryDtos =  new ArrayList<>();
			
			for (EntityDto entityDto : entityDtoList) {
				
				if(categoryDtos.indexOf(entityDto.getCategoryDto())!= -1) {
					
					CategoryDto categoryDto = categoryDtos.get(categoryDtos.indexOf(entityDto.getCategoryDto()));
					
					if(categoryDto.getSubCategory().indexOf(entityDto.getSubCategoryDto())!= -1) {
						SubCategoryDto subCategoryDto = categoryDto.getSubCategory().get(categoryDto.getSubCategory().indexOf(entityDto.getSubCategoryDto()));
						EntityDto newEntityDto = prepareEntityDto(entityDto);
						subCategoryDto.getEntityDtoList().add(newEntityDto);
					}else {
						List<SubCategoryDto> subCategoryDtos = new ArrayList<>();
						
						SubCategoryDto subCategoryDto = prepareSubCategoryDto(entityDto);
						categoryDto.getSubCategory().add(subCategoryDto);
						
						List<EntityDto> entityDtos = new ArrayList<>();

						EntityDto newEntityDto = prepareEntityDto(entityDto);
						entityDtos.add(newEntityDto);
						
						subCategoryDto.setEntityDtoList(entityDtos);
						
						subCategoryDtos.add(subCategoryDto);
					}
				}else {
					List<EntityDto> entityDtos = new ArrayList<>();
					
					EntityDto newEntityDto = prepareEntityDto(entityDto);
					entityDtos.add(newEntityDto);
					

					List<SubCategoryDto> subCategoryDtos = new ArrayList<>();
					
					SubCategoryDto subCategoryDto = prepareSubCategoryDto(entityDto);
					subCategoryDto.setEntityDtoList(entityDtos);

					subCategoryDtos.add(subCategoryDto);

					CategoryDto categoryDto = prepareCategoryDto(entityDto);
					
					categoryDto.setSubCategory(subCategoryDtos);
					categoryDtos.add(categoryDto);
				}
			}
			
			if(!CollectionUtils.isEmpty(categoryDtos)) {
				return categoryDtos.get(0);
			}
		}
		
		return null;
	}

	private SubCategoryDto prepareSubCategoryDto(EntityDto entityDto) {
		SubCategoryDto subCategoryDto = new SubCategoryDto();
		subCategoryDto.setSubCategoryCode(entityDto.getSubCategoryDto().getSubCategoryCode());
		subCategoryDto.setSubCategoryId(entityDto.getSubCategoryDto().getSubCategoryId());
		subCategoryDto.setSubCategoryName(entityDto.getSubCategoryDto().getSubCategoryName());
		return subCategoryDto;
	}
	
	private CategoryDto prepareCategoryDto(EntityDto entityDto) {
		CategoryDto categoryDto = new CategoryDto();
		categoryDto.setCategoryCode(entityDto.getCategoryDto().getCategoryCode());
		categoryDto.setCategoryId(entityDto.getCategoryDto().getCategoryId());
		categoryDto.setCategoryName(entityDto.getCategoryDto().getCategoryName());
		return categoryDto;
	}

	private EntityDto prepareEntityDto(EntityDto entityDto) {
		EntityDto newEntityDto = new EntityDto();
		newEntityDto.setEntityCode(entityDto.getEntityCode());
		newEntityDto.setEntityName(entityDto.getEntityName());
		newEntityDto.setIfscCode(entityDto.getIfscCode());
		newEntityDto.setEntityId(entityDto.getEntityId());
		return newEntityDto;
	}
}
