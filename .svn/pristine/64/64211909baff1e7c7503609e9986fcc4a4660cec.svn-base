/**
 * 
 */
package com.iris.sdmx.dimesnsion.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.iris.constant.GeneralConstants;
import com.iris.exception.ApplicationException;
import com.iris.exception.ServiceException;
import com.iris.model.UserMaster;
import com.iris.sdmx.codelist.bean.CodeListMasterBean;
import com.iris.sdmx.codelist.entity.CodeListMaster;
import com.iris.sdmx.codelist.repo.CodeListMasterRepo;
import com.iris.sdmx.dimesnsion.bean.DimensionMasterBean;
import com.iris.sdmx.dimesnsion.bean.RegexBean;
import com.iris.sdmx.dimesnsion.entity.DimensionMaster;
import com.iris.sdmx.dimesnsion.entity.DimensionMasterMod;
import com.iris.sdmx.dimesnsion.entity.DimensionType;
import com.iris.sdmx.dimesnsion.entity.Regex;
import com.iris.sdmx.dimesnsion.repo.DimensionModRepo;
import com.iris.sdmx.dimesnsion.repo.DimensionRepo;
import com.iris.service.GenericService;
import com.iris.util.JsonUtility;
import com.iris.util.Validations;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.MethodConstants;

/**
 * @author sajadhav
 *
 */
@Service
public class DimensionService implements GenericService<DimensionMaster, Long>{

	private static final Logger LOGGER = LogManager.getLogger(DimensionService.class);

	@Autowired
	private DimensionRepo dimensionRepo;
	
	@Autowired
	private CodeListMasterRepo codeListMasterRepo;
	
	@Autowired
	private DimensionModRepo dimensionModRepo;
	
	
	@Override
	public DimensionMaster add(DimensionMaster entity) throws ServiceException {
		return null;
	}

	@Override
	public boolean update(DimensionMaster entity) throws ServiceException {
		return false;
	}

	@Override
	public List<DimensionMaster> getDataByIds(Long[] ids) throws ServiceException {
		return null;
	}

	@Override
	public DimensionMaster getDataById(Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<DimensionMaster> getDataByColumnValue(Map<String, List<String>> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@Override
	public List<DimensionMaster> getDataByColumnLongValue(Map<String, List<Long>> columnValueMap, String methodName)
			throws ServiceException {
		return null;
	}

	@Override
	public List<DimensionMaster> getDataByObject(Map<String, Object> columnValueMap, String methodName)
			throws ServiceException {
		try {
			Boolean isActive= null;
			Long parentDimensionId = null;
			for (String columnName : columnValueMap.keySet()) {
				if (columnValueMap.get(columnName) != null && columnName.equalsIgnoreCase(ColumnConstants.IS_ACTIVE.getConstantVal())) {
					isActive = (Boolean) columnValueMap.get(columnName);
				}else if (columnValueMap.get(columnName) != null && columnName.equalsIgnoreCase(ColumnConstants.PARENT_DIMENSION_ID.getConstantVal())) {
					parentDimensionId = (Long) columnValueMap.get(columnName);
				}
			}
			
			if (methodName.equalsIgnoreCase(MethodConstants.GET_DIM_MASTER_RECORD_BY_PARENT_ID_IS_ACTIVE.getConstantVal())) {
				return dimensionRepo.findByIsActiveAndParentDimensionMasterDimesnsionMasterId(isActive, parentDimensionId);
			}
		}catch(Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getErrorMessage(), e);
		}
		return null;
	}

	@Override
	public List<DimensionMaster> getActiveDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<DimensionMaster> getAllDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public void deleteData(DimensionMaster bean) throws ServiceException {
		
	}

	public List<DimensionMasterBean> prepareDimensionMasterResponseList(List<DimensionMaster> dimensionMasterList) {
		List<DimensionMasterBean> dimensionMasterBeans = new ArrayList<>();
		
		for (DimensionMaster dimensionMaster : dimensionMasterList) {
			if(dimensionMaster.getIsActive().equals(Boolean.FALSE))
				continue;
			DimensionMasterBean dimensionMasterBean = new DimensionMasterBean();
			dimensionMasterBean.setDimensionCode(dimensionMaster.getDimensionCode());
			dimensionMasterBean.setDimensionDesc(dimensionMaster.getDimDesc());
			dimensionMasterBean.setDimensionId(dimensionMaster.getDimesnsionMasterId());
			dimensionMasterBean.setDimensionName(dimensionMaster.getDimensionName());
			dimensionMasterBean.setDimensionType(dimensionMaster.getDimensionType().getDimesnsionTypeName());
			dimensionMasterBean.setDimensionTypeId(dimensionMaster.getDimensionType().getDimesnionTypeId());

			if(!CollectionUtils.isEmpty(dimensionMaster.getDimensionMasterList())) {
				prepareInnerDimensionObject(dimensionMasterBean, dimensionMaster);
			}
			
			if(dimensionMaster.getCodeListMaster()!= null) {
				CodeListMasterBean codeListMasterBean = new CodeListMasterBean();
				codeListMasterBean.setClCode(dimensionMaster.getCodeListMaster().getClCode());
				codeListMasterBean.setClLable(dimensionMaster.getCodeListMaster().getClLable());
				codeListMasterBean.setClVersion(dimensionMaster.getCodeListMaster().getClVersion());
				dimensionMasterBean.setCodeListMasterBean(codeListMasterBean);
			}
			
			if(dimensionMaster.getRegex()!= null) {
				RegexBean regExBean = new RegexBean();
				regExBean.setRegex(dimensionMaster.getRegex().getRegex());
				regExBean.setRegexName(dimensionMaster.getRegex().getRegexName());
				regExBean.setRegexId(dimensionMaster.getRegex().getRegexId());
				dimensionMasterBean.setRegEx(regExBean);
			}
			
			dimensionMasterBean.setMinLength(dimensionMaster.getMinLength());
			dimensionMasterBean.setMaxLength(dimensionMaster.getMaxLength());
			
			dimensionMasterBeans.add(dimensionMasterBean);
		}
		
		return dimensionMasterBeans;
	}

	private void prepareInnerDimensionObject(DimensionMasterBean dimensionMasterBean, DimensionMaster dimensionMaster) {
		List<DimensionMasterBean> dimensionMasterBeans = new ArrayList<>();
		
		for (DimensionMaster dimen : dimensionMaster.getDimensionMasterList()) {
			if(dimen.getIsActive().equals(Boolean.FALSE))
				continue;
			DimensionMasterBean dimensionMasBean = new DimensionMasterBean();
			dimensionMasBean.setDimensionCode(dimen.getDimensionCode());
			dimensionMasBean.setDimensionDesc(dimen.getDimDesc());
			dimensionMasBean.setDimensionId(dimen.getDimesnsionMasterId());
			dimensionMasBean.setDimensionName(dimen.getDimensionName());
			dimensionMasBean.setDimensionType(dimen.getDimensionType().getDimesnsionTypeName());
			dimensionMasBean.setDimensionTypeId(dimen.getDimensionType().getDimesnionTypeId());

			if(!CollectionUtils.isEmpty(dimen.getDimensionMasterList())) {
				prepareInnerDimensionObject(dimensionMasBean, dimen);
			}
			
			if(dimen.getCodeListMaster()!= null) {
				CodeListMasterBean codeListMasterBean = new CodeListMasterBean();
				codeListMasterBean.setClCode(dimen.getCodeListMaster().getClCode());
				codeListMasterBean.setClLable(dimen.getCodeListMaster().getClLable());
				codeListMasterBean.setClVersion(dimen.getCodeListMaster().getClVersion());
				dimensionMasBean.setCodeListMasterBean(codeListMasterBean);
			}
			
			if(dimen.getRegex()!= null) {
				RegexBean regExBean = new RegexBean();
				regExBean.setRegex(dimen.getRegex().getRegex());
				regExBean.setRegexName(dimen.getRegex().getRegexName());
				regExBean.setRegexId(dimen.getRegex().getRegexId());
				dimensionMasBean.setRegEx(regExBean);
			}
			
			dimensionMasBean.setMinLength(dimen.getMinLength());
			dimensionMasBean.setMaxLength(dimen.getMaxLength());
			
			dimensionMasterBeans.add(dimensionMasBean);
		}

		dimensionMasterBean.setDimesnionMasterBeans(dimensionMasterBeans);
	}

	@Transactional(rollbackOn = Exception.class)
	public boolean addDimensionData(DimensionMasterBean inputDimensionMasterBean, boolean isApprovalRequired) throws ApplicationException {
	
		DimensionMaster dimensionMasterBean = dimensionRepo.findByDimensionCodeIgnoreCaseAndIsActive(inputDimensionMasterBean.getDimensionCode(), true);
		DimensionMaster parentDimensionMaster = null;
		if(inputDimensionMasterBean.getParentDimensionBean()!= null) {
			parentDimensionMaster = dimensionRepo.findByDimensionCodeIgnoreCaseAndIsActive(inputDimensionMasterBean.getParentDimensionBean().getDimensionCode(), true);
			if (parentDimensionMaster == null) {
				throw new ApplicationException("E004", "Parent dimension record not present");
			}
		}
		
		if (dimensionMasterBean != null) {
			throw new ApplicationException("E004", "Same dim record present");
		}
		
		Date createdOn = new Date();
		UserMaster createdBy = new UserMaster();
		createdBy.setUserId(inputDimensionMasterBean.getUserId());
		
		DimensionMasterMod dimensionMasterMod = new DimensionMasterMod();
		dimensionMasterMod.setDimCode(inputDimensionMasterBean.getDimensionCode());
		dimensionMasterMod.setIsActive(true);
		dimensionMasterMod.setActionId(1);
		dimensionMasterMod.setDimMasterJson(JsonUtility.getGsonObject().toJson(inputDimensionMasterBean));
		
		if(isApprovalRequired) {
			dimensionMasterMod.setAdminStatusId(1);
		}else {
			dimensionMasterMod.setAdminStatusId(2);
		}
		
		dimensionMasterMod.setCreatedBy(createdBy);
		dimensionMasterMod.setCreatedOn(createdOn);
		dimensionMasterMod.setLastUpdatedOn(createdOn);
		
		dimensionMasterMod = dimensionModRepo.save(dimensionMasterMod);
		
		if (!isApprovalRequired && dimensionMasterMod.getDimMasterModId() != null) {
			DimensionMaster dimensionMaster = new DimensionMaster();

			if(inputDimensionMasterBean.getCodeListMasterBean()!= null) {
				CodeListMaster codeListMaster = codeListMasterRepo.findByClCodeIgnoreCaseAndClVersionAndIsActive(inputDimensionMasterBean.getCodeListMasterBean().getClCode(), inputDimensionMasterBean.getCodeListMasterBean().getClVersion(), true);
				dimensionMaster.setCodeListMaster(codeListMaster);
			}

			dimensionMaster.setDimesnsionName(inputDimensionMasterBean.getDimensionName());
			dimensionMaster.setDimensionCode(inputDimensionMasterBean.getDimensionCode());
			
			DimensionType dimensionType = new DimensionType();
			dimensionType.setDimesnionTypeId(inputDimensionMasterBean.getDimensionTypeId());

			dimensionMaster.setDimensionType(dimensionType);
			dimensionMaster.setParentDimensionMaster(parentDimensionMaster);
			
			
			if(inputDimensionMasterBean.getRegEx()!= null) {
				Regex regex = new Regex();
				regex.setRegexId(inputDimensionMasterBean.getRegEx().getRegexId());
				dimensionMaster.setMinLength(inputDimensionMasterBean.getMinLength());
				dimensionMaster.setMaxLength(inputDimensionMasterBean.getMaxLength());
				dimensionMaster.setRegex(regex);
			}
			
			
			dimensionMaster.setDimDesc(inputDimensionMasterBean.getDimensionDesc());
			dimensionMaster.setIsActive(inputDimensionMasterBean.getIsActive());
			
			
			dimensionMaster.setCreatedBy(createdBy);
			dimensionMaster.setCreatedOn(createdOn);
			dimensionMaster.setLastUpdatedOn(createdOn);
			
			dimensionRepo.save(dimensionMaster);
		}
		
		return true;
	}

	@Transactional(rollbackOn = Exception.class)
	public boolean editDimensionData(DimensionMasterBean dimensionMasterBean, boolean isApprovalRequired) {
	
		try {
			DimensionMaster dimensionMaster = dimensionRepo.findByDimensionCodeIgnoreCaseAndIsActive(dimensionMasterBean.getDimensionCode(), true);
		
			DimensionMaster parentDimensionMaster = null;
			if(dimensionMasterBean.getParentDimensionBean()!= null) {
				parentDimensionMaster = dimensionRepo.findByDimensionCodeIgnoreCaseAndIsActive(dimensionMasterBean.getParentDimensionBean().getDimensionCode(), true);
				if (parentDimensionMaster == null) {
					throw new ApplicationException("E004", "Parent dimension record not present");
				}
			}

			CodeListMaster codeListMaster =  null;
			if(dimensionMasterBean.getCodeListMasterBean()!= null) {
				codeListMaster = codeListMasterRepo.findByClCodeIgnoreCaseAndClVersionAndIsActive(dimensionMasterBean.getCodeListMasterBean().getClCode(), dimensionMasterBean.getCodeListMasterBean().getClVersion(), true);
			}

			Date createdOn = new Date();
			
			UserMaster createdBy = new UserMaster();
			createdBy.setUserId(dimensionMasterBean.getUserId());
			
			if(dimensionMaster!= null) {
				DimensionMasterMod dimensionMasterMod = new DimensionMasterMod();
				dimensionMasterMod.setDimensionmaster(dimensionMaster);
				dimensionMasterMod.setIsActive(true);
				dimensionMasterMod.setDimMasterJson(JsonUtility.getGsonObject().toJson(dimensionMasterBean));
				dimensionMasterMod.setDimCode(dimensionMaster.getDimensionCode());
				dimensionMasterMod.setCreatedBy(createdBy);
				dimensionMasterMod.setCreatedOn(createdOn);
				dimensionMasterMod.setLastUpdatedOn(createdOn);
				dimensionMasterMod.setActionId(2);
				
				if(isApprovalRequired) {
					dimensionMasterMod.setAdminStatusId(1);
				}else {
					dimensionMasterMod.setAdminStatusId(2);
				}
					
				dimensionModRepo.save(dimensionMasterMod);
				
				if(!isApprovalRequired && dimensionMasterMod.getDimMasterModId()!= null) {
					
					dimensionMaster.setCodeListMaster(codeListMaster);
					dimensionMaster.setDimesnsionName(dimensionMasterBean.getDimensionName());
					dimensionMaster.setDimensionCode(dimensionMasterBean.getDimensionCode());
					
					DimensionType dimensionType = new DimensionType();
					dimensionType.setDimesnionTypeId(dimensionMasterBean.getDimensionTypeId());

					dimensionMaster.setDimensionType(dimensionType);
					dimensionMaster.setParentDimensionMaster(parentDimensionMaster);
					
					if(dimensionMasterBean.getRegEx()!= null) {
						Regex regex = new Regex();
						regex.setRegexId(dimensionMasterBean.getRegEx().getRegexId());
						dimensionMaster.setMinLength(dimensionMasterBean.getMinLength());
						dimensionMaster.setMaxLength(dimensionMasterBean.getMaxLength());
						dimensionMaster.setRegex(regex);
					}
					
					dimensionMaster.setDimDesc(dimensionMasterBean.getDimensionDesc());
					dimensionMaster.setIsActive(dimensionMasterBean.getIsActive());
					
					dimensionMaster.setLastModifiedBy(createdBy);
					dimensionMaster.setLastModifiedOn(createdOn);
					dimensionMaster.setLastUpdatedOn(createdOn);
					
					dimensionRepo.save(dimensionMaster);
				}
				return true;
			}else {
				throw new ServiceException("Code list not exist");
			}
		}catch(Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getErrorMessage(), e);
			return false;
		}
	}

	@Transactional(rollbackOn = Exception.class)
	public boolean deleteDimensionData(DimensionMasterBean inputDimensionMasterBean, boolean isApprovalRequired) {
		
		
		UserMaster createdBy = new UserMaster();
		createdBy.setUserId(inputDimensionMasterBean.getUserId());
		
		List<String> dmCodeList = inputDimensionMasterBean.getDimesnionMasterBeans().stream().map(f -> f.getDimensionCode()).collect(Collectors.toList());
		
		List<DimensionMasterMod> dimensionMasterMods = dimensionModRepo.findByDimCodeInAndAdminStatusId(dmCodeList, 1);
		
		if(!Validations.isEmpty(dimensionMasterMods)) {
			return false; 
		}
		
		List<DimensionMaster> dimensionMasterList = dimensionRepo.findByDimensionCodeInAndIsActive(dmCodeList,true);
		if(dimensionMasterList.size() != inputDimensionMasterBean.getDimesnionMasterBeans().size() ) {
			return false;
		}
		
		Map<String, DimensionMaster> dimensionMasterMap = new HashMap<>();
		
		for(DimensionMaster dimensionMaster :dimensionMasterList) {
			dimensionMasterMap.put(dimensionMaster.getDimensionCode(), dimensionMaster);
		}
		
		for (DimensionMasterBean dimensionMasterBean : inputDimensionMasterBean.getDimesnionMasterBeans()) {
			Date creationDate = new Date();
			
			if(dimensionMasterMap.containsKey(dimensionMasterBean.getDimensionCode())) {
				DimensionMaster dimensionMaster = dimensionMasterMap.get(dimensionMasterBean.getDimensionCode());
				// Create modification object
				
				DimensionMasterMod dimensionMasterMod = new DimensionMasterMod();
				dimensionMasterMod.setDimensionmaster(dimensionMasterMap.get(dimensionMasterBean.getDimensionCode()));
				dimensionMasterMod.setIsActive(true);
				
				dimensionMasterMod.setDimMasterJson(JsonUtility.getGsonObject().toJson(dimensionMasterBean));
				
				dimensionMasterMod.setCreatedBy(createdBy);
				dimensionMasterMod.setCreatedOn(creationDate);
				dimensionMasterMod.setLastUpdatedOn(creationDate);
				dimensionMasterMod.setActionId(com.iris.util.constant.GeneralConstants.ACTIONID_DELETION.getConstantIntVal());
				dimensionMasterMod.setDimCode(dimensionMasterBean.getDimensionCode());
				
				// Siddhart need to look into this
				if(isApprovalRequired) {
					dimensionMasterMod.setAdminStatusId(com.iris.util.constant.GeneralConstants.PENDING_ADMIN_STATUS_ID.getConstantIntVal());
				}else {
					dimensionMasterMod.setAdminStatusId(com.iris.util.constant.GeneralConstants.APPROVED_ADMIN_STATUS_ID.getConstantIntVal());
				}
				
				dimensionMasterMod = dimensionModRepo.save(dimensionMasterMod);
				
				if(!isApprovalRequired && dimensionMasterMod.getDimMasterModId() !=null) {
					dimensionMaster.setIsActive(false);
					dimensionRepo.save(dimensionMaster);
				}
			}
		}
		
		return true;
	}
	
	
	public Boolean getSdmxDimensionMasterUsingDimCode(String  dimCode) throws ServiceException {
		boolean found = false;
		List<DimensionMaster> sdmxDimensionMasters = null;
		try {
			sdmxDimensionMasters = dimensionRepo.getSdmxDimensionMasterUsingDimCode(dimCode);
			if(!Validations.isEmpty(sdmxDimensionMasters)) {
				found = true;
			}
			return found;
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		return found;
	}

}
