package com.iris.controller;

import java.io.Serializable;
import java.lang.reflect.Type;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.iris.dateutility.enums.DateConstants;
import com.iris.dateutility.util.DateManip;
import com.iris.dto.ServiceResponse;
import com.iris.exception.ServiceException;
import com.iris.model.AuditFirmInfo;
import com.iris.model.AuditFirmLabelInfo;
import com.iris.model.Auditor;
import com.iris.model.EntityAuditorMapping;
import com.iris.model.EntityAuditorMappingInfo;
import com.iris.model.EntityAuditorMapInfo;
import com.iris.model.EntityAuditorMapMod;
import com.iris.model.EntityBean;
import com.iris.model.Return;
import com.iris.model.UserAuditorRoleInfo;
import com.iris.model.UserMaster;
import com.iris.model.UserRoleMaster;
import com.iris.model.ViewEntityAuditorMapDto;
import com.iris.model.WebServiceComponentUrl;
import com.iris.repository.EntityAuditorMapModRepo;
import com.iris.repository.EntityAuditorMappingRepo;
import com.iris.repository.UserAuditorRoleRepo;
import com.iris.repository.UserMasterRepo;
import com.iris.service.impl.WebServiceComponentService;
import com.iris.util.JsonUtility;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MethodConstants;
import com.iris.webservices.client.CIMSRestWebserviceClient;
import com.iris.webservices.client.WebServiceResponseReader;

/**
 * @author psheke
 * @date 02/12/2020
 */
@Service
public class EntityAuditorMapProcessor implements Serializable {


	private static final long serialVersionUID = 5781426049378837543L;
	@Autowired
	private UserMasterRepo userMasterRepo;
	@Autowired
	private EntityAuditorMappingRepo entityAuditorMapRepo;
	@Autowired
	private EntityAuditorMapModRepo entityAuditorMapModRepo;
	@Autowired
	private UserAuditorRoleRepo userAuditorRoleRepo;
	@Autowired
	private WebServiceComponentService webServiceComponentService;
	@Autowired
	private WebServiceResponseReader webServiceResponseReader;
	static final Logger LOGGER = LogManager.getLogger(EntityAuditorMapProcessor.class);
	private static final String DD_SLASH_MM_SLASH_YYYY = "dd/MM/yyyy";
	private static final String calendarFormat = "en";
	private static final String timeFormat = DateConstants.HH_MM_SS.getDateConstants().toLowerCase() + " "
			+ DateConstants.AM_PM.getDateConstants();
	
	/**
	 * This method will fetch Auditor List
	 * @return auditorList 
	 */
	public List<Auditor> getAuditorList(){

		LOGGER.info("Fetching the Auditor List: EntityAuditorMapProcessor.getAuditorList");
		List<Auditor> auditorList = new ArrayList<>();
		Auditor auditor;
		List<UserMaster> auditorInfoList = new ArrayList<>();
		try {
			auditorInfoList = userMasterRepo.getAuditorList();
			for(UserMaster userAuditor : auditorInfoList) {

			
					auditor=new Auditor();
					auditor.setAuditorICAIMemNumber(userAuditor.getIcaiMemberNumber());
					auditor.setAuditorName(userAuditor.getFirstName()+" "+userAuditor.getLastName());
					auditor.setAuditorUserId(userAuditor.getUserId());
					auditor.setAuditorUserName(userAuditor.getIcaiMemberNumber());
				if(userAuditor.getLastName()!=null) {
					auditor.setAuditorIciaMap(userAuditor.getFirstName()+" "+userAuditor.getLastName()+"("+auditor.getAuditorICAIMemNumber()+")");
				}
				else {
					auditor.setAuditorIciaMap(userAuditor.getFirstName()+"("+auditor.getAuditorICAIMemNumber()+")");

				}
					auditorList.add(auditor);
				
			}
		}catch(Exception e) {
			LOGGER.error(ErrorCode.EC0033.toString());
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
		return auditorList;

	}

	/**
	 * This method will fetch Entity Auditor Mapping List
	 * @return entityAuditorMapList
	 */
	public EntityAuditorMappingInfo getEntityAuditorMapping(Long entityId,String langCode,Long auditorId,Long auditFirmId){
		LOGGER.info("Fetching the Entity Auditor Mapping List: EntityAuditorMapProcessor.getEntityAuditorMapping");
		EntityAuditorMappingInfo entityAuditorMapObj = new EntityAuditorMappingInfo();
		List<EntityAuditorMapInfo> entityAuditorMapInfoList = new ArrayList<>();
		List<EntityAuditorMapping> entityAuditorMapList=new ArrayList<>();
		UserAuditorRoleInfo userAudRoleInfo = null;
		SimpleDateFormat formatter = new SimpleDateFormat(DD_SLASH_MM_SLASH_YYYY);
	
		

		try {
			entityAuditorMapInfoList=entityAuditorMapRepo.getAuditorReturnMapping(entityId,true);

			EntityAuditorMapping entityAuditorMapping;
			for(EntityAuditorMapInfo entityAuditMapInfoObj :  entityAuditorMapInfoList) {
				entityAuditorMapping = new EntityAuditorMapping();
				entityAuditorMapping.setReturnId(entityAuditMapInfoObj.getReturnIdFk().getReturnId());
				entityAuditorMapping.setReturnName(entityAuditMapInfoObj.getReturnIdFk().getReturnName());
				entityAuditorMapping.setAuditorId(entityAuditMapInfoObj.getAuditorIdFk().getUserId());
				entityAuditorMapping.setAuditFirmId(entityAuditMapInfoObj.getAuditFirmIdFk().getAuditFirmId());
				entityAuditorMapping.setEntityId(entityAuditMapInfoObj.getEntityIdFk().getEntityId());
				entityAuditorMapping.setUpload(entityAuditMapInfoObj.getUpload());
				entityAuditorMapping.setReview(entityAuditMapInfoObj.getReview());
				entityAuditorMapping.setView(entityAuditMapInfoObj.getView());
				if(entityAuditMapInfoObj.getApprovedByFk()!=null) {
				entityAuditorMapping.setApprovedByUserName(entityAuditMapInfoObj.getApprovedByFk().getUserName());
				

				String aprrovedDate = DateManip.formatAppDateTime(entityAuditMapInfoObj.getApprovedOn(), DD_SLASH_MM_SLASH_YYYY + " " + timeFormat, calendarFormat);
				entityAuditorMapping.setApprovedOn(aprrovedDate);}
				entityAuditorMapping.setRejectComment(entityAuditMapInfoObj.getRejectComment());
				entityAuditorMapping.setAdminStatusId(entityAuditMapInfoObj.getAdminStatusIdFk());
				entityAuditorMapping.setIsActive(entityAuditMapInfoObj.getIsActive());
				entityAuditorMapping.setRequestedDate(DateManip.formatAppDateTime(entityAuditMapInfoObj.getCreatedOn(), DD_SLASH_MM_SLASH_YYYY + " " + timeFormat, calendarFormat));
				entityAuditorMapping.setRequestedByUserName(entityAuditMapInfoObj.getCreatedBy().getUserName());
				entityAuditorMapping.setAssociatedToUserName(entityAuditMapInfoObj.getAuditorIdFk().getUserName());
				String endDate= formatter.format(entityAuditMapInfoObj.getEndDate().getTime());
				String startDate=formatter.format(entityAuditMapInfoObj.getStartDate().getTime());
				entityAuditorMapping.setTenureEndDate(endDate);
				entityAuditorMapping.setTenureStartDate(startDate);
				String auditFirmName = null;
				Set<AuditFirmLabelInfo> auditFirmLabelSet =entityAuditMapInfoObj.getAuditFirmIdFk().getAuditFirmLabelSet();
				if (!CollectionUtils.isEmpty(auditFirmLabelSet)) { 
					for (AuditFirmLabelInfo firmlabel : auditFirmLabelSet) {
						if(firmlabel.getLanguageMaster().getLanguageCode().compareTo(langCode) == 0) {
							auditFirmName = firmlabel.getAuditFirmNameLabel();
							break;
						}
					}
				}
			 
				entityAuditorMapping.setAuditFirmName(auditFirmName);
	
			
				entityAuditorMapList.add(entityAuditorMapping);
			}
			if(entityAuditorMapList!=null) {
			entityAuditorMapObj.setEntityAudMapList(entityAuditorMapList);}
				

				entityAuditorMapObj.setEmail(fetchEntityAuditorMapEmail(auditorId, auditFirmId));
		

		} catch (Exception e) {
			LOGGER.error(ErrorCode.EC0033.toString());
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
		return entityAuditorMapObj;
	}

	/**
	 * This method will insert/update Entity Auditor Mapping 
	 */
	public void addEditEntityAuditorMapping(Long entityId,EntityAuditorMappingInfo entityAuditorMappingInfo,String langCode) {
		LOGGER.info("Inserting/Updating Entity Auditor Mapping List: EntityAuditorMapProcessor.addEditEntityAuditorMapping");
		List<EntityAuditorMapInfo> entityAuditorMapInfoList =new ArrayList<>();
		EntityAuditorMapInfo entityAuditorMapInfo;
		Return returnObj;
		UserMaster user = null;
		List<EntityAuditorMapping>entityAuditorMapList =entityAuditorMappingInfo.getEntityAudMapList();
		try {
			 user=userMasterRepo.findByUserIdAndIsActiveTrue(entityAuditorMappingInfo.getAuditorId());
			
		if(!entityAuditorMapList.isEmpty()) {
			
			for(EntityAuditorMapping entityAuditorMap:entityAuditorMapList) {
				entityAuditorMapInfo=new EntityAuditorMapInfo();

				returnObj=new Return();
				returnObj.setReturnId(entityAuditorMap.getReturnId());
				entityAuditorMapInfo.setReturnIdFk(returnObj);

				UserMaster userObj=new UserMaster();
				userObj.setUserId(entityAuditorMappingInfo.getAuditorId());
				entityAuditorMapInfo.setAuditorIdFk(userObj);


				EntityBean entity=new EntityBean();
				entity.setEntityId(entityId);

				entityAuditorMapInfo.setEntityIdFk(entity);

				entityAuditorMapInfo.setIsActive(entityAuditorMap.getIsActive());

			
				
				AuditFirmInfo auditFirm = new AuditFirmInfo();
				
				auditFirm.setAuditFirmId(entityAuditorMappingInfo.getAuditFirmId());

				entityAuditorMapInfo.setAuditFirmIdFk(auditFirm);

					entityAuditorMapInfo.setUpload(entityAuditorMap.getUpload());
					entityAuditorMapInfo.setView(entityAuditorMap.getView());
					entityAuditorMapInfo.setReview(entityAuditorMap.getReview());

					Date tenureStartDate=new SimpleDateFormat(DD_SLASH_MM_SLASH_YYYY).parse(entityAuditorMap.getTenureStartDate());

					entityAuditorMapInfo.setStartDate(tenureStartDate);
					Date tenureEndDate=new SimpleDateFormat(DD_SLASH_MM_SLASH_YYYY).parse(entityAuditorMap.getTenureEndDate());

					entityAuditorMapInfo.setEndDate(tenureEndDate);

				      
				if(!entityAuditorMap.isUpdateFlag()) {
					entityAuditorMapInfo.setAdminStatusIdFk(1);

					UserMaster userMasterObj = new UserMaster();
					userMasterObj.setUserId(entityAuditorMap.getCreatedByUserId());
					entityAuditorMapInfo.setCreatedBy(userMasterObj);
					entityAuditorMapInfo.setCreatedOn(DateManip.getCurrentDateTime());

				}
				else {
					UserMaster userModifyObj = new UserMaster();
					userModifyObj.setUserId(entityAuditorMap.getModifiedByUserId());
					entityAuditorMapInfo.setModifiedBy(userModifyObj);
					entityAuditorMapInfo.setModifiedOn(DateManip.getCurrentDateTime());
					EntityAuditorMapInfo entityAuditorMapInfoExist =entityAuditorMapRepo.getEntityAuditorMap(entityId,entityAuditorMap.getReturnId(),true);


					if(entityAuditorMapInfoExist!=null) {
						entityAuditorMapInfo.setEntityAuditorMapId(entityAuditorMapInfoExist.getEntityAuditorMapId());
						if(entityAuditorMapInfo.getIsActive()) {
							entityAuditorMapInfo.setAdminStatusIdFk(1);
						}
						else {
							entityAuditorMapInfo.setAdminStatusIdFk(entityAuditorMapInfoExist.getAdminStatusIdFk());
						}
						entityAuditorMapInfo.setCreatedBy(entityAuditorMapInfoExist.getCreatedBy());
						entityAuditorMapInfo.setCreatedOn(entityAuditorMapInfoExist.getCreatedOn());
						
		

						//Modification History
					
							EntityAuditorMapping entityAudObj =new EntityAuditorMapping();
							entityAudObj.setAuditorId(entityAuditorMapInfoExist.getAuditorIdFk().getUserId());
							entityAudObj.setEntityId(entityAuditorMapInfoExist.getEntityIdFk().getEntityId());
							entityAudObj.setEntityName(entityAuditorMapInfoExist.getEntityIdFk().getEntityName());
							entityAudObj.setEntityCode(entityAuditorMapInfoExist.getEntityIdFk().getEntityCode());
							entityAudObj.setIsActive(entityAuditorMapInfoExist.getIsActive());
							entityAudObj.setReturnId(entityAuditorMapInfoExist.getReturnIdFk().getReturnId());
							entityAudObj.setReturnCode(entityAuditorMapInfoExist.getReturnIdFk().getReturnCode());
							entityAudObj.setReturnName(entityAuditorMapInfoExist.getReturnIdFk().getReturnName());
							entityAudObj.setUpload(entityAuditorMapInfoExist.getUpload());
							entityAudObj.setReview(entityAuditorMapInfoExist.getReview());
							entityAudObj.setView(entityAuditorMapInfoExist.getView());
							entityAudObj.setAuditorICAIMemNumber(entityAuditorMapInfoExist.getAuditorIdFk().getIcaiMemberNumber());
							entityAudObj.setRequestedDate(DateManip.formatAppDateTime(entityAuditorMapInfoExist.getCreatedOn(), DD_SLASH_MM_SLASH_YYYY + " " + timeFormat, calendarFormat));
							entityAudObj.setRequestedByUserName(entityAuditorMapInfoExist.getCreatedBy().getUserName());
					if(entityAuditorMapInfoExist.getApprovedByFk()!=null) {
						String aprrovedDate = DateManip.formatAppDateTime(entityAuditorMapInfoExist.getApprovedOn(), DD_SLASH_MM_SLASH_YYYY + " " + timeFormat, calendarFormat);
						entityAudObj.setApprovedByUserName(entityAuditorMapInfoExist.getApprovedByFk().getUserName());
						entityAudObj.setApprovedOn(aprrovedDate);
						entityAudObj.setRejectComment(entityAuditorMapInfoExist.getRejectComment());
						
					}
					String auditFirmName = null;
					Set<AuditFirmLabelInfo> auditFirmLabelSet =entityAuditorMapInfoExist.getAuditFirmIdFk().getAuditFirmLabelSet();
					if (!CollectionUtils.isEmpty(auditFirmLabelSet)) { 
						for (AuditFirmLabelInfo firmlabel : auditFirmLabelSet) {
							if(firmlabel.getLanguageMaster().getLanguageCode().compareTo(langCode) == 0) {
								auditFirmName = firmlabel.getAuditFirmNameLabel();
								break;
							}
						}
					}
				 
					entityAudObj.setAuditFirmName(auditFirmName);
						
							SimpleDateFormat formatter = new SimpleDateFormat(DD_SLASH_MM_SLASH_YYYY);

							String endDate= formatter.format(entityAuditorMapInfoExist.getEndDate().getTime());
							String startDate=formatter.format(entityAuditorMapInfoExist.getStartDate().getTime());
							entityAudObj.setTenureStartDate(startDate);
							entityAudObj.setTenureEndDate(endDate);
							entityAudObj.setAdminStatusId(entityAuditorMapInfoExist.getAdminStatusIdFk());
							entityAudObj.setEmail(fetchEntityAuditorMapEmail(entityAuditorMapInfoExist.getAuditorIdFk().getUserId(),entityAuditorMapInfoExist.getAuditFirmIdFk().getAuditFirmId()));
							entityAudObj.setAuditorName(entityAuditorMapInfoExist.getAuditorIdFk().getFirstName()+" "+entityAuditorMapInfoExist.getAuditorIdFk().getLastName());
							entityAudObj.setIsActive(entityAuditorMapInfoExist.getIsActive());
							String jsonResult = new Gson().toJson(entityAudObj);

							EntityAuditorMapMod entityAuditorMapMod=new EntityAuditorMapMod();
							entityAuditorMapMod.setEntityAuditorMapModIdFk(entityAuditorMapInfoExist);
							entityAuditorMapMod.setEntityAuditorMappingModJson(jsonResult);
							entityAuditorMapMod.setLastModifiedBy(userModifyObj);
							entityAuditorMapMod.setLastModifiedOn(entityAuditorMapInfo.getModifiedOn());
							entityAuditorMapModRepo.save(entityAuditorMapMod);
						
					}	


				}

				entityAuditorMapInfoList.add(entityAuditorMapInfo);

			}

			for(EntityAuditorMapInfo obj:entityAuditorMapInfoList) {
				entityAuditorMapRepo.save(obj);
			}
			
		}
			List<UserAuditorRoleInfo> userAudRoleList = new ArrayList<>();
			AuditFirmInfo auditFirmObj = new AuditFirmInfo();
			auditFirmObj.setAuditFirmId(entityAuditorMappingInfo.getAuditFirmId());
			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(GeneralConstants.ADD_USER_AUDITOR_ROLE.getConstantVal(), CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);
			
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();
			Map<String, String> headerMap = new HashMap<>();
			String jobProcessingId = UUID.randomUUID().toString();
			headerMap.put(GeneralConstants.UUID.getConstantVal(), jobProcessingId);

			for(UserRoleMaster userRole:user.getUsrRoleMstrSet()) {
			UserAuditorRoleInfo userAudRole=new UserAuditorRoleInfo();
			
			userAudRole.setAuditFirmId(entityAuditorMappingInfo.getAuditFirmId());
			userAudRole.setAuditorEmail(entityAuditorMappingInfo.getEmail());
			userAudRole.setUserRoleMasterId(userRole.getUserRoleMasterId());
			userAudRole.setActive(Boolean.TRUE);
			userAudRoleList.add(userAudRole);
			}
		
			String response = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, userAudRoleList, null,headerMap);
			ServiceResponse serviceResponse = (ServiceResponse) webServiceResponseReader.readServiceResponse(ServiceResponse.class, response, componentUrl.getUrlProduceType());
			if (!serviceResponse.isStatus()) {
				LOGGER.error(ErrorCode.EC0033.toString()); 
			}
			
			
		}catch (Exception e) {
			LOGGER.error(ErrorCode.EC0033.toString());
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
	}

	/**
	 * This method will fetch the entity auditor mapping for approval or rejection 
	 */
	public List<EntityAuditorMapping> getEntityAuditorMappingForApproval(Long auditorId,String langCode){
		LOGGER.info("Fetching the Entity Auditor Mapping List: EntityAuditorMapProcessor.getEntityAuditorMappingForApproval");
		List<EntityAuditorMapInfo> entityAuditorMapInfoList = new ArrayList<>();
		List<EntityAuditorMapping> entityAuditorMapList=new ArrayList<>();
		try {
			Integer statusId = 1;
			entityAuditorMapInfoList=entityAuditorMapRepo.getEntityAuditorMappingForApproval(auditorId,statusId,true);
			EntityAuditorMapping entityAuditorMapping;
			for(EntityAuditorMapInfo entityAuditMapInfoObj :  entityAuditorMapInfoList) {
				entityAuditorMapping = new EntityAuditorMapping();
				entityAuditorMapping.setEntityAuditorMapId(entityAuditMapInfoObj.getEntityAuditorMapId());
				entityAuditorMapping.setEntityName(entityAuditMapInfoObj.getEntityIdFk().getEntityName());
				entityAuditorMapping.setEntityCode(entityAuditMapInfoObj.getEntityIdFk().getEntityCode());
				entityAuditorMapping.setReturnName(entityAuditMapInfoObj.getReturnIdFk().getReturnName());
				entityAuditorMapping.setReturnCode(entityAuditMapInfoObj.getReturnIdFk().getReturnCode());
				entityAuditorMapping.setUpload(entityAuditMapInfoObj.getUpload());
				entityAuditorMapping.setReview(entityAuditMapInfoObj.getReview());
				entityAuditorMapping.setView(entityAuditMapInfoObj.getView());
				SimpleDateFormat formatter = new SimpleDateFormat(DD_SLASH_MM_SLASH_YYYY);

				String endDate= formatter.format(entityAuditMapInfoObj.getEndDate().getTime());
				String startDate=formatter.format(entityAuditMapInfoObj.getStartDate().getTime());
				String auditFirmName = null;
				Set<AuditFirmLabelInfo> auditFirmLabelSet =entityAuditMapInfoObj.getAuditFirmIdFk().getAuditFirmLabelSet();
				if (!CollectionUtils.isEmpty(auditFirmLabelSet)) { 
					for (AuditFirmLabelInfo firmlabel : auditFirmLabelSet) {
						if(firmlabel.getLanguageMaster().getLanguageCode().compareTo(langCode) == 0) {
							auditFirmName = firmlabel.getAuditFirmNameLabel();
							break;
						}
					}
				}
			 
				entityAuditorMapping.setAuditFirmName(auditFirmName);
				entityAuditorMapping.setTenureEndDate(endDate);
				entityAuditorMapping.setTenureStartDate(startDate);
				entityAuditorMapping.setRequestedDate(DateManip.formatAppDateTime(entityAuditMapInfoObj.getCreatedOn(), DD_SLASH_MM_SLASH_YYYY + " " + timeFormat, calendarFormat));
				entityAuditorMapping.setRequestedByUserName(entityAuditMapInfoObj.getCreatedBy().getUserName());
				entityAuditorMapList.add(entityAuditorMapping);
			}
		} catch (Exception e) {
			LOGGER.error(ErrorCode.EC0033.toString());
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
		return entityAuditorMapList;

	}
	
	/**
	 * This method will process  the entity auditor mapping approval or rejection. 
	 */
	public void approveOrRejectEntityAuditorMapping(boolean approveType,EntityAuditorMapping entityAuditorMap) {
		LOGGER.info("Processing Approval/Rejection of entity auditor mapping: EntityAuditorMapProcessor.approveOrRejectEntityAuditorMapping");
		EntityAuditorMapInfo entityAuditMapInfoObj;
		try {
		entityAuditMapInfoObj=entityAuditorMapRepo.getEntityAuditorMapById(entityAuditorMap.getEntityAuditorMapId(),true);
		UserMaster userObj = new UserMaster();
		userObj.setUserId(entityAuditorMap.getAuditorId());
		entityAuditMapInfoObj.setApprovedByFk(userObj);	
		entityAuditMapInfoObj.setApprovedOn(DateManip.getCurrentDateTime());
		if(approveType) {
			entityAuditMapInfoObj.setAdminStatusIdFk(4);
		}
		else{
			entityAuditMapInfoObj.setRejectComment(entityAuditorMap.getRejectComment());
			entityAuditMapInfoObj.setAdminStatusIdFk(3);
		}
		entityAuditorMapRepo.save(entityAuditMapInfoObj);
	}catch (Exception e) {
		LOGGER.error(ErrorCode.EC0033.toString());
		throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
	}
}
	WebServiceComponentUrl getWebServiceComponentURL(String componentName, String methodType){
		Map<String, List<String>> valueMap = new HashMap<String, List<String>>();
		
		List<String> valueList = new ArrayList<>();
		valueList.add(componentName);
		valueMap.put(ColumnConstants.COMPONENTTYPE.getConstantVal(), valueList);
		
		valueList = new ArrayList<>();
		valueList.add(methodType);
		valueMap.put(ColumnConstants.METHODTYPE.getConstantVal(), valueList);

		WebServiceComponentUrl componentUrl = null;
		try {
			componentUrl = webServiceComponentService.getDataByColumnValue(valueMap, MethodConstants.GET_ACTIVE_DATA_BY_COMPONENTTYPE_METHODTYPE.getConstantVal()).get(0);
		} catch (ServiceException e) {
			LOGGER.error("Exception : ", e);
		}
		return componentUrl;
	}
	
	public void getEntityAuditorMappingData(ViewEntityAuditorMapDto viewEntityAuditorMap) {
		  LOGGER.info("Fetching the entity auditor mapping: getEntityAuditorMappingData");	
		List<Long> entityIdList =viewEntityAuditorMap.getEntityIdList();
		List<Long> returnIdList =viewEntityAuditorMap.getReturnIdList();
		EntityAuditorMapping entityAuditorMapping;
		List<EntityAuditorMapping> entityAuditorMapList=new ArrayList<>();
		try {
		List<EntityAuditorMapInfo> entityAuditorMapInfoList =entityAuditorMapRepo.getEntityAuditorMapByEntityIdReturnId(entityIdList,returnIdList);
		if(!entityAuditorMapInfoList.isEmpty()) {
		for(EntityAuditorMapInfo entityAuditMapInfoObj :  entityAuditorMapInfoList) {
			entityAuditorMapping = new EntityAuditorMapping();
			entityAuditorMapping.setEntityAuditorMapId(entityAuditMapInfoObj.getEntityAuditorMapId());
			entityAuditorMapping.setEntityName(entityAuditMapInfoObj.getEntityIdFk().getEntityName());
			entityAuditorMapping.setEntityCode(entityAuditMapInfoObj.getEntityIdFk().getEntityCode());
			entityAuditorMapping.setReturnName(entityAuditMapInfoObj.getReturnIdFk().getReturnName());
			entityAuditorMapping.setReturnCode(entityAuditMapInfoObj.getReturnIdFk().getReturnCode());
			entityAuditorMapping.setUpload(entityAuditMapInfoObj.getUpload());
			entityAuditorMapping.setReview(entityAuditMapInfoObj.getReview());
			entityAuditorMapping.setView(entityAuditMapInfoObj.getView());
			if(entityAuditMapInfoObj.getApprovedOn()!=null) {
			String aprrovedDate = DateManip.formatAppDateTime(entityAuditMapInfoObj.getApprovedOn(), DD_SLASH_MM_SLASH_YYYY + " " + timeFormat, calendarFormat);
			entityAuditorMapping.setApprovedOn(aprrovedDate);
			}
			entityAuditorMapping.setRequestedDate(DateManip.formatAppDateTime(entityAuditMapInfoObj.getCreatedOn(), DD_SLASH_MM_SLASH_YYYY + " " + timeFormat, calendarFormat));
			entityAuditorMapping.setRequestedByUserName(entityAuditMapInfoObj.getCreatedBy().getUserName());
			entityAuditorMapping.setAuditorICAIMemNumber(entityAuditMapInfoObj.getAuditorIdFk().getIcaiMemberNumber());
			SimpleDateFormat formatter = new SimpleDateFormat(DD_SLASH_MM_SLASH_YYYY);

			String endDate= formatter.format(entityAuditMapInfoObj.getEndDate().getTime());
			String startDate=formatter.format(entityAuditMapInfoObj.getStartDate().getTime());
			String auditFirmName = null;
			Set<AuditFirmLabelInfo> auditFirmLabelSet =entityAuditMapInfoObj.getAuditFirmIdFk().getAuditFirmLabelSet();
			if (!CollectionUtils.isEmpty(auditFirmLabelSet)) { 
				for (AuditFirmLabelInfo firmlabel : auditFirmLabelSet) {
					if(firmlabel.getLanguageMaster().getLanguageCode().compareTo(viewEntityAuditorMap.getLangCode()) == 0) {
						auditFirmName = firmlabel.getAuditFirmNameLabel();
						break;
					}
				}
			}
		 
			entityAuditorMapping.setAuditFirmName(auditFirmName);
			entityAuditorMapping.setEmail(fetchEntityAuditorMapEmail(entityAuditMapInfoObj.getAuditorIdFk().getUserId(),entityAuditMapInfoObj.getAuditFirmIdFk().getAuditFirmId()));
			entityAuditorMapping.setTenureEndDate(endDate);
			entityAuditorMapping.setTenureStartDate(startDate);
			entityAuditorMapping.setAdminStatusId(entityAuditMapInfoObj.getAdminStatusIdFk());
			entityAuditorMapping.setAuditorName(entityAuditMapInfoObj.getAuditorIdFk().getFirstName()+" "+entityAuditMapInfoObj.getAuditorIdFk().getLastName());
			entityAuditorMapping.setIsActive(entityAuditMapInfoObj.getIsActive());
			entityAuditorMapping.setRejectComment(entityAuditMapInfoObj.getRejectComment());
			entityAuditorMapList.add(entityAuditorMapping);
			
			List<EntityAuditorMapMod> entityAuditorMapModList=entityAuditMapInfoObj.getEntityAuditorMapMod();
			if(entityAuditorMapModList!=null) {
			for(EntityAuditorMapMod  mapModObj:entityAuditorMapModList) {
				entityAuditorMapping = new EntityAuditorMapping();
				if(mapModObj!=null) {
				
				Type listToken = new TypeToken<EntityAuditorMapping>() {
				}.getType();

				entityAuditorMapping = JsonUtility.getGsonObject().fromJson(mapModObj.getEntityAuditorMappingModJson(), listToken);
			}
				entityAuditorMapList.add(entityAuditorMapping);	
			}
	}
		}
		viewEntityAuditorMap.setEntityAuditorMapList(entityAuditorMapList);
		
		} 
		
		}catch (Exception e) {
			LOGGER.error(ErrorCode.EC0033.toString());
			throw new ServiceException(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal(), e);
		}
	}
	
	public String fetchEntityAuditorMapEmail(Long auditorId,Long auditFirmId) {
		 LOGGER.info("Fetching the entity auditor mapping communication email: fetchEntityAuditorMapEmail");	
		UserAuditorRoleInfo userAudRoleInfo = null;
		WebServiceComponentUrl componentUrl = getWebServiceComponentURL(GeneralConstants.GET_USER_AUD_ROLE_BY_AUD_ID_FIRM_ID.getConstantVal(), CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);
		
		CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();
		Map<String, String> headerMap = new HashMap<>();
		String jobProcessingId = UUID.randomUUID().toString();
		headerMap.put(GeneralConstants.UUID.getConstantVal(), jobProcessingId);
		
		
		String pathParams =  "/" + auditorId + "/" + auditFirmId;
		try {
		String response = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, null, pathParams,headerMap);
		ServiceResponse serviceResponse;
	
			serviceResponse = (ServiceResponse) webServiceResponseReader.readServiceResponse(ServiceResponse.class, response, componentUrl.getUrlProduceType());
		
		if (serviceResponse.isStatus()) {
			String objectString = JsonUtility.extractResponseValueFromServiceResponseString(response);
			Type listToken = new TypeToken<UserAuditorRoleInfo>() {
			}.getType();

			 userAudRoleInfo = JsonUtility.getGsonObject().fromJson(objectString, listToken);
	}
	if(userAudRoleInfo!=null) {
		return userAudRoleInfo.getAuditorEmail();

	}

	return null;	
		} catch (Exception e) {
			return null;
		}
	}
}