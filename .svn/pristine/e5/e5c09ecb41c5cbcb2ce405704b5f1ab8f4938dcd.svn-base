package com.iris.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.Tuple;

import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.iris.controller.EntityMasterController;
import com.iris.dto.CategoryDto;
import com.iris.dto.EntityDto;
import com.iris.dto.SubCategoryDto;
import com.iris.dto.UserDetailsDto;
import com.iris.dto.UserDto;
import com.iris.dto.UserRoleDto;
import com.iris.exception.ApplicationException;
import com.iris.exception.ServiceException;
import com.iris.model.UserMaster;
import com.iris.repository.UserMasterRepo;
import com.iris.service.GenericService;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.QueryParameterConstants;

@Service
public class UserMasterServiceV2 implements GenericService<UserMaster, Long> {

	private static final Logger LOGGER = LogManager.getLogger(UserMasterServiceV2.class);

	@Autowired
	UserMasterRepo userMasterRepo;
	
	@Autowired
	private EntityManager em;

	@Override
	public UserMaster add(UserMaster entity) throws ServiceException {
		return null;
	}

	@Override
	public boolean update(UserMaster entity) throws ServiceException {
		return false;
	}

	@Override
	public List<UserMaster> getDataByIds(Long[] ids) throws ServiceException {
		return null;
	}

	@Override
	public List<UserMaster> getDataByColumnValue(Map<String, List<String>> columnValueMap, String methodName) throws ServiceException {
		return null;
	}

	@Override
	public List<UserMaster> getActiveDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public List<UserMaster> getAllDataFor(Class bean, Long id) throws ServiceException {
		return null;
	}

	@Override
	public void deleteData(UserMaster bean) throws ServiceException {

	}

	@Override
	public List<UserMaster> getDataByColumnLongValue(Map<String, List<Long>> columnValueMap, String methodName) throws ServiceException {
		return null;
	}

	@Override
	public UserMaster getDataById(Long id) throws ServiceException {
		return null;
	}


	@Override
	public List<UserMaster> getDataByObject(Map<String, Object> columnValueMap, String methodName) throws ServiceException {
		return null;
	}
	
	//Child class methods
	public UserDetailsDto getUserWithEntityDetails(UserDto userDto) throws ApplicationException {
		UserDetailsDto userDetailsDto = getUserDetails(userDto);
		
		if(userDetailsDto == null) {
			return null;
		}
		
		if(userDto.getRoleId()!= null && userDetailsDto.getUserRoleDtos().stream().filter(f -> f.getUserRoleId().equals(userDto.getRoleId())).findAny().orElse(null) == null) {
			throw new ApplicationException("PASSED ROLE ID not EXIST", "PASSED ROLE ID not EXIST");
		}
		
		String sql = null;
		Query query = null;
		boolean allowSubCategoryFilter = false;
		if(!CollectionUtils.isEmpty(userDto.getSubCategoryCodes())) {
			allowSubCategoryFilter = true;
		}
		
		if(userDetailsDto.getRoleTypeId().intValue() == GeneralConstants.ENTITY_ROLE_TYPE_ID.getConstantLongVal().intValue()) {
			sql = getEntityDetailsQueryForEntityUser(allowSubCategoryFilter);
			query =  em.createNativeQuery(sql, Tuple.class);
			List<Long> roleIds = new ArrayList<>();
			if(userDto.getRoleId()!= null) {
				roleIds.add(userDto.getRoleId());
			}else {
				roleIds.addAll(userDetailsDto.getUserRoleDtos().stream().map(f -> f.getUserRoleId()).collect(Collectors.toList()));
			}
			query.setParameter(QueryParameterConstants.USER_ROLE_IDS.getConstants(), roleIds);
		}else if(userDetailsDto.getRoleTypeId().intValue() == GeneralConstants.REGULATOR_ROLE_TYPE_ID.getConstantLongVal().intValue()) {
			sql = getEntityDetailsQueryForRegulatorUser(allowSubCategoryFilter);
			query =  em.createNativeQuery(sql, Tuple.class);
		}
		
		if(query!= null) {
			query.setParameter(QueryParameterConstants.IS_ACTIVE.getConstants(), userDto.getIsActive());
			query.setParameter(QueryParameterConstants.LANGUAGE_CODE.getConstants(), userDto.getLangCode());
			query.setParameter(QueryParameterConstants.USER_ID.getConstants(), userDto.getUserId());
			if(allowSubCategoryFilter) {
				query.setParameter(QueryParameterConstants.CAT_CODES.getConstants(), userDto.getCategoryCode());
				query.setParameter(QueryParameterConstants.SUB_CAT_CODES.getConstants(), userDto.getSubCategoryCodes());
			}
			
			List<Tuple> result = query.getResultList();
			
			for (Tuple tuple : result) {
				EntityDto entityDto  = getEntityDto(tuple);
				if(userDetailsDto.getEntityDtos()!= null) {
					userDetailsDto.getEntityDtos().add(entityDto);
				}else {
					List<EntityDto> entityDtos = new ArrayList<>();
					entityDtos.add(entityDto);
					userDetailsDto.setEntityDtos(entityDtos);
				}
			}
		}
		
		return userDetailsDto;
	}
	
	private EntityDto getEntityDto(Tuple tuple) {
		EntityDto entityDto = new EntityDto();
		entityDto.setEntityId(Long.parseLong(tuple.get(6)+""));
		entityDto.setEntityCode(tuple.get(7)+"");
		entityDto.setIfscCode(tuple.get(8)+"");
		entityDto.setEntityName(tuple.get(9)+"");
		entityDto.setEntityNameAndCode(tuple.get(9)+"" + "(" + tuple.get(7) + ")");
		
		CategoryDto categoryDto = new CategoryDto();
		categoryDto.setCategoryId(Integer.parseInt(tuple.get(10)+""));
		categoryDto.setCategoryName(tuple.get(11)+"");
		categoryDto.setCategoryCode(tuple.get(12)+"");
		
		SubCategoryDto subCategoryDto = new SubCategoryDto();
		subCategoryDto.setSubCategoryId(Integer.parseInt(tuple.get(13)+""));
		subCategoryDto.setSubCategoryName(tuple.get(14)+"");
		subCategoryDto.setSubCategoryCode(tuple.get(15)+"");
		
		entityDto.setCategoryDto(categoryDto);
		entityDto.setSubCategoryDto(subCategoryDto);
		
		return entityDto;
	}
	
	private String getEntityDetailsQueryForEntityUser(boolean allowSubCategoryFilter){
		
		StringBuilder entityDetailsQuery = new StringBuilder();
		
		entityDetailsQuery.append("select distinct usr.USER_ID, usr.USER_NAME, usr.FIRST_NAME, usr.LAST_NAME,  usr.ROLE_TYPE_FK, "
				+ "\"ENTITY_USER\", ent.ENTITY_ID , ent.ENTITY_CODE , ent.IFSC_CODE , entLabel.ENTITY_NAME_LABEL ,  "
				+ " cat.CATEGORY_ID, catLabel.CATEGORY_LABEL , cat.CATEGORY_CODE , subCat.SUB_CATEGORY_ID, subCatLabel.SUB_CATEGORY_LABEL ,"
				+ " subCat.SUB_CATEGORY_CODE from TBL_USER_MASTER usr, TBL_USER_ROLE_MASTER roleMas,"
				+ " TBL_USER_ROLE rle, TBL_USER_ROLE_LABEL roleLabel, TBL_USER_ENTITY_ROLE entRole, TBL_ENTITY ent,"
				+ " TBL_ENTITY_LABEL entLabel,  TBL_CATEGORY cat, TBL_CATEGORY_LABEL catLabel, TBL_SUB_CATEGORY subCat, "
				+ " TBL_SUB_CATEGORY_LABEL subCatLabel, TBL_LANGUAGE_MASTER lang  where usr.USER_ID =:userId "
				+ " and usr.IS_ACTIVE =:isActive "
				+ " and roleMas.IS_ACTIVE =:isActive"
				+ " and rle.IS_ACTIVE =:isActive "
				+ " and entRole.IS_ACTIVE =:isActive "
				+ " and ent.IS_ACTIVE =:isActive "
				+ " and lang.LANGUAGE_CODE =:languageCode "
				+ " and rle.USER_ROLE_ID IN(:userRoleIds)"
				+ " and entLabel.LANGUAGE_ID_FK = lang.LANGUAGE_ID "
				+ " and cat.IS_ACTIVE =:isActive "
				+ " and subCat.IS_ACTIVE =:isActive ");
		
				if(allowSubCategoryFilter) {
					entityDetailsQuery.append(" and cat.CATEGORY_CODE IN(:categoryCodes)");
					entityDetailsQuery.append(" and subCat.SUB_CATEGORY_CODE IN(:subCategoryCodes)");
				}

				entityDetailsQuery.append(" and roleLabel.LANG_ID_FK = lang.LANGUAGE_ID "
				+ " and catLabel.LANG_ID_FK = lang.LANGUAGE_ID "
				+ " and subCatLabel.LANG_ID_FK = lang.LANGUAGE_ID "
				+ " and usr.USER_ID = roleMas.USER_MASTER_ID_FK and "
				+ " roleMas.USER_ROLE_ID_FK = rle.USER_ROLE_ID and rle.USER_ROLE_ID = roleLabel.USER_ROLE_ID_FK"
				+ " and entRole.USER_ROLE_MASTER_ID_FK = roleMas.USER_ROLE_MASTER_ID and ent.ENTITY_ID = entRole.ENTITY_ID_FK "
				+ " and ent.ENTITY_ID = entLabel.ENTITY_ID_FK and ent.CATEGORY_ID_FK = cat.CATEGORY_ID and catLabel.CATEGORY_ID_FK = cat.CATEGORY_ID "
				+ " and ent.SUB_CATEGORY_ID_FK = subCat.SUB_CATEGORY_ID and subCatLabel.SUB_CATEGORY_ID_FK = subCat.SUB_CATEGORY_ID ");
				
				return entityDetailsQuery.toString();
	}
	
	private String getEntityDetailsQueryForRegulatorUser(boolean allowSubCategoryFilter){
		StringBuilder entityDetailsQuery = new StringBuilder();

		entityDetailsQuery.append("select usr.USER_ID, usr.USER_NAME, usr.FIRST_NAME, usr.LAST_NAME,  usr.ROLE_TYPE_FK, regLabel.REGULATOR_LABEL, ent.ENTITY_ID , " + 
				"ent.ENTITY_CODE , ent.IFSC_CODE , entLabel.ENTITY_NAME_LABEL ,  cat.CATEGORY_ID, catLabel.CATEGORY_LABEL , cat.CATEGORY_CODE , subCat.SUB_CATEGORY_ID, subCatLabel.SUB_CATEGORY_LABEL , "
				+ "subCat.SUB_CATEGORY_CODE from TBL_USER_MASTER usr, TBL_DEPT_USER_ENTITY_MAPPING map, TBL_ENTITY ent, TBL_ENTITY_LABEL entLabel,  TBL_CATEGORY cat, "
				+ " TBL_CATEGORY_LABEL catLabel, TBL_SUB_CATEGORY subCat, TBL_SUB_CATEGORY_LABEL subCatLabel, "
				+ " TBL_REGULATOR reg, TBL_REGULATOR_LABEL regLabel, TBL_LANGUAGE_MASTER lang where usr.USER_ID =:userId "
				+ " and usr.IS_ACTIVE =:isActive and ent.IS_ACTIVE =:isActive and map.IS_ACTIVE =:isActive "
				+ " and entLabel.LANGUAGE_ID_FK = lang.LANGUAGE_ID "
				+ " and cat.IS_ACTIVE =:isActive "
				+ " and subCat.IS_ACTIVE =:isActive "
				+ " and lang.LANGUAGE_CODE =:languageCode ");
		
			if(allowSubCategoryFilter) {
				entityDetailsQuery.append(" and cat.CATEGORY_CODE IN(:categoryCodes)");
				entityDetailsQuery.append(" and subCat.SUB_CATEGORY_CODE IN(:subCategoryCodes)");
			}
		
			entityDetailsQuery.append(" and catLabel.LANG_ID_FK = lang.LANGUAGE_ID "
				+ " and subCatLabel.LANG_ID_FK = lang.LANGUAGE_ID "
				+ " and regLabel.LANGUAGE_ID_FK = lang.LANGUAGE_ID "
				+ " and reg.IS_ACTIVE =:isActive and ent.ENTITY_ID = entLabel.ENTITY_ID_FK and ent.CATEGORY_ID_FK = cat.CATEGORY_ID "
				+ " and catLabel.CATEGORY_ID_FK = cat.CATEGORY_ID "
				+ " and ent.SUB_CATEGORY_ID_FK = subCat.SUB_CATEGORY_ID and subCatLabel.SUB_CATEGORY_ID_FK = subCat.SUB_CATEGORY_ID  "
				+ " and map.USER_ID_FK = usr.USER_ID "
				+ " and map.ENTITY_ID_FK = ent.ENTITY_ID "
				+ " and usr.DEPARTMENT_ID_FK = reg.REGULATOR_ID and usr.DEPARTMENT_ID_FK = regLabel.REGULATOR_ID_FK");
			
			return entityDetailsQuery.toString();
	}
	
	public UserDetailsDto getUserDetails(UserDto userDto){

		String sql = "SELECT mas.userId, roleType.roleTypeId, userRole.userRoleId, userRoleLabel.userRoleLabel, userRole.user.userId "
				+ " FROM UserMaster mas left join RoleType roleType  on mas.roleType.roleTypeId = roleType.roleTypeId "
				+ "left join UserRoleMaster roleMas on roleMas.userMaster.userId = mas.userId left join UserRole userRole "
				+ "on userRole.userRoleId =  roleMas.userRole.userRoleId left join UserRoleLabel userRoleLabel "
				+ "on userRoleLabel.userRoleIdFk.userRoleId =  userRole.userRoleId where mas.userId =:userId"
				+ " and roleType.isActive =:isActive  and roleMas.isActive =:isActive and userRole.isActive =:isActive "
				+ "and mas.isActive =:isActive and userRoleLabel.langIdFk.languageCode =:languageCode";
		
		Query query =  em.createQuery(sql, Tuple.class);
		query.setParameter(QueryParameterConstants.USER_ID.getConstants(), userDto.getUserId());
		query.setParameter(QueryParameterConstants.LANGUAGE_CODE.getConstants(), userDto.getLangCode());
		query.setParameter(QueryParameterConstants.IS_ACTIVE.getConstants(), userDto.getIsActive());
		
		List<Tuple> result = query.getResultList();
		
		UserDetailsDto userDetailsDto = null;
		
		for (Tuple tuple : result) {
			if(userDetailsDto!= null) {
				UserRoleDto userRoleDto = getUserRoleDtoObject(tuple);
				if(userRoleDto!= null) {
					if(userDetailsDto.getUserRoleDtos()!= null) {
						userDetailsDto.getUserRoleDtos().add(userRoleDto);
					}else {
						List<UserRoleDto> userRoleDtos = new ArrayList<>();
						userRoleDtos.add(userRoleDto);
					}
				}
			}else {
				userDetailsDto = new UserDetailsDto();
				
				if(tuple.get(0) != null) {
					userDetailsDto.setUserId(Long.parseLong(tuple.get(0)+""));
				}
				
				if(tuple.get(1) != null) {
					userDetailsDto.setRoleTypeId(Integer.parseInt(tuple.get(1)+""));
				}
				UserRoleDto userRoleDto = getUserRoleDtoObject(tuple);
				if(userRoleDto!= null) {
					List<UserRoleDto> userRoleDtos = new ArrayList<>();
					userRoleDtos.add(userRoleDto);
					userDetailsDto.setUserRoleDtos(userRoleDtos);
				}
			}
		}
		
		return userDetailsDto;
	}
	
	private UserRoleDto getUserRoleDtoObject(Tuple tuple) {
		
		if(tuple.get(2)!= null) {
			UserRoleDto userRoleDto = new UserRoleDto();
			userRoleDto.setUserRoleId(Long.parseLong(tuple.get(2)+""));
			
			if(tuple.get(3)!= null) {
				userRoleDto.setRoleDesc(tuple.get(3)+"");
			}
			
			if(tuple.get(4)!= null) {
				userRoleDto.setCreatedByRole(Long.parseLong(tuple.get(4)+""));
			}
			
			return userRoleDto;
		}
		
		return null;
	}
	
}
