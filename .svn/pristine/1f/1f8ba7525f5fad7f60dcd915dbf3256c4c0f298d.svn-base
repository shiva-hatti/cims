/**
 * 
 */
package com.iris.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.iris.caching.ObjectCache;
import com.iris.dto.Option;
import com.iris.dto.Options;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.model.BranchMasterDomestic;
import com.iris.repository.BranchMasterDomesticRepo;
import com.iris.service.impl.BranchMasterDomesticService;
import com.iris.util.Validations;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MethodConstants;

/**
 * @author Siddique H Khan
 *
 * @author psahoo
 */

@RestController
@RequestMapping("/service/branchMaster")
public class BranchMasterDomesticController {

	static final Logger logger = LogManager.getLogger(BranchMasterDomesticController.class);

	@Autowired
	private BranchMasterDomesticService branchMasterDomesticService;

	@Autowired
	private BranchMasterDomesticRepo branchMasterDomesticRepo;

	@GetMapping(value = "/fetchDomesticBranchData/{branchWorkingCode}")
	public ServiceResponse fetchDomesticBranchData(@PathVariable String branchWorkingCode) {

		logger.info("fetch fetchBranchMasterDomestictData method started " + branchWorkingCode);

		ServiceResponse serviceResponse = null;

		if (StringUtils.isBlank(branchWorkingCode)) {

			return serviceResponse;
		}

		List<BranchMasterDomestic> listOfActiveBranchMasterDomestic = null;

		Map<String, Object> columnValueMap = new HashMap<>();
		columnValueMap.put(ColumnConstants.BRANCH_WORKING_CODE.getConstantVal(), branchWorkingCode);

		listOfActiveBranchMasterDomestic = branchMasterDomesticService.getDataByObject(columnValueMap, MethodConstants.GET_DATA_BY_BRANCH_WORKING_CODE.getConstantVal());

		List<String> branchCodeList = listOfActiveBranchMasterDomestic.stream().map(BranchMasterDomestic::getBranchCode).collect(Collectors.toList());
		logger.info("fetch fetchBranchMasterDomestictData list size" + branchCodeList.size());
		serviceResponse = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
		serviceResponse.setResponse(branchCodeList);
		return serviceResponse;

	}

	@GetMapping(value = "/checkActiveBranchCode")
	public ServiceResponse checkActiveBranchCode() {
		logger.info("check checkActiveBranchCode method started");
		Option option = null;
		Options options = new Options();
		List<Option> optionList = new ArrayList<>();
		List<BranchMasterDomestic> listOfBranchMasterDomestic = null;
		listOfBranchMasterDomestic = branchMasterDomesticRepo.getBranchMasterList();
		if (CollectionUtils.isEmpty(listOfBranchMasterDomestic)) {
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
		}
		for (BranchMasterDomestic branchMasterDomestic : listOfBranchMasterDomestic) {
			option = new Option();
			option.setKey(branchMasterDomestic.getBranchCode());
			option.setValue(branchMasterDomestic.getBranch());
			optionList.add(option);
		}
		Collections.sort(optionList, new Comparator<Option>() {
			@Override
			public int compare(Option o1, Option o2) {
				return o1.getValue().compareTo(o2.getValue());
			}
		});
		options.setOptionList(optionList);
		return new ServiceResponseBuilder().setStatus(true).setResponse(new Gson().toJson(options)).build();
	}

	/**
	 * Added By psahoo
	 */
	@GetMapping("/getBranchDomesticDetails/{langCode}/{branchStatus}/{branchData}")
	public ServiceResponse getBranchDomesticDetails(@PathVariable(name = "langCode") String langCode, @PathVariable(name = "branchStatus") String branchStatus, @PathVariable(name = "branchData") String branchData) {
		logger.info("fetch getEntityMasterDetails controller started. Language Code : " + langCode + " Branch Code/Name : " + branchStatus);
		ServiceResponse response = null;
		Option option = null;
		Options options = null;
		List<Option> optionList = null;
		List<BranchMasterDomestic> listOfActiveBranchDomecticData = null;

		try {
			listOfActiveBranchDomecticData = new ArrayList<>();
			optionList = new ArrayList<>();
			options = new Options();

			if (Validations.isEmpty(langCode) || Validations.isEmpty(branchStatus) || Validations.isEmpty(branchData) || branchData.length() < 4) {
				logger.error("Language Code and Branch Code/Name is Empty");
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0889.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0889.toString())).build();
			}

			//			if (branchCode.equals(GeneralConstants.BRANCH_CODE.getConstantVal()) || branchCode.equals(GeneralConstants.BRANCH_NAME.getConstantVal()) || branchCode.equals(GeneralConstants.BRANCH_CODE_BRANCH_NAME.getConstantVal())) {
			//				listOfActiveBranchDomecticData = branchMasterDomesticService.getAllDataForBranchDomestic(BranchMasterDomestic.class, null);
			//			}
			if (branchStatus.equals(GeneralConstants.BRANCH_CODE.getConstantVal()) || branchStatus.equals(GeneralConstants.BRANCH_CODE_BRANCH_NAME.getConstantVal())) {
				listOfActiveBranchDomecticData = branchMasterDomesticRepo.getBranchMasterListByBranchCode(branchData.trim());
			} else if (branchStatus.equals(GeneralConstants.BRANCH_NAME.getConstantVal()) || branchStatus.equals(GeneralConstants.BRANCH_NAME_BRANCH_CODE.getConstantVal())) {
				listOfActiveBranchDomecticData = branchMasterDomesticRepo.getBranchMasterListByBranchName(branchData.trim());
			}

			if (CollectionUtils.isEmpty(listOfActiveBranchDomecticData)) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0660.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0660.toString())).build();
			}

			if (langCode.equals(GeneralConstants.ENG_LANG.getConstantVal())) {
				logger.info("Language is English");
				if (branchStatus.equals(GeneralConstants.BRANCH_CODE.getConstantVal())) {
					for (BranchMasterDomestic branchDomestic : listOfActiveBranchDomecticData) {
						option = new Option();
						option.setKey(branchDomestic.getBranchCode());
						option.setValue(branchDomestic.getBranchCode());
						optionList.add(option);
					}
				} else if (branchStatus.equals(GeneralConstants.BRANCH_NAME.getConstantVal())) {
					for (BranchMasterDomestic branchDomestic : listOfActiveBranchDomecticData) {
						option = new Option();
						option.setKey(branchDomestic.getBranch());
						option.setValue(branchDomestic.getBranch());
						optionList.add(option);
					}
				} else if (branchStatus.equals(GeneralConstants.BRANCH_CODE_BRANCH_NAME.getConstantVal())) {
					for (BranchMasterDomestic branchDomestic : listOfActiveBranchDomecticData) {
						option = new Option();
						option.setKey(branchDomestic.getBranchCode());
						option.setValue(branchDomestic.getBranch());
						optionList.add(option);
					}
				} else if (branchStatus.equals(GeneralConstants.BRANCH_NAME_BRANCH_CODE.getConstantVal())) {
					for (BranchMasterDomestic branchDomestic : listOfActiveBranchDomecticData) {
						option = new Option();
						option.setKey(branchDomestic.getBranch());
						option.setValue(branchDomestic.getBranchCode());
						optionList.add(option);
					}
				}

			} else if (langCode.equals(GeneralConstants.HIN_LANG.getConstantVal())) {
				logger.info("Language is Hindi");
				if (branchStatus.equals(GeneralConstants.BRANCH_CODE.getConstantVal())) {
					for (BranchMasterDomestic branchDomestic : listOfActiveBranchDomecticData) {
						option = new Option();
						option.setKey(branchDomestic.getBranchCode());
						option.setValue(branchDomestic.getBranchCode());
						optionList.add(option);
					}
				} else if (branchStatus.equals(GeneralConstants.BRANCH_NAME.getConstantVal())) {
					for (BranchMasterDomestic branchDomestic : listOfActiveBranchDomecticData) {
						option = new Option();
						option.setKey(branchDomestic.getBranch());
						option.setValue(branchDomestic.getBranch());
						optionList.add(option);
					}
				} else if (branchStatus.equals(GeneralConstants.BRANCH_CODE_BRANCH_NAME.getConstantVal())) {
					for (BranchMasterDomestic branchDomestic : listOfActiveBranchDomecticData) {
						option = new Option();
						option.setKey(branchDomestic.getBranchCode());
						option.setValue(branchDomestic.getBranch());
						optionList.add(option);
					}
				} else if (branchStatus.equals(GeneralConstants.BRANCH_NAME_BRANCH_CODE.getConstantVal())) {
					for (BranchMasterDomestic branchDomestic : listOfActiveBranchDomecticData) {
						option = new Option();
						option.setKey(branchDomestic.getBranch());
						option.setValue(branchDomestic.getBranchCode());
						optionList.add(option);
					}
				}
			}
			options.setOptionList(optionList);
			response = new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
			response.setResponse(options);
			return response;

		} catch (Exception e) {
			logger.error("Exception occoured while featch Entity Details list" + e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0692.toString()).setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0692.toString())).build();
		}

	}
}
