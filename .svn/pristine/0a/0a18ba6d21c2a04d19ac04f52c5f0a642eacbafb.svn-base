package com.iris.sdmx.ebrtorbr.controller;

import java.lang.reflect.Type;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.service.spi.ServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.google.common.reflect.TypeToken;
import com.iris.dto.ServiceResponse;
import com.iris.model.Scheduler;
import com.iris.model.SchedulerLog;
import com.iris.model.WebServiceComponentUrl;
import com.iris.sdmx.ebrtorbr.bean.ElementDataPointBean;
import com.iris.sdmx.ebrtorbr.bean.ReturnDataPointBean;
import com.iris.sdmx.ebrtorbr.entity.SdmxEbrToRbrPreparation;
import com.iris.sdmx.ebrtorbr.repo.SdmxEbrToRbrPreparationRepo;
import com.iris.sdmx.ebrtorbr.service.EbrToRbrPreparationService;
import com.iris.service.GenericService;
import com.iris.util.JsonUtility;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MethodConstants;
import com.iris.webservices.client.CIMSRestWebserviceClient;

@RestController
public class EbrToRbrPreparationController {
	private static final Logger LOGGER = LogManager.getLogger(EbrToRbrPreparationController.class);

	private static final String DD_SLASH_MM_SLASH_YYYY = "dd/MM/yyyy";

	private String jobProcessingId;

	private static final String INSERT_SDMX_RETURN_FILING_ENTRY_SCHEDULER_CODE = "INSERT_SDMX_RETURN_FILING_ENTRY";
	private static final String CHECK_FOR_ANY_SDMX_FILE_RECEIVED = "CHECK_FOR_ANY_SDMX_FILE_RECEIVED";

	@Autowired
	private EbrToRbrPreparationService ebrRbrPreparationService;

	@Autowired
	private GenericService<WebServiceComponentUrl, Long> webServiceComponentService;

	@Autowired
	private SdmxEbrToRbrPreparationRepo sdmxEbrToRbrPreparationRepo;

	//	@Scheduled(cron = "${cron.returnFilingEntryScheduler}")
	@PostMapping(value = "/insertReturnEntityFilingEntry")
	public ServiceResponse insertReturnEntityFilingEntry(@RequestBody String reportingDate) {
		jobProcessingId = UUID.randomUUID().toString();
		LOGGER.info("Scheduler " + INSERT_SDMX_RETURN_FILING_ENTRY_SCHEDULER_CODE + " started with Job processing ID {}", jobProcessingId);
		Long schedulerLogId = null;
		//		Scheduler scheduler = getSchedulerStatus(INSERT_SDMX_RETURN_FILING_ENTRY_SCHEDULER_CODE);
		//
		//		if (scheduler != null) {
		//			if (scheduler.getIsRunning().equals(Boolean.TRUE)) {
		//				LOGGER.error("Error while starting scheduler "+INSERT_SDMX_RETURN_FILING_ENTRY_SCHEDULER_CODE+" -> Reason : Schduler is alrady running ");
		//				return;
		//			}
		//			try {
		//				schedulerLogId = makeSchedulerStartEntry(0L, scheduler.getSchedulerId());
		//				if (StringUtils.isEmpty(schedulerLogId)) {
		//					LOGGER.error("Error while starting scheduler  "+INSERT_SDMX_RETURN_FILING_ENTRY_SCHEDULER_CODE+" -> Reason : Schduler Log ID not received ");
		//					return;
		//				}
		//			} catch (Exception e) {
		//				LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		//				return;
		//			}
		try {
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(DD_SLASH_MM_SLASH_YYYY);
			Date currentDate = simpleDateFormat.parse(reportingDate);

			ebrRbrPreparationService.insertReturnAndEntityWiseFilingEntry(currentDate);
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
			return new ServiceResponse.ServiceResponseBuilder().setStatus(false).build();
		}

		return new ServiceResponse.ServiceResponseBuilder().setStatus(true).build();
		//			makeSchedulerStopEntry(totalInsertedRecord, schedulerLogId, scheduler.getSchedulerId(), INSERT_SDMX_RETURN_FILING_ENTRY_SCHEDULER_CODE);
		//		} else {
		//			LOGGER.error(ErrorConstants.SCHEDULER_INFO_NOT_PRESENT.getConstantVal());
		//		}
	}

	@Scheduled(cron = "${cron.ebrToRbrScheduler}")
	public void watchForAnySDMXFilingReceived() {
		jobProcessingId = UUID.randomUUID().toString();
		LOGGER.info("Scheduler " + CHECK_FOR_ANY_SDMX_FILE_RECEIVED + " started with Job processing ID {}", jobProcessingId);
		Long schedulerLogId = null;
		Scheduler scheduler = getSchedulerStatus(CHECK_FOR_ANY_SDMX_FILE_RECEIVED);

		if (scheduler != null) {
			if (scheduler.getIsRunning().equals(Boolean.TRUE)) {
				LOGGER.error("Error while starting scheduler " + CHECK_FOR_ANY_SDMX_FILE_RECEIVED + " -> Reason : Schduler is alrady running ");
				return;
			}
			try {
				schedulerLogId = makeSchedulerStartEntry(0L, scheduler.getSchedulerId());
				if (StringUtils.isEmpty(schedulerLogId)) {
					LOGGER.error("Error while starting scheduler  " + CHECK_FOR_ANY_SDMX_FILE_RECEIVED + " -> Reason : Schduler Log ID not received ");
					return;
				}
			} catch (Exception e) {
				LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
				return;
			}
			int totalProcessedRecord = 0;
			Long totalRecordCount = 0L;

			try {
				List<SdmxEbrToRbrPreparation> ebrToRbrPreparation = sdmxEbrToRbrPreparationRepo.getNotCompletedEBRFiling();

				if (!CollectionUtils.isEmpty(ebrToRbrPreparation)) {
					totalRecordCount = Long.parseLong(ebrToRbrPreparation.size() + "");
				}

				for (SdmxEbrToRbrPreparation sdmxEbrToRbrPreparation : ebrToRbrPreparation) {
					try {
						ebrRbrPreparationService.watchForAnySDMXFilingReceived(sdmxEbrToRbrPreparation);
						totalProcessedRecord++;
					} catch (Exception e) {
						LOGGER.error("Exception ", e);
					}
				}
			} catch (Exception e) {
				LOGGER.error("Exception ", e);
			}

			makeSchedulerStopEntry(totalRecordCount, totalProcessedRecord, schedulerLogId, scheduler.getSchedulerId(), CHECK_FOR_ANY_SDMX_FILE_RECEIVED);
		} else {
			LOGGER.error(ErrorConstants.SCHEDULER_INFO_NOT_PRESENT.getConstantVal());
		}
	}

	@GetMapping(value = "/getMandateDataPointToBeReceived/{ebrToRbrPreparationId}")
	public ServiceResponse getMandateDataPointToBeReceived(@PathVariable("ebrToRbrPreparationId") Long ebrToRbrPraparationId) {

		SdmxEbrToRbrPreparation ebrToRbrPreparation = sdmxEbrToRbrPreparationRepo.getOne(ebrToRbrPraparationId);

		ReturnDataPointBean mandateDataPointToBeReceived = null;
		if (ebrToRbrPreparation.getMandateDatapointExpectedJson() != null) {
			mandateDataPointToBeReceived = JsonUtility.getGsonObject().fromJson(ebrToRbrPreparation.getMandateDatapointExpectedJson(), ReturnDataPointBean.class);
		}

		ReturnDataPointBean mandateDataPointhasBeenReceived = null;
		if (ebrToRbrPreparation.getMandateDatapointReceivedJson() != null) {
			mandateDataPointhasBeenReceived = JsonUtility.getGsonObject().fromJson(ebrToRbrPreparation.getMandateDatapointReceivedJson(), ReturnDataPointBean.class);
		}

		boolean isMatchFound;

		Map<String, Set<String>> dataPointsWhichAreNotReceived = new HashMap<>();

		if (mandateDataPointToBeReceived != null && mandateDataPointhasBeenReceived != null) {

			for (ElementDataPointBean elementDataPointBean : mandateDataPointToBeReceived.getDataPointList()) {
				isMatchFound = false;
				for (ElementDataPointBean elementDataPointWhichReceived : mandateDataPointhasBeenReceived.getDataPointList()) {
					if (elementDataPointBean.getDsdCode().equalsIgnoreCase(elementDataPointWhichReceived.getDsdCode())) {
						isMatchFound = true;
						Set<String> missingDataPointList = elementDataPointBean.getDataPoints().stream().filter(i -> !elementDataPointWhichReceived.getDataPoints().contains(i)).collect(Collectors.toSet());

						if (!CollectionUtils.isEmpty(missingDataPointList)) {
							dataPointsWhichAreNotReceived.put(elementDataPointBean.getDsdCode(), missingDataPointList);
						}
						break;
					}
				}
				if (!isMatchFound) {
					dataPointsWhichAreNotReceived.put(elementDataPointBean.getDsdCode(), elementDataPointBean.getDataPoints());
				}
			}
		}

		return new ServiceResponse.ServiceResponseBuilder().setResponse(dataPointsWhichAreNotReceived).build();
	}

	private Long makeSchedulerStartEntry(Long totalRecordCount, Long schedulerId) {
		try {
			SchedulerLog schedulerLog = new SchedulerLog();
			schedulerLog.setTakedRecordsCount(totalRecordCount);
			Scheduler scheduler = new Scheduler();
			scheduler.setSchedulerId(schedulerId);
			scheduler.setIsRunning(true);
			schedulerLog.setSchedulerIdFk(scheduler);
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(GeneralConstants.ADD_UPDATE_SCHEDULER_LOG.getConstantVal(), CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);

			Map<String, String> headerMap = new HashMap<>();
			headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);

			String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, schedulerLog, null, headerMap);

			Type listToken = new TypeToken<ServiceResponse>() {
			}.getType();
			ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, listToken);
			Long schedulerLogId = null;

			if (!serviceResponse.isStatus()) {
				LOGGER.error("False status received from API with status message " + serviceResponse.getStatusCode());
				return null;
			} else {
				listToken = new TypeToken<SchedulerLog>() {
				}.getType();
				SchedulerLog schedulerLog1 = JsonUtility.getGsonObject().fromJson(serviceResponse.getResponse() + "", listToken);
				schedulerLogId = schedulerLog1.getId();
			}
			return schedulerLogId;
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return null;
	}

	private void makeSchedulerStopEntry(Long totalRecordCount, int successfullyProcessedRecord, Long schedulerLogId, Long schedulerId, String insertSdmxReturnFilingEntrySchedulerCode) {
		try {
			if (schedulerLogId != null) {
				SchedulerLog schedulerLog = new SchedulerLog();
				schedulerLog.setTakedRecordsCount(totalRecordCount);
				schedulerLog.setSuccessfullyProcessedCount(Long.valueOf(successfullyProcessedRecord));
				schedulerLog.setId(schedulerLogId);
				Scheduler scheduler = new Scheduler();
				scheduler.setSchedulerId(schedulerId);
				scheduler.setIsRunning(false);
				schedulerLog.setSchedulerIdFk(scheduler);
				CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

				WebServiceComponentUrl componentUrl = getWebServiceComponentURL(GeneralConstants.ADD_UPDATE_SCHEDULER_LOG.getConstantVal(), CIMSRestWebserviceClient.HTTP_METHOD_TYPE_POST);

				Map<String, String> headerMap = new HashMap<>();
				headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);

				String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, schedulerLog, null, headerMap);

				ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, ServiceResponse.class);

				if (!serviceResponse.isStatus()) {
					LOGGER.info("Error while stopping scheduler " + insertSdmxReturnFilingEntrySchedulerCode + "-> Reason : Schduler is alrady stopped ");
				} else {
					LOGGER.info("Scheduler " + insertSdmxReturnFilingEntrySchedulerCode + " stopped successfully ");
				}
			} else {
				LOGGER.error("" + insertSdmxReturnFilingEntrySchedulerCode + " :---- Scheduler Log Id not found");
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
	}

	private Scheduler getSchedulerStatus(String schedulerCode) {
		try {
			CIMSRestWebserviceClient restServiceClient = new CIMSRestWebserviceClient();

			Map<String, String> headerMap = new HashMap<>();
			headerMap.put(GeneralConstants.JOB_PROCESSING_ID.getConstantVal(), jobProcessingId);
			headerMap.put(GeneralConstants.SCHEDULER_CODE.getConstantVal(), schedulerCode);

			WebServiceComponentUrl componentUrl = getWebServiceComponentURL(GeneralConstants.GET_ACTIVE_SCHEDULER_STATUS_BY_CODE.getConstantVal(), CIMSRestWebserviceClient.HTTP_METHOD_TYPE_GET);
			String responsestring = restServiceClient.callRestWebServiceWithMultipleHeader(componentUrl, null, null, headerMap);

			Type listToken = new TypeToken<ServiceResponse>() {
			}.getType();
			ServiceResponse serviceResponse = JsonUtility.getGsonObject().fromJson(responsestring, listToken);

			if (!serviceResponse.isStatus()) {
				LOGGER.error("False status received from API with status message " + serviceResponse.getStatusCode());
				return null;
			} else {
				if (serviceResponse.getResponse() != null) {
					listToken = new TypeToken<Scheduler>() {
					}.getType();
					return JsonUtility.getGsonObject().fromJson(serviceResponse.getResponse() + "", listToken);
				} else {
					LOGGER.error("response object not present in the response string, response received from API : {}" + responsestring);
				}
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return null;
	}

	private WebServiceComponentUrl getWebServiceComponentURL(String componentName, String methodType) {
		Map<String, List<String>> valueMap = new HashMap<>();

		List<String> valueList = new ArrayList<>();
		valueList.add(componentName);
		valueMap.put(ColumnConstants.COMPONENTTYPE.getConstantVal(), valueList);

		valueList = new ArrayList<>();
		valueList.add(methodType);
		valueMap.put(ColumnConstants.METHODTYPE.getConstantVal(), valueList);

		WebServiceComponentUrl componentUrl = null;
		try {
			componentUrl = webServiceComponentService.getDataByColumnValue(valueMap, MethodConstants.GET_ACTIVE_DATA_BY_COMPONENTTYPE_METHODTYPE.getConstantVal()).get(0);
		} catch (ServiceException e) {
			LOGGER.error(ErrorConstants.DEFAULT_ERROR.getConstantVal(), e);
		}
		return componentUrl;
	}
	//	public static void main(String[] args) throws ParseException {
	//		String currentDate = "04-04-2021";
	//		String filingWindowStartDate = "01-04-2021";
	//		String filingWindowEndDate = "03-04-2021";
	//		
	//		System.out.println(DateManip.getDayDiff(currentDate, filingWindowStartDate, DateConstants.DD_MM_YYYY.getDateConstants()));
	//		System.out.println(DateManip.getDayDiff(currentDate, filingWindowEndDate, DateConstants.DD_MM_YYYY.getDateConstants()));
	//
	//		
	//	}

}
