/**
 * 
 */
package com.iris.sdmx.exceltohtml.controller;

import java.util.List;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.exception.ApplicationException;
import com.iris.sdmx.exceltohtml.bean.ReturnFormulaBean;
import com.iris.sdmx.exceltohtml.service.SdmxReturnModelInfoService;
import com.iris.sdmx.exceltohtml.validator.SdmxReturnModelInfoValidator;
import com.iris.sdmx.util.SDMXConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;

/**
 * @author apagaria
 *
 */
@RestController
@RequestMapping("/service/sdmx/returnModelInfo")
public class SdmxReturnModelInfoController {

	private static final Logger LOGGER = LogManager.getLogger(SdmxReturnModelInfoController.class);

	@Autowired
	private SdmxReturnModelInfoValidator sdmxReturnModelInfoValidator;

	@Autowired
	private SdmxReturnModelInfoService sdmxReturnModelInfoService;

	/**
	 * @param jobProcessId
	 * @param userId
	 * @param dmModelCode
	 * @return
	 */
	@GetMapping("/user/{userId}/fetchMapCellRef/returnTemplate/{returnTemplateIdFk}/returnPreview/{returnPreviewId}")
	public ServiceResponse fetchMapCellRefByReturnTemplateId(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("returnTemplateIdFk") Long returnTemplateIdFk,
			@PathVariable("returnPreviewId") Long returnPreviewId) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {
			sdmxReturnModelInfoValidator.fetchMapCellRefByReturnTemplateId(userId, jobProcessId, returnTemplateIdFk);
			List<Integer> mappedCellRefList = sdmxReturnModelInfoService
					.fetchMapCellRefByReturnTemplateId(returnTemplateIdFk, returnPreviewId);
			serviceResponseBuilder.setStatusCode(SDMXConstants.SUCCESS_CODE);
			serviceResponseBuilder.setStatusMessage(SDMXConstants.SUCCESS_MESSAGE);
			if (!CollectionUtils.isEmpty(mappedCellRefList)) {
				serviceResponseBuilder.setResponse(mappedCellRefList);
			}
		} catch (ApplicationException applicationException) {
			serviceResponseBuilder.setStatus(false);
			serviceResponseBuilder.setStatusCode(applicationException.getErrorCode());
			serviceResponseBuilder.setStatusMessage(applicationException.getErrorMsg());
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

	/**
	 * @param jobProcessId
	 * @param userId
	 * @return
	 */
	@GetMapping("/user/{userId}/fetchFormulaBuilder/returnPreview/{returnPreviewId}")
	public ServiceResponse fetchFormulaBuilder(@RequestHeader("JobProcessingId") String jobProcessId,
			@PathVariable("userId") Long userId, @PathVariable("returnPreviewId") Long returnPreviewId) {
		LOGGER.info("START - Fetch Return Preview request received with Job Processing ID : " + jobProcessId);
		ServiceResponse serviceResponse = null;
		ServiceResponseBuilder serviceResponseBuilder = new ServiceResponseBuilder();
		serviceResponseBuilder.setStatus(true);
		try {

			List<ReturnFormulaBean> formulaBuilderJsonList = sdmxReturnModelInfoService
					.fetchFormulaBuilderJson(returnPreviewId);
			serviceResponseBuilder.setResponse(formulaBuilderJsonList);

		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Job Processing ID : " + jobProcessId, e);
			serviceResponseBuilder = new ServiceResponseBuilder().setStatus(false)
					.setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString()));
		}
		serviceResponse = serviceResponseBuilder.build();
		LOGGER.info("End - Fetch Return Preview request completed with Job Processing ID : " + jobProcessId);
		return serviceResponse;
	}

}
