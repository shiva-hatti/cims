package com.iris.controller;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.dto.ReturnEntityMapDto;
import com.iris.dto.ReturnEntityOutputDto;
import com.iris.dto.ReturnGroupMappingDto;
import com.iris.dto.ServiceResponse;
import com.iris.exception.ApplicationException;
import com.iris.service.impl.ReturnGroupServiceV2;
import com.iris.validator.ReturnGroupValidatorV2;

/**
 * @author sajadhav
 *
 */
@RestController
@RequestMapping("/service/returnGroupController/V2")
public class ReturnGroupControllerV2 {

	private static final Logger LOGGER = LogManager.getLogger(ReturnGroupControllerV2.class);

	@Autowired
	private EntityMasterControllerV2 entityMasterControllerV2;

	@Autowired
	private ReturnGroupServiceV2 returnGroupServiceV2;

	@Autowired
	private ReturnGroupValidatorV2 returnGroupValidatorV2;

	/**
	 * Gets the ReturnGroup. This method is to get all ReturnGroups .
	 *
	 * @param jobProcessId
	 * @param returnGroupMappingRequest
	 * @return
	 */
	@PostMapping(value = "/getReturnGroups")
	public ServiceResponse getReturnGroups(@RequestHeader(name = "JobProcessingId") String jobProcessId, @RequestBody ReturnEntityMapDto returnEntityMapDto) {
		try {
			returnGroupValidatorV2.validateReturnGroupMappingRequest(returnEntityMapDto);
			ServiceResponse serviceResponse = entityMasterControllerV2.getEntityReturnChannelMapp(jobProcessId, returnEntityMapDto);

			if (serviceResponse != null && serviceResponse.getResponse() != null) {
				List<ReturnEntityOutputDto> returnEntityOutputDtoList = (List<ReturnEntityOutputDto>) serviceResponse.getResponse();

				List<ReturnGroupMappingDto> returnGroupMappingDtoList = returnGroupServiceV2.transposeObject(returnEntityOutputDtoList);

				return new ServiceResponse.ServiceResponseBuilder().setResponse(returnGroupMappingDtoList).setStatus(true).build();
			}
		} catch (ApplicationException ae) {
			LOGGER.error("Exception : ", ae);
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		return new ServiceResponse.ServiceResponseBuilder().setStatus(false).build();
	}

	/**
	 * Gets the ReturnGroup. This method is to get all ReturnGroups .
	 *
	 * @param jobProcessId
	 * @param returnGroupMappingRequest
	 * @return
	 */
	@PostMapping(value = "/getUserReturnListAssignedToEntity")
	public ServiceResponse getUserReturnListAssignedToEntity(@RequestHeader(name = "JobProcessingId") String jobProcessId, @RequestBody ReturnEntityMapDto returnEntityMapDto) {
		try {
			returnGroupValidatorV2.validateReturnGroupMappingRequest(returnEntityMapDto);
			List<String> entCodeList = returnEntityMapDto.getEntCodeList();
			returnEntityMapDto.setEntCodeList(null);

			ServiceResponse serviceResponse = entityMasterControllerV2.getEntityReturnChannelMapp(jobProcessId, returnEntityMapDto);

			if (serviceResponse != null && serviceResponse.getResponse() != null) {
				List<ReturnEntityOutputDto> returnEntityOutputDtoList = (List<ReturnEntityOutputDto>) serviceResponse.getResponse();

				List<ReturnGroupMappingDto> returnGroupMappingDtoList = returnGroupServiceV2.transposeObject(returnEntityOutputDtoList);

				returnEntityMapDto.setEntCodeList(entCodeList);

				ServiceResponse entityReturnServiceResponse = entityMasterControllerV2.getEntityReturnChannelMapp(jobProcessId, returnEntityMapDto);

				if (entityReturnServiceResponse != null && entityReturnServiceResponse.isStatus()) {
					List<ReturnEntityOutputDto> entityOutputDtoList = (List<ReturnEntityOutputDto>) entityReturnServiceResponse.getResponse();
					returnGroupMappingDtoList.forEach(f -> {
						f.getReturnList().forEach(k -> {
							ReturnEntityOutputDto re = entityOutputDtoList.stream().filter(l -> l.getReturnId().equals(k.getReturnId())).findAny().orElse(null);
							if (re != null) {
								k.setAssignedToEntity(true);
							}
						});
					});
				}

				return new ServiceResponse.ServiceResponseBuilder().setResponse(returnGroupMappingDtoList).setStatus(true).build();
			}
		} catch (ApplicationException ae) {
			LOGGER.error("Exception : ", ae);
		} catch (Exception e) {
			LOGGER.error("Exception : ", e);
		}
		return new ServiceResponse.ServiceResponseBuilder().setStatus(false).build();
	}
}
