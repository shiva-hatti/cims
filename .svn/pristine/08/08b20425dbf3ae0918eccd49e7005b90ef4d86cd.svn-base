package com.iris.controller;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.service.spi.ServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.iris.caching.ObjectCache;
import com.iris.dateutility.enums.DateConstants;
import com.iris.dateutility.util.DateManip;
import com.iris.dto.RetUploadDetBean;
import com.iris.dto.ServiceResponse;
import com.iris.dto.ServiceResponse.ServiceResponseBuilder;
import com.iris.exception.ApplicationException;
import com.iris.model.Category;
import com.iris.model.CategoryLabel;
import com.iris.model.EntityBean;
import com.iris.model.EntityLabelBean;
import com.iris.model.Frequency;
import com.iris.model.Return;
import com.iris.model.ReturnEntityMappingNew;
import com.iris.model.ReturnFileFormatMap;
import com.iris.model.ReturnLabel;
import com.iris.model.ReturnPropertyValue;
import com.iris.model.ReturnTemplate;
import com.iris.model.ReturnsUploadDetails;
import com.iris.model.RevisionRequest;
import com.iris.model.SubCategory;
import com.iris.model.SubCategoryLabel;
import com.iris.model.UnlockingRequest;
import com.iris.model.UploadChannel;
import com.iris.model.UserMaster;
import com.iris.model.UserRole;
import com.iris.model.WorkFlowMasterBean;
import com.iris.service.GenericService;
import com.iris.service.impl.ReturnEntityMapServiceNew;
import com.iris.util.UtilMaster;
import com.iris.util.Validations;
import com.iris.util.constant.ColumnConstants;
import com.iris.util.constant.ErrorCode;
import com.iris.util.constant.ErrorConstants;
import com.iris.util.constant.GeneralConstants;
import com.iris.util.constant.MethodConstants;

/**
 * @author Sajadhav
 */
@RestController
@RequestMapping("/service/returnsUploadDetailsController")
public class ReturnsUploadDetailsController {

	@Autowired
	private GenericService<ReturnsUploadDetails, Long> returnUploadDetailsService;
	@Autowired
	private ReturnEntityMapServiceNew returnEntityMapService;
	
	static final Logger LOGGER = LogManager.getLogger(ReturnsUploadDetailsController.class);

	@PostMapping(value = "/getFillingRecordsByStatus")
	public ServiceResponse getFillingRecordsByStatus(@RequestHeader("JobProcessingId") String jobProcessId,
			@RequestBody RetUploadDetBean retUploadDetBean) {
		try {
			LOGGER.info("Request received for Request trans Id " + jobProcessId);

			validateReturnsUploadDetailsObj(jobProcessId, retUploadDetBean);

			Map<String, Object> columnValueMap = new HashMap<>();
			columnValueMap.put(ColumnConstants.FILLING_STATUS_ID.getConstantVal(),
					Arrays.asList(retUploadDetBean.getFillingStatus()));
			columnValueMap.put(ColumnConstants.TOTAL_RECORD_COUNT.getConstantVal(),
					retUploadDetBean.getRecordCountToBeFetched());
			columnValueMap.put(ColumnConstants.FILE_TYPE.getConstantVal(),
					retUploadDetBean.getFileTypeList().stream().map(String::toUpperCase).collect(Collectors.toList()));
			if (CollectionUtils.isEmpty(retUploadDetBean.getSkipReturnCodeList())) {
				columnValueMap.put(ColumnConstants.RETURN_CODE.getConstantVal(), Arrays.asList("NOT_USED"));
			} else {
				columnValueMap.put(ColumnConstants.RETURN_CODE.getConstantVal(),
						retUploadDetBean.getSkipReturnCodeList());
			}

			List<ReturnsUploadDetails> returnUploadDetailsList = null;
			if (retUploadDetBean.getFillingStatusToBeChanged() != null) {
				columnValueMap.put(ColumnConstants.CHANGED_FILLING_STATUS_ID.getConstantVal(),
						retUploadDetBean.getFillingStatusToBeChanged());
				returnUploadDetailsList = returnUploadDetailsService.getDataByObject(columnValueMap,
						MethodConstants.GET_RETURNS_UPLOAD_DETALS_RECORD_BY_STATUS_AND_UPDATE_NEW_STATUS
								.getConstantVal());
			} else {
				returnUploadDetailsList = returnUploadDetailsService.getDataByObject(columnValueMap,
						MethodConstants.GET_RETURNS_UPLOAD_DETALS_RECORD_BY_STATUS_AND_TYPE.getConstantVal());
			}
			if (!CollectionUtils.isEmpty(returnUploadDetailsList)) {
				List<ReturnsUploadDetails> responseReturnUploadDetailList = prepareRetUploadDetBeanListResponse(
						returnUploadDetailsList, retUploadDetBean.getLangCode());
				LOGGER.info("Request successfully processed for Request trans Id " + jobProcessId);
				return new ServiceResponseBuilder().setStatus(true)
						.setStatusCode(GeneralConstants.RECORD_FETCHED_SUCCESSFULLY.getConstantVal())
						.setResponse(responseReturnUploadDetailList).build();
			} else {
				LOGGER.info("Empty record found for Request trans Id " + jobProcessId);
				return new ServiceResponseBuilder().setStatus(true)
						.setStatusCode(ErrorConstants.EMPTY_RECORD.getConstantVal())
						.setResponse(new ArrayList<ReturnsUploadDetails>()).build();
			}
		} catch (ApplicationException applicationException) {
			LOGGER.error(applicationException.getErrorMsg() + " for Transaction ID : " + jobProcessId);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(applicationException.getErrorCode())
					.setStatusMessage(applicationException.getErrorMsg()).build();
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Transaction ID : " + jobProcessId, e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.EC0013.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.EC0013.toString())).build();
		}
	}

	@PostMapping(value = "/getMisSubmitFilingEntityWise")
	public ServiceResponse getMisSubmitFilingEntityWise(@RequestHeader("JobProcessingId") String jobProcessId,
			@RequestBody RetUploadDetBean retUploadDetBean) {
		try {
			List<ReturnsUploadDetails> responseReturnUploadDetailList = new ArrayList<>();
			if (UtilMaster.isEmpty(retUploadDetBean.getReturnIdList()) || retUploadDetBean.getEntityId() == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0757.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0757.toString())).build();
			}

			responseReturnUploadDetailList = uploadDetailsEntityWise(retUploadDetBean);
			if (CollectionUtils.isEmpty(responseReturnUploadDetailList)) {
				// return new
				// ServiceResponseBuilder().setStatus(true).setStatusCode(ErrorConstants.EMPTY_RECORD.getConstantVal()).setResponse(new
				// ArrayList<ReturnsUploadDetails>()).build();
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0757.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0757.toString())).build();
			} else {
				List<ReturnsUploadDetails> responseReturnUploadDetailList1 = prepareRetSubmittedResponse(
						responseReturnUploadDetailList, retUploadDetBean.getLangCode());
				return new ServiceResponseBuilder().setStatus(true)
						.setStatusCode(GeneralConstants.RECORD_FETCHED_SUCCESSFULLY.getConstantVal())
						.setResponse(responseReturnUploadDetailList1).build();

			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Transaction ID : " + jobProcessId, e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0804.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0804.toString())).build();
			// return new
			// ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorConstants.DEFAULT_ERROR.getConstantVal()).build();
		}
	}

	@PostMapping(value = "/getMisSubmitFilingReturnWise")
	public ServiceResponse getMisSubmitFilingReturnWise(@RequestHeader("JobProcessingId") String jobProcessId,
			@RequestBody RetUploadDetBean retUploadDetBean) {
		try {
			List<ReturnsUploadDetails> responseReturnUploadDetailList = new ArrayList<>();
			if (UtilMaster.isEmpty(retUploadDetBean.getReturnIdList())
					|| UtilMaster.isEmpty(retUploadDetBean.getEntityIdList())) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0757.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0757.toString())).build();
			}

			responseReturnUploadDetailList = uploadDetailsReturnWise(retUploadDetBean);
			if (CollectionUtils.isEmpty(responseReturnUploadDetailList)) {
				// return new
				// ServiceResponseBuilder().setStatus(true).setStatusCode(ErrorConstants.EMPTY_RECORD.getConstantVal()).setResponse(new
				// ArrayList<ReturnsUploadDetails>()).build();
				return new ServiceResponseBuilder().setStatus(true).setStatusCode(ErrorCode.E0757.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0757.toString())).build();
			} else {
				List<ReturnsUploadDetails> responseReturnUploadDetailList1 = prepareRetSubmittedResponse(
						responseReturnUploadDetailList, retUploadDetBean.getLangCode());
				return new ServiceResponseBuilder().setStatus(true)
						.setStatusCode(GeneralConstants.RECORD_FETCHED_SUCCESSFULLY.getConstantVal())
						.setResponse(responseReturnUploadDetailList1).build();
			}
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Transaction ID : " + jobProcessId, e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0804.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0804.toString())).build();
			// return new
			// ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorConstants.DEFAULT_ERROR.getConstantVal()).build();
		}
	}

	@PostMapping(value = "/getMisPendingFilingReturnWise")
	public ServiceResponse getMisPendingFilingReturnWise(@RequestHeader("JobProcessingId") String jobProcessId,
			@RequestBody RetUploadDetBean retUploadDetBean) {
		try {
			List<ReturnsUploadDetails> responseReturnUploadDetailList = new ArrayList<>();
			if (UtilMaster.isEmpty(retUploadDetBean.getReturnIdList())
					|| UtilMaster.isEmpty(retUploadDetBean.getEntityIdList())) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0757.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0757.toString())).build();
			}

			responseReturnUploadDetailList = uploadDetailsReturnWise(retUploadDetBean);
			Map<Long, List<Long>> returnEntMap = new HashMap<>();

			List<Long> retList = new ArrayList<>();
			for (String str : retUploadDetBean.getReturnIdList()) {
				retList.add(Long.valueOf(str));
			}
			List<Long> entList = new ArrayList<>();
			for (String str : retUploadDetBean.getEntityIdList()) {
				entList.add(Long.valueOf(str));
			}

			Map<String, Object> valueMap = new HashMap<>();
			valueMap.put(ColumnConstants.ENTITY_ID_LIST.getConstantVal(), entList);
			valueMap.put(ColumnConstants.RETURN_ID_LIST.getConstantVal(), retList);
			valueMap.put(ColumnConstants.FREQUENCY_ID.getConstantVal(), retUploadDetBean.getFinYearFreqDescId());
			List<ReturnEntityMappingNew> returnChannelMappingNewList = returnEntityMapService.getDataByObject(valueMap,
					MethodConstants.GET_RET_ENT_MAP_BY_ENT_RET_FREQ.getConstantVal());
			if (CollectionUtils.isEmpty(returnChannelMappingNewList)) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0549.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0549.toString())).build();
			}
			for (ReturnEntityMappingNew returnEntityMappingNew : returnChannelMappingNewList) {
				List<Long> ent1List = returnEntMap.get(returnEntityMappingNew.getReturnObj().getReturnId());
				if (ent1List == null) {
					ent1List = new ArrayList<>();
					ent1List.add(returnEntityMappingNew.getEntity().getEntityId());
					returnEntMap.put(returnEntityMappingNew.getReturnObj().getReturnId(), ent1List);
				} else {
					ent1List.add(returnEntityMappingNew.getEntity().getEntityId());
					returnEntMap.put(returnEntityMappingNew.getReturnObj().getReturnId(), ent1List);
				}
			}

			for (Long retId : returnEntMap.keySet()) {
				for (ReturnsUploadDetails returnUpDetails : responseReturnUploadDetailList) {
					if (returnUpDetails.getReturnObj().getReturnId().equals(retId)) {
						List<Long> entIdList = returnEntMap.get(retId);
						List<Long> newEntIdList = new ArrayList<>();
						for (Long entid : entIdList) {
							if (!returnUpDetails.getEntity().getEntityId().equals(entid)) {
								newEntIdList.add(entid);
							}
						}
						if (CollectionUtils.isEmpty(newEntIdList)) {
							newEntIdList = new ArrayList<>();
							returnEntMap.put(retId, newEntIdList);
						} else {
							returnEntMap.put(retId, newEntIdList);
						}
					}
				}
			}

			ReturnsUploadDetails returnUpload = null;
			List<ReturnsUploadDetails> responseReturnUploadDetailListPending = new ArrayList<>();
			for (ReturnEntityMappingNew returnEntMapping : returnChannelMappingNewList) {
				Set<Long> retIds = returnEntMap.keySet();
				for (Long pendingRetId : retIds) {
					if (pendingRetId.equals(returnEntMapping.getReturnObj().getReturnId())) {
						List<Long> pendingEntityIdList = returnEntMap.get(pendingRetId);
						if (!CollectionUtils.isEmpty(pendingEntityIdList)) {
							for (Long pendingEntId : pendingEntityIdList) {
								if (pendingEntId.equals(returnEntMapping.getEntity().getEntityId())) {
									returnUpload = new ReturnsUploadDetails();
									returnUpload.setReturnObj(returnEntMapping.getReturnObj());
									returnUpload.setEntity(returnEntMapping.getEntity());
									returnUpload.setFrequency(returnEntMapping.getReturnObj().getFrequency());
									returnUpload.setStartDate(new Date(retUploadDetBean.getStartDateInLong()));
									returnUpload.setEndDate(new Date(retUploadDetBean.getEndDateInLong()));
									responseReturnUploadDetailListPending.add(returnUpload);
								}
							}
						}
					}
				}
			}
			List<ReturnsUploadDetails> responseReturnUploadDetailList1 = prepareRetPenDetBeanListResponse(
					responseReturnUploadDetailListPending, retUploadDetBean.getLangCode());
			return new ServiceResponseBuilder().setStatus(true)
					.setStatusCode(GeneralConstants.RECORD_FETCHED_SUCCESSFULLY.getConstantVal())
					.setResponse(responseReturnUploadDetailList1).build();
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Transaction ID : " + jobProcessId, e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0804.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0804.toString())).build();
		}
	}

	@PostMapping(value = "/getMisPendingFilingEntityWise")
	public ServiceResponse getMisPendingFilingEntityWise(@RequestHeader("JobProcessingId") String jobProcessId,
			@RequestBody RetUploadDetBean retUploadDetBean) {
		try {
			List<ReturnsUploadDetails> responseReturnUploadDetailList = new ArrayList<>();
			if (UtilMaster.isEmpty(retUploadDetBean.getReturnIdList()) || retUploadDetBean.getEntityId() == null) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0757.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0757.toString())).build();
			}

			responseReturnUploadDetailList = uploadDetailsEntityWise(retUploadDetBean);
			List<Long> submittedRetrunIdList = new ArrayList<>();
			if (!CollectionUtils.isEmpty(responseReturnUploadDetailList)) {
				for (ReturnsUploadDetails returnUpDetails : responseReturnUploadDetailList) {
					if (!submittedRetrunIdList.contains(returnUpDetails.getReturnObj().getReturnId())) {
						submittedRetrunIdList.add(returnUpDetails.getReturnObj().getReturnId());
					}
				}
			}

			List<Long> retList = new ArrayList<>();
			for (String str : retUploadDetBean.getReturnIdList()) {
				retList.add(Long.valueOf(str));
			}

			Map<String, Object> valueMap = new HashMap<>();
			List<Long> entIdList = new ArrayList<>();
			entIdList.add(retUploadDetBean.getEntityId());
			valueMap.put(ColumnConstants.ENTITY_ID_LIST.getConstantVal(), entIdList);
			valueMap.put(ColumnConstants.RETURN_ID_LIST.getConstantVal(), retList);
			valueMap.put(ColumnConstants.FREQUENCY_ID.getConstantVal(), retUploadDetBean.getFinYearFreqDescId());
			List<ReturnEntityMappingNew> returnChannelMappingNewList = new ArrayList<>();
			if (!CollectionUtils.isEmpty(submittedRetrunIdList)) {
				valueMap.put(ColumnConstants.SUB_RET_ID_LIST.getConstantVal(), submittedRetrunIdList);
				returnChannelMappingNewList = returnEntityMapService.getDataByObject(valueMap,
						MethodConstants.GET_RET_ENT_MAP_BY_ENT_RET_FREQ_WITH_SUBRET.getConstantVal());
			} else {
				returnChannelMappingNewList = returnEntityMapService.getDataByObject(valueMap,
						MethodConstants.GET_RET_ENT_MAP_BY_ENT_RET_FREQ.getConstantVal());
			}

			if (CollectionUtils.isEmpty(returnChannelMappingNewList)) {
				return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0825.toString())
						.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0825.toString())).build();
			}

			ReturnsUploadDetails returnUpload = new ReturnsUploadDetails();
			List<ReturnsUploadDetails> responseReturnUploadDetailListPending = new ArrayList<>();
			for (ReturnEntityMappingNew returnEntMapping : returnChannelMappingNewList) {
				returnUpload = new ReturnsUploadDetails();
				returnUpload.setReturnObj(returnEntMapping.getReturnObj());
				returnUpload.setEntity(returnEntMapping.getEntity());
				returnUpload.setFrequency(returnEntMapping.getReturnObj().getFrequency());
				returnUpload.setStartDate(new Date(retUploadDetBean.getStartDateInLong()));
				returnUpload.setEndDate(new Date(retUploadDetBean.getEndDateInLong()));
				responseReturnUploadDetailListPending.add(returnUpload);
			}

			List<ReturnsUploadDetails> responseReturnUploadDetailList1 = prepareRetPenDetBeanListResponse(
					responseReturnUploadDetailListPending, retUploadDetBean.getLangCode());
			return new ServiceResponseBuilder().setStatus(true)
					.setStatusCode(GeneralConstants.RECORD_FETCHED_SUCCESSFULLY.getConstantVal())
					.setResponse(responseReturnUploadDetailList1).build();
			// }
		} catch (Exception e) {
			LOGGER.error(ErrorConstants.ERROR_MSG_SERVICE.getConstantVal() + "Transaction ID : " + jobProcessId, e);
			return new ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorCode.E0804.toString())
					.setStatusMessage(ObjectCache.getErrorCodeKey(ErrorCode.E0804.toString())).build();
			// return new
			// ServiceResponseBuilder().setStatus(false).setStatusCode(ErrorConstants.DEFAULT_ERROR.getConstantVal()).build();
		}
	}

	private List<ReturnsUploadDetails> uploadDetailsEntityWise(RetUploadDetBean returnsUploadDetailsObj)
			throws ServiceException, ParseException, ServiceException {
		try {

			Map<String, List<String>> valueMap = new HashMap<>();
			List<String> valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getEntityId() + "");
			valueMap.put(ColumnConstants.ENTITYID.getConstantVal(), valueList);
			Date startDate = DateManip.convertStringToDate(returnsUploadDetailsObj.getStartDate(),
					returnsUploadDetailsObj.getSessionDateFormat());
			String inputDatStr = DateManip.convertDateToString(startDate, DateConstants.DD_MM_YYYY.getDateConstants());
			returnsUploadDetailsObj.setStartDate(inputDatStr);
			Date endDate = DateManip.convertStringToDate(returnsUploadDetailsObj.getEndDate(),
					returnsUploadDetailsObj.getSessionDateFormat());
			String inputEnDatStr = DateManip.convertDateToString(endDate, DateConstants.DD_MM_YYYY.getDateConstants());
			returnsUploadDetailsObj.setEndDate(inputEnDatStr);
			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getStartDate() + "");
			valueMap.put(ColumnConstants.STARTDATE.getConstantVal(), valueList);

			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getEndDate() + "");
			valueMap.put(ColumnConstants.ENDDATE.getConstantVal(), valueList);

			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getFinYearFreqDescId() + "");
			valueMap.put(ColumnConstants.FIN_YEAR_FREQ_DESC_ID.getConstantVal(), valueList);

			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getReturnIdList() + "");
			// List<String> returnCodeLst = Arrays.asList(((String)
			// returnsUploadDetailsObj.getReturnIdList()).split(","));
			valueMap.put(ColumnConstants.RETURN_ID_LIST.getConstantVal(), returnsUploadDetailsObj.getReturnIdList());

			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getEntityIdList() + "");
			// List<String> returnCodeLst = Arrays.asList(((String)
			// returnsUploadDetailsObj.getReturnIdList()).split(","));
			valueMap.put(ColumnConstants.ENTITY_ID_LIST.getConstantVal(), returnsUploadDetailsObj.getEntityIdList());

			return returnUploadDetailsService.getDataByColumnValue(valueMap,
					MethodConstants.GET_RETURN_UPLOAD_DETAILS_BY_ENTITY_WISE.getConstantVal());

		} catch (com.iris.exception.ServiceException e) {
			throw e;
		}
	}

	private List<ReturnsUploadDetails> uploadDetailsReturnWise(RetUploadDetBean returnsUploadDetailsObj)
			throws ServiceException, ParseException, ServiceException {
		try {

			Map<String, List<String>> valueMap = new HashMap<>();
			List<String> valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getReturnIdList() + "");
			// List<String> returnCodeLst = Arrays.asList(((String)
			// returnsUploadDetailsObj.getReturnIdList()).split(","));
			valueMap.put(ColumnConstants.RETURN_ID_LIST.getConstantVal(), returnsUploadDetailsObj.getReturnIdList());
			Date startDate = DateManip.convertStringToDate(returnsUploadDetailsObj.getStartDate(),
					returnsUploadDetailsObj.getSessionDateFormat());
			String inputDatStr = DateManip.convertDateToString(startDate, DateConstants.DD_MM_YYYY.getDateConstants());
			returnsUploadDetailsObj.setStartDate(inputDatStr);
			Date endDate = DateManip.convertStringToDate(returnsUploadDetailsObj.getEndDate(),
					returnsUploadDetailsObj.getSessionDateFormat());
			String inputEnDatStr = DateManip.convertDateToString(endDate, DateConstants.DD_MM_YYYY.getDateConstants());
			returnsUploadDetailsObj.setEndDate(inputEnDatStr);
			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getStartDate() + "");
			valueMap.put(ColumnConstants.STARTDATE.getConstantVal(), valueList);

			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getEndDate() + "");
			valueMap.put(ColumnConstants.ENDDATE.getConstantVal(), valueList);

			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getFinYearFreqDescId() + "");
			valueMap.put(ColumnConstants.FIN_YEAR_FREQ_DESC_ID.getConstantVal(), valueList);

			valueList = new ArrayList<String>();
			valueList.add(returnsUploadDetailsObj.getEntityIdList() + "");
			valueMap.put(ColumnConstants.ENTITY_ID_LIST.getConstantVal(), returnsUploadDetailsObj.getEntityIdList());

			return returnUploadDetailsService.getDataByColumnValue(valueMap,
					MethodConstants.GET_RETURN_UPLOAD_DETAILS_BY_RETURN_WISE.getConstantVal());

		} catch (com.iris.exception.ServiceException e) {
			throw e;
		}
	}

	private void validateReturnsUploadDetailsObj(String requestTxnId, RetUploadDetBean retUploadDetBean)
			throws ApplicationException {
		String errorMessage = "";

		if (UtilMaster.isEmpty(requestTxnId)) {
			errorMessage = ErrorConstants.REQUEST_TRANSACTION_ID_NOT_FOUND.getConstantVal();
		}

		if (UtilMaster.isEmpty(retUploadDetBean.getFillingStatus())) {
			if (errorMessage.equals("")) {
				errorMessage = ErrorConstants.FILLING_STATUS_NOT_FOUND.getConstantVal();
			} else {
				errorMessage = errorMessage + ", " + ErrorConstants.FILLING_STATUS_NOT_FOUND.getConstantVal();
			}
		}

		if (UtilMaster.isEmpty(retUploadDetBean.getRecordCountToBeFetched())) {
			if (errorMessage.equals("")) {
				errorMessage = ErrorConstants.RECORD_COUNT_NOT_FOUND.getConstantVal();
			} else {
				errorMessage = errorMessage + ", " + ErrorConstants.RECORD_COUNT_NOT_FOUND.getConstantVal();
			}
		} else {
			if (retUploadDetBean.getRecordCountToBeFetched() <= 0) {
				if (errorMessage.equals("")) {
					errorMessage = ErrorConstants.RECORD_COUNT_SHOULD_BE_GREATER_THAN_0.getConstantVal();
				} else {
					errorMessage = errorMessage + ", "
							+ ErrorConstants.RECORD_COUNT_SHOULD_BE_GREATER_THAN_0.getConstantVal();
				}
			}
		}

		if (UtilMaster.isEmpty(retUploadDetBean.getFileTypeList())) {
			if (errorMessage.equals("")) {
				errorMessage = ErrorConstants.FILE_TYPE_LIST_NOT_FOUND.getConstantVal();
			} else {
				errorMessage = errorMessage + ", " + ErrorConstants.FILE_TYPE_LIST_NOT_FOUND.getConstantVal();
			}
		}
		if (UtilMaster.isEmpty(retUploadDetBean.getLangCode())) {
			if (errorMessage.equals("")) {
				errorMessage = ErrorConstants.LANGUAG_CODE_NOT_FOUND.getConstantVal();
			} else {
				errorMessage = errorMessage + ", " + ErrorConstants.LANGUAG_CODE_NOT_FOUND.getConstantVal();
			}
		}

		if (!errorMessage.equals("")) {
			throw new ApplicationException(ErrorCode.EC0391.toString(),
					ObjectCache.getErrorCodeKey(ErrorCode.EC0391.toString()));
		}
	}

	private List<ReturnsUploadDetails> prepareRetPenDetBeanListResponse(
			List<ReturnsUploadDetails> returnUploadDetailsList, String langCode) {
		List<ReturnsUploadDetails> responseRetUploadDetBeanList = new ArrayList<>();

		for (ReturnsUploadDetails returnsUploadDetails : returnUploadDetailsList) {
			ReturnsUploadDetails responseRetUploadDetBean = new ReturnsUploadDetails();

			Return returnDto = new Return();

			ReturnLabel returnLabel = returnsUploadDetails.getReturnObj().getReturnLblSet().stream()
					.filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(langCode)).findAny().orElse(null);
			returnDto.setReturnCode(returnsUploadDetails.getReturnObj().getReturnCode());
			returnDto.setReturnId(returnsUploadDetails.getReturnObj().getReturnId());
			if (returnLabel != null) {
				returnDto.setReturnName(returnLabel.getReturnLabel());
			} else {
				returnDto.setReturnName(returnsUploadDetails.getReturnObj().getReturnName());
			}

			responseRetUploadDetBean.setReturnObj(returnDto);

			EntityBean entityDto = new EntityBean();

			EntityLabelBean entityLabelBean = returnsUploadDetails.getEntity().getEntityLabelSet().stream()
					.filter(f -> f.getLanguageMaster().getLanguageCode().equalsIgnoreCase(langCode)).findAny()
					.orElse(null);
			entityDto.setEntityId(returnsUploadDetails.getEntity().getEntityId());
			entityDto.setEntityCode(returnsUploadDetails.getEntity().getEntityCode());
			if (entityLabelBean != null) {
				entityDto.setEntityName(entityLabelBean.getEntityNameLabel());
			} else {
				entityDto.setEntityName(returnsUploadDetails.getEntity().getEntityName());
			}

			Category categoryDto = new Category();
			CategoryLabel cagtegoryLabel = returnsUploadDetails.getEntity().getCategory().getCatLblSet().stream()
					.filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(langCode)).findAny().orElse(null);
			if (cagtegoryLabel != null) {
				categoryDto.setCategoryName(cagtegoryLabel.getCategoryLabel());
			} else {
				categoryDto.setCategoryName(returnsUploadDetails.getEntity().getCategory().getCategoryName());
			}
			categoryDto.setCategoryCode(returnsUploadDetails.getEntity().getCategory().getCategoryCode());
			entityDto.setCategory(categoryDto);

			SubCategory subCatDto = new SubCategory();
			SubCategoryLabel subLabel = returnsUploadDetails.getEntity().getSubCategory().getSubCatLblSet().stream()
					.filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(langCode)).findAny().orElse(null);
			if (subLabel != null) {
				subCatDto.setSubCategoryName(subLabel.getSubCategoryLabel());
			} else {
				subCatDto.setSubCategoryName(returnsUploadDetails.getEntity().getSubCategory().getSubCategoryName());
			}
			subCatDto.setSubCategoryCode(returnsUploadDetails.getEntity().getSubCategory().getSubCategoryCode());
			entityDto.setSubCategory(subCatDto);

			Frequency frequeDto = new Frequency();
			frequeDto.setFrequencyId(returnsUploadDetails.getFrequency().getFrequencyId());
			frequeDto.setFrequencyName(returnsUploadDetails.getFrequency().getFrequencyName());
			responseRetUploadDetBean.setFrequency(frequeDto);

			responseRetUploadDetBean.setEntity(entityDto);
			responseRetUploadDetBean.setStartDate(returnsUploadDetails.getStartDate());
			responseRetUploadDetBean.setEndDate(returnsUploadDetails.getEndDate());
			responseRetUploadDetBeanList.add(responseRetUploadDetBean);
		}
		return responseRetUploadDetBeanList;
	}

	private List<ReturnsUploadDetails> prepareRetUploadDetBeanListResponse(
			List<ReturnsUploadDetails> returnUploadDetailsList, String langCode) {
		List<ReturnsUploadDetails> responseRetUploadDetBeanList = new ArrayList<>();

		for (ReturnsUploadDetails returnsUploadDetails : returnUploadDetailsList) {
			ReturnsUploadDetails responseRetUploadDetBean = new ReturnsUploadDetails();
			responseRetUploadDetBean.setUploadedDate(returnsUploadDetails.getUploadedDate());
			responseRetUploadDetBean.setUploadId(returnsUploadDetails.getUploadId());
			responseRetUploadDetBean.setStartDate(returnsUploadDetails.getStartDate());
			responseRetUploadDetBean.setEndDate(returnsUploadDetails.getEndDate());
			responseRetUploadDetBean.setStartDateInLong(returnsUploadDetails.getStartDate().getTime());
			responseRetUploadDetBean.setEndDateInLong(returnsUploadDetails.getEndDate().getTime());
			if (!Objects.isNull(returnsUploadDetails.getFileDetailsBean())) {
				responseRetUploadDetBean
						.setApplicationProcessId(returnsUploadDetails.getFileDetailsBean().getApplicationProcessId());

				if (returnsUploadDetails.getFileDetailsBean().getCreationDate() != null) {
					responseRetUploadDetBean
							.setUploadedOnInLong(returnsUploadDetails.getFileDetailsBean().getCreationDate().getTime());
				}
			}
			responseRetUploadDetBean.setNillable(returnsUploadDetails.isNillable());
			if (!UtilMaster.isEmpty(returnsUploadDetails.getNillableComments())) {
				responseRetUploadDetBean.setNillableComments(returnsUploadDetails.getNillableComments());
			}
			Frequency frequeDto = new Frequency();
			frequeDto.setFrequencyId(returnsUploadDetails.getFrequency().getFrequencyId());
			frequeDto.setFrequencyName(ObjectCache.getLabelKeyValue("en",returnsUploadDetails.getFrequency().getFrequencyName()));
			frequeDto.setFrequencyCode(returnsUploadDetails.getFrequency().getFrequencyCode());
			responseRetUploadDetBean.setFrequency(frequeDto);

			Return returnDto = new Return();
			returnDto.setReturnId(returnsUploadDetails.getReturnObj().getReturnId());
			returnDto.setReturnCode(returnsUploadDetails.getReturnObj().getReturnCode());

			ReturnLabel returnLabel = returnsUploadDetails.getReturnObj().getReturnLblSet().stream()
					.filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(langCode)).findAny().orElse(null);

			if (returnLabel != null) {
				returnDto.setReturnName(returnLabel.getReturnLabel());
			} else {
				returnDto.setReturnName(returnsUploadDetails.getReturnObj().getReturnName());
			}
			
			if (returnsUploadDetails.getReturnObj().getErrorCodeBeauJsonObj() != null) {
				returnDto.setErrorCodeBeauJson(
						returnsUploadDetails.getReturnObj().getErrorCodeBeauJsonObj().getBeauJson());
			}

			List<ReturnFileFormatMap> returnFileFormatList = null;
			if (!CollectionUtils.isEmpty(returnsUploadDetails.getReturnObj().getReturnFileFormatMapList())) {
				returnFileFormatList = new ArrayList<>();
				for (ReturnFileFormatMap returnFileFormatMap : returnsUploadDetails.getReturnObj()
						.getReturnFileFormatMapList()) {
					ReturnFileFormatMap retFileFormatMap = new ReturnFileFormatMap();
					retFileFormatMap.setFileFormat(returnFileFormatMap.getFileFormat());
					retFileFormatMap.setJsonToReadFile(returnFileFormatMap.getJsonToReadFile());
					retFileFormatMap.setFormulaFileName(returnFileFormatMap.getFormulaFileName());
					returnFileFormatList.add(retFileFormatMap);
				}
				returnDto.setReturnFileFormatMapList(returnFileFormatList);
			}
			responseRetUploadDetBean.setReturnObj(returnDto);

			UploadChannel uploadChDto = new UploadChannel();
			uploadChDto.setUploadChannelId(returnsUploadDetails.getFileDetailsBean() != null ? returnsUploadDetails.getFileDetailsBean().getUploadChannelIdFk().getUploadChannelId() : -1L);
			uploadChDto.setUploadChannelDesc(returnsUploadDetails.getFileDetailsBean() != null ? ObjectCache.getLabelKeyValue("en", returnsUploadDetails.getFileDetailsBean().getUploadChannelIdFk().getUploadChannelDesc()) : "NA");
			responseRetUploadDetBean.setUploadChannel(uploadChDto);

			EntityBean entityDto = new EntityBean();
			entityDto.setEntityId(returnsUploadDetails.getEntity().getEntityId());
			entityDto.setEntityName(returnsUploadDetails.getEntity().getEntityName());
			entityDto.setEntityCode(returnsUploadDetails.getEntity().getEntityCode());

			Category categoryDto = new Category();
			categoryDto.setCategoryCode(returnsUploadDetails.getEntity().getCategory().getCategoryCode());
			categoryDto.setCategoryName(returnsUploadDetails.getEntity().getCategory().getCategoryName());
			entityDto.setCategory(categoryDto);

			SubCategory subCatDto = new SubCategory();
			subCatDto.setSubCategoryCode(returnsUploadDetails.getEntity().getSubCategory().getSubCategoryCode());
			subCatDto.setSubCategoryName(returnsUploadDetails.getEntity().getSubCategory().getSubCategoryName());
			entityDto.setSubCategory(subCatDto);

			responseRetUploadDetBean.setEntity(entityDto);

			UserMaster userDto = new UserMaster();
			userDto.setUserId(returnsUploadDetails.getUploadedBy().getUserId());
			userDto.setUserName(returnsUploadDetails.getUploadedBy().getUserName());
			responseRetUploadDetBean.setUploadedBy(userDto);

			if (returnsUploadDetails.getUnlockingReqId() != null) {
				UnlockingRequest unlockRequestDto = new UnlockingRequest();
				unlockRequestDto.setUnlockingReqId(returnsUploadDetails.getUnlockingReqId().getUnlockingReqId());
				unlockRequestDto.setUnlockStatus(returnsUploadDetails.getUnlockingReqId().getUnlockStatus());
				responseRetUploadDetBean.setUnlockingReqId(unlockRequestDto);
			}

			if (returnsUploadDetails.getRevisionRequestId() != null) {
				RevisionRequest revisionRequestDto = new RevisionRequest();
				revisionRequestDto
						.setRevisionRequestId(returnsUploadDetails.getRevisionRequestId().getRevisionRequestId());
				revisionRequestDto.setRevisionStatus(returnsUploadDetails.getRevisionRequestId().getReasonForRequest());
				responseRetUploadDetBean.setRevisionRequestId(revisionRequestDto);
			}

			responseRetUploadDetBean.setInstanceFile(returnsUploadDetails.getInstanceFile());

			if (returnsUploadDetails.getTaxonomyId() != null) {
				ReturnTemplate taxonomy = new ReturnTemplate();
				taxonomy.setReturnTemplateId(returnsUploadDetails.getTaxonomyId().getReturnTemplateId());
				taxonomy.setVersionDesc(returnsUploadDetails.getTaxonomyId().getVersionDesc());
				taxonomy.setVersionNumber(returnsUploadDetails.getTaxonomyId().getVersionNumber());
				taxonomy.setXsdFileName(returnsUploadDetails.getTaxonomyId().getXsdFileName());
				taxonomy.setTaxonomyName(returnsUploadDetails.getTaxonomyId().getTaxonomyName());
				taxonomy.setFormulaFileName(returnsUploadDetails.getTaxonomyId().getFormulaFileName());
				taxonomy.setJsonDataFileName(returnsUploadDetails.getTaxonomyId().getJsonDataFileName());
				responseRetUploadDetBean.setTaxonomyId(taxonomy);
			}

			if (returnsUploadDetails.getUploadUsrRole() != null) {
				UserRole userRole = new UserRole();
				userRole.setUserRoleId(returnsUploadDetails.getUploadUsrRole().getRoleIdKey());
				userRole.setRoleDesc(returnsUploadDetails.getUploadUsrRole().getRoleDesc());
				userRole.setUserRoleId(returnsUploadDetails.getUploadUsrRole().getUserRoleId());
				responseRetUploadDetBean.setUploadUsrRole(userRole);
			}

			responseRetUploadDetBean.setFileType(returnsUploadDetails.getFileType());

			WorkFlowMasterBean workflow = new WorkFlowMasterBean();
			workflow.setWorkflowId(returnsUploadDetails.getWorkFlowMaster().getWorkflowId());
			workflow.setWorkFlowJson(returnsUploadDetails.getWorkFlowMaster().getWorkFlowJson());

			responseRetUploadDetBean.setWorkFlowMaster(workflow);

			ReturnPropertyValue returnPropertyValue = new ReturnPropertyValue();
			returnPropertyValue.setReturnProprtyValId(returnsUploadDetails.getReturnPropertyValue() != null ? returnsUploadDetails.getReturnPropertyValue().getReturnProprtyValId() : -1);
			returnPropertyValue.setReturnProValue(returnsUploadDetails.getReturnPropertyValue() != null ? returnsUploadDetails.getReturnPropertyValue().getReturnProValue() : "NA");
			responseRetUploadDetBean.setReturnPropertyValue(returnPropertyValue);
			
			responseRetUploadDetBeanList.add(responseRetUploadDetBean);
		}

		return responseRetUploadDetBeanList;
	}

	private List<ReturnsUploadDetails> prepareRetSubmittedResponse(List<ReturnsUploadDetails> returnUploadDetailsList,
			String langCode) {
		List<ReturnsUploadDetails> responseRetUploadDetBeanList = new ArrayList<>();

		for (ReturnsUploadDetails returnsUploadDetails : returnUploadDetailsList) {
			ReturnsUploadDetails responseRetUploadDetBean = new ReturnsUploadDetails();
			responseRetUploadDetBean.setUploadedDate(returnsUploadDetails.getUploadedDate());
			responseRetUploadDetBean.setUploadId(returnsUploadDetails.getUploadId());
			responseRetUploadDetBean.setStartDate(returnsUploadDetails.getStartDate());
			responseRetUploadDetBean.setEndDate(returnsUploadDetails.getEndDate());
			responseRetUploadDetBean.setStartDateInLong(returnsUploadDetails.getStartDate().getTime());
			responseRetUploadDetBean.setEndDateInLong(returnsUploadDetails.getEndDate().getTime());
			responseRetUploadDetBean
					.setApplicationProcessId(returnsUploadDetails.getFileDetailsBean().getApplicationProcessId());
			responseRetUploadDetBean.setNillable(returnsUploadDetails.isNillable());
			if (!UtilMaster.isEmpty(returnsUploadDetails.getNillableComments())) {
				responseRetUploadDetBean.setNillableComments(returnsUploadDetails.getNillableComments());
			}
			Frequency frequeDto = new Frequency();
			frequeDto.setFrequencyId(returnsUploadDetails.getFrequency().getFrequencyId());
			frequeDto.setFrequencyName(returnsUploadDetails.getFrequency().getFrequencyName());
			responseRetUploadDetBean.setFrequency(frequeDto);
			responseRetUploadDetBean.setInstanceFile(returnsUploadDetails.getInstanceFile());
			Return returnDto = new Return();
			returnDto.setReturnId(returnsUploadDetails.getReturnObj().getReturnId());
			returnDto.setReturnCode(returnsUploadDetails.getReturnObj().getReturnCode());

			ReturnLabel returnLabel = returnsUploadDetails.getReturnObj().getReturnLblSet().stream()
					.filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(langCode)).findAny().orElse(null);

			if (returnLabel != null) {
				returnDto.setReturnName(returnLabel.getReturnLabel());
			} else {
				returnDto.setReturnName(returnsUploadDetails.getReturnObj().getReturnName());
			}

			List<ReturnFileFormatMap> returnFileFormatList = null;
			if (!CollectionUtils.isEmpty(returnsUploadDetails.getReturnObj().getReturnFileFormatMapList())) {
				returnFileFormatList = new ArrayList<>();
				for (ReturnFileFormatMap returnFileFormatMap : returnsUploadDetails.getReturnObj()
						.getReturnFileFormatMapList()) {
					ReturnFileFormatMap retFileFormatMap = new ReturnFileFormatMap();
					retFileFormatMap.setFileFormat(returnFileFormatMap.getFileFormat());
					retFileFormatMap.setJsonToReadFile(returnFileFormatMap.getJsonToReadFile());
					retFileFormatMap.setFormulaFileName(returnFileFormatMap.getFormulaFileName());
					returnFileFormatList.add(retFileFormatMap);
				}
				returnDto.setReturnFileFormatMapList(returnFileFormatList);
			}
			responseRetUploadDetBean.setReturnObj(returnDto);

			UploadChannel uploadChDto = new UploadChannel();
			uploadChDto.setUploadChannelDesc(
					returnsUploadDetails.getFileDetailsBean().getUploadChannelIdFk().getUploadChannelDesc());
			uploadChDto.setUploadChannelId(
					returnsUploadDetails.getFileDetailsBean().getUploadChannelIdFk().getUploadChannelId());
			responseRetUploadDetBean.setUploadChannel(uploadChDto);

			/*
			 * UploadChannel uploadChDto = new UploadChannel(); //
			 * uploadChDto.setUploadChannelDesc(returnsUploadDetails.getUploadChannel().
			 * getUploadChannelDesc()); if(returnsUploadDetails.getUploadChannel() != null)
			 * { uploadChDto.setUploadChannelDesc(returnsUploadDetails.getUploadChannel().
			 * getUploadChannelDesc());
			 * uploadChDto.setUploadChannelId(returnsUploadDetails.getUploadChannel().
			 * getUploadChannelId());
			 * responseRetUploadDetBean.setUploadChannel(uploadChDto); } else {
			 * responseRetUploadDetBean.setUploadChannel(null); }
			 */

			EntityBean entityDto = new EntityBean();

			EntityLabelBean entityLabelBean = returnsUploadDetails.getEntity().getEntityLabelSet().stream()
					.filter(f -> f.getLanguageMaster().getLanguageCode().equalsIgnoreCase(langCode)).findAny()
					.orElse(null);
			entityDto.setEntityId(returnsUploadDetails.getEntity().getEntityId());
			entityDto.setEntityCode(returnsUploadDetails.getEntity().getEntityCode());
			if (entityLabelBean != null) {
				entityDto.setEntityName(entityLabelBean.getEntityNameLabel());
			} else {
				entityDto.setEntityName(returnsUploadDetails.getEntity().getEntityName());
			}

			Category categoryDto = new Category();
			CategoryLabel cagtegoryLabel = returnsUploadDetails.getEntity().getCategory().getCatLblSet().stream()
					.filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(langCode)).findAny().orElse(null);
			if (cagtegoryLabel != null) {
				categoryDto.setCategoryName(cagtegoryLabel.getCategoryLabel());
			} else {
				categoryDto.setCategoryName(returnsUploadDetails.getEntity().getCategory().getCategoryName());
			}
			categoryDto.setCategoryCode(returnsUploadDetails.getEntity().getCategory().getCategoryCode());
			entityDto.setCategory(categoryDto);

			SubCategory subCatDto = new SubCategory();
			SubCategoryLabel subLabel = returnsUploadDetails.getEntity().getSubCategory().getSubCatLblSet().stream()
					.filter(f -> f.getLangIdFk().getLanguageCode().equalsIgnoreCase(langCode)).findAny().orElse(null);
			if (subLabel != null) {
				subCatDto.setSubCategoryName(subLabel.getSubCategoryLabel());
			} else {
				subCatDto.setSubCategoryName(returnsUploadDetails.getEntity().getSubCategory().getSubCategoryName());
			}
			subCatDto.setSubCategoryCode(returnsUploadDetails.getEntity().getSubCategory().getSubCategoryCode());
			entityDto.setSubCategory(subCatDto);

			responseRetUploadDetBean.setEntity(entityDto);

			UserMaster userDto = new UserMaster();
			userDto.setUserId(returnsUploadDetails.getUploadedBy().getUserId());
			userDto.setUserName(returnsUploadDetails.getUploadedBy().getUserName());
			responseRetUploadDetBean.setUploadedBy(userDto);

			if (returnsUploadDetails.getUnlockingReqId() != null) {
				UnlockingRequest unlockRequestDto = new UnlockingRequest();
				unlockRequestDto.setUnlockingReqId(returnsUploadDetails.getUnlockingReqId().getUnlockingReqId());
				unlockRequestDto.setUnlockStatus(returnsUploadDetails.getUnlockingReqId().getUnlockStatus());
				responseRetUploadDetBean.setUnlockingReqId(unlockRequestDto);
			}

			if (returnsUploadDetails.getRevisionRequestId() != null) {
				RevisionRequest revisionRequestDto = new RevisionRequest();
				revisionRequestDto
						.setRevisionRequestId(returnsUploadDetails.getRevisionRequestId().getRevisionRequestId());
				revisionRequestDto.setRevisionStatus(returnsUploadDetails.getRevisionRequestId().getReasonForRequest());
				responseRetUploadDetBean.setRevisionRequestId(revisionRequestDto);
			}
			if (returnsUploadDetails.getFileDetailsBean().getCreationDate() != null) {
				responseRetUploadDetBean
						.setUploadedOnInLong(returnsUploadDetails.getFileDetailsBean().getCreationDate().getTime());
			}

			responseRetUploadDetBean.setInstanceFile(returnsUploadDetails.getInstanceFile());

			if (returnsUploadDetails.getTaxonomyId() != null) {
				ReturnTemplate taxonomy = new ReturnTemplate();
				taxonomy.setReturnTemplateId(returnsUploadDetails.getTaxonomyId().getReturnTemplateId());
				taxonomy.setVersionDesc(returnsUploadDetails.getTaxonomyId().getVersionDesc());
				taxonomy.setVersionNumber(returnsUploadDetails.getTaxonomyId().getVersionNumber());
				taxonomy.setXsdFileName(returnsUploadDetails.getTaxonomyId().getXsdFileName());
				responseRetUploadDetBean.setTaxonomyId(taxonomy);
			}

			if (returnsUploadDetails.getUploadUsrRole() != null) {
				UserRole userRole = new UserRole();
				userRole.setUserRoleId(returnsUploadDetails.getUploadUsrRole().getRoleIdKey());
				userRole.setRoleDesc(returnsUploadDetails.getUploadUsrRole().getRoleDesc());
				userRole.setUserRoleId(returnsUploadDetails.getUploadUsrRole().getUserRoleId());
				responseRetUploadDetBean.setUploadUsrRole(userRole);
			}

			//responseRetUploadDetBean.setFileDetailsBean(returnsUploadDetails.getFileDetailsBean());
			if(returnsUploadDetails.getFileType() != null) {
				responseRetUploadDetBean.setFileNameType(returnsUploadDetails.getFileType());
			}
			if(returnsUploadDetails.getFileDetailsBean() != null) {
				responseRetUploadDetBean.setFileName(returnsUploadDetails.getFileDetailsBean().getFileName());
			}
			if(returnsUploadDetails.getFileDetailsBean() != null) {
				responseRetUploadDetBean.setOriginalSupportiveDocName(returnsUploadDetails.getFileDetailsBean().getSupportiveDocName());
			}
			
			if(!UtilMaster.isEmpty(returnsUploadDetails.getAttachedFile())) {
				responseRetUploadDetBean.setAttachedFile(returnsUploadDetails.getAttachedFile());
			}
			
			
			WorkFlowMasterBean workflow = new WorkFlowMasterBean();
			workflow.setWorkflowId(returnsUploadDetails.getWorkFlowMaster().getWorkflowId());
			workflow.setWorkFlowJson(returnsUploadDetails.getWorkFlowMaster().getWorkFlowJson());

			responseRetUploadDetBean.setWorkFlowMaster(workflow);
			
			if(!Validations.isEmpty(returnsUploadDetails.getAttachedFile())) {
				responseRetUploadDetBean.setAttachedFile(returnsUploadDetails.getAttachedFile());
			}

			responseRetUploadDetBeanList.add(responseRetUploadDetBean);
		}

		return responseRetUploadDetBeanList;
	}

}
